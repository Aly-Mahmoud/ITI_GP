
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08007e10  08007e10  00008e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f44  08007f44  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007f44  08007f44  00008f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f4c  08007f4c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f4c  08007f4c  00008f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f50  08007f50  00008f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007f54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d44  20000064  08007fb8  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004da8  08007fb8  00009da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019538  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377a  00000000  00000000  000225cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00025d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff7  00000000  00000000  000271d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001889f  00000000  00000000  000281c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171c2  00000000  00000000  00040a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009828a  00000000  00000000  00057c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efeb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a84  00000000  00000000  000efef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007df8 	.word	0x08007df8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007df8 	.word	0x08007df8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <Parse_Steering_Data>:

uint8_t uart_rx_buffer[BUFFER_SIZE];


void Parse_Steering_Data(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
    steering_data.steering = uart_rx_buffer[3];
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cb2:	78da      	ldrb	r2, [r3, #3]
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cb6:	705a      	strb	r2, [r3, #1]
    steering_data.pedal_gas = uart_rx_buffer[4];
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cba:	791a      	ldrb	r2, [r3, #4]
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cbe:	709a      	strb	r2, [r3, #2]
    steering_data.pedal_brake = uart_rx_buffer[5];
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cc2:	795a      	ldrb	r2, [r3, #5]
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cc6:	70da      	strb	r2, [r3, #3]
    steering_data.buttons = uart_rx_buffer[6];
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cca:	799a      	ldrb	r2, [r3, #6]
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cce:	711a      	strb	r2, [r3, #4]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	20000080 	.word	0x20000080

08000ce4 <calculate_crc>:
//	Parse_Steering_Data();
//	UART_Receive_Data_IT();
//}


uint8_t calculate_crc(uint8_t *data, size_t length) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; i++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	e009      	b.n	8000d0c <calculate_crc+0x28>
        crc += data[i];
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4413      	add	r3, r2
 8000d04:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; i++) {
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3f1      	bcc.n	8000cf8 <calculate_crc+0x14>
    }
    return crc;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <check_crc>:

// Function to check the received data with CRC
uint8_t check_crc(uint8_t *data, size_t length) {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
    if (length < 2) {
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d801      	bhi.n	8000d36 <check_crc+0x14>
        // Data is too short to contain a CRC
        return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e014      	b.n	8000d60 <check_crc+0x3e>
    }

    // Extract the CRC from the last byte
    uint8_t received_crc = data[length - 1];
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	73fb      	strb	r3, [r7, #15]

    // Calculate the CRC over the data (excluding the last byte)
    uint8_t calculated_crc = calculate_crc(data, length - 1);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffcb 	bl	8000ce4 <calculate_crc>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73bb      	strb	r3, [r7, #14]

    // Compare the calculated CRC with the received CRC
    return (calculated_crc == received_crc);
 8000d52:	7bba      	ldrb	r2, [r7, #14]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	bf0c      	ite	eq
 8000d5a:	2301      	moveq	r3, #1
 8000d5c:	2300      	movne	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <Communication>:

void Communication(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef uart_status;
    uint8_t header[HEADER_SIZE] = {0}; // Initialize header to a known value
 8000d6e:	4b31      	ldr	r3, [pc, #196]	@ (8000e34 <Communication+0xcc>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	80bb      	strh	r3, [r7, #4]
 8000d74:	2300      	movs	r3, #0
 8000d76:	71bb      	strb	r3, [r7, #6]
    uint8_t expected_header[HEADER_SIZE] = VALID_HEADER;
 8000d78:	4a2f      	ldr	r2, [pc, #188]	@ (8000e38 <Communication+0xd0>)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	8019      	strh	r1, [r3, #0]
 8000d82:	3302      	adds	r3, #2
 8000d84:	0c12      	lsrs	r2, r2, #16
 8000d86:	701a      	strb	r2, [r3, #0]

    for (;;)
    {
		static uint8_t crc_check = 0;
		if (xSemaphoreTake(Semaphore1Handle, HAL_MAX_DELAY) == pdTRUE)
 8000d88:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <Communication+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 fc83 	bl	800569c <xQueueSemaphoreTake>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d1f5      	bne.n	8000d88 <Communication+0x20>
			{
    	        {
    	            // Step 1: Receive the header bytes
    	            do
    	            {
    	            	uart_status = HAL_UART_Receive(&huart6, header, HEADER_SIZE, HAL_MAX_DELAY);
 8000d9c:	1d39      	adds	r1, r7, #4
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2203      	movs	r2, #3
 8000da4:	4826      	ldr	r0, [pc, #152]	@ (8000e40 <Communication+0xd8>)
 8000da6:	f003 f9cf 	bl	8004148 <HAL_UART_Receive>
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
    	                //uart_status = HAL_UART_Receive(&huart2, header, HEADER_SIZE, HAL_MAX_DELAY);
    	            }
    	            while (memcmp(header, expected_header, HEADER_SIZE) != 0);
 8000dae:	4639      	mov	r1, r7
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2203      	movs	r2, #3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 ff27 	bl	8007c08 <memcmp>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1ed      	bne.n	8000d9c <Communication+0x34>

    		            if (uart_status == HAL_OK && memcmp(header, expected_header, HEADER_SIZE) == 0)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d126      	bne.n	8000e14 <Communication+0xac>
 8000dc6:	4639      	mov	r1, r7
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2203      	movs	r2, #3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 ff1b 	bl	8007c08 <memcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d11d      	bne.n	8000e14 <Communication+0xac>
    		            {
    		                // Step 2: Receive the remaining bytes if the header is valid
    		                uart_status = HAL_UART_Receive(&huart6, uart_rx_buffer + HEADER_SIZE, BUFFER_SIZE, HAL_MAX_DELAY);
 8000dd8:	491a      	ldr	r1, [pc, #104]	@ (8000e44 <Communication+0xdc>)
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	2208      	movs	r2, #8
 8000de0:	4817      	ldr	r0, [pc, #92]	@ (8000e40 <Communication+0xd8>)
 8000de2:	f003 f9b1 	bl	8004148 <HAL_UART_Receive>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
    		                //uart_status = HAL_UART_Receive(&huart2, uart_rx_buffer + HEADER_SIZE, BUFFER_SIZE, HAL_MAX_DELAY);


    		                if (uart_status == HAL_OK)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d111      	bne.n	8000e14 <Communication+0xac>
    		                {
    		                    // Copy the header to the buffer
    		                    memcpy(uart_rx_buffer, header, HEADER_SIZE);
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <Communication+0xe0>)
 8000df2:	1d3a      	adds	r2, r7, #4
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	4611      	mov	r1, r2
 8000df8:	8019      	strh	r1, [r3, #0]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	0c12      	lsrs	r2, r2, #16
 8000dfe:	701a      	strb	r2, [r3, #0]
    		                    crc_check =   check_crc(uart_rx_buffer , BUFFER_SIZE);
 8000e00:	2108      	movs	r1, #8
 8000e02:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <Communication+0xe0>)
 8000e04:	f7ff ff8d 	bl	8000d22 <check_crc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <Communication+0xe4>)
 8000e0e:	701a      	strb	r2, [r3, #0]
    		                    // Process the received data
    		                    Parse_Steering_Data();
 8000e10:	f7ff ff4c 	bl	8000cac <Parse_Steering_Data>
    		                }
    		            }

    		        }

    	}while (crc_check == 0);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <Communication+0xe4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0bf      	beq.n	8000d9c <Communication+0x34>

    	crc_check = 0;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <Communication+0xe4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
    	xSemaphoreGive(Semaphore2Handle);
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <Communication+0xe8>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f004 f9b4 	bl	8005198 <xQueueGenericSend>
    {
 8000e30:	e7aa      	b.n	8000d88 <Communication+0x20>
 8000e32:	bf00      	nop
 8000e34:	08007e10 	.word	0x08007e10
 8000e38:	08007e14 	.word	0x08007e14
 8000e3c:	2000021c 	.word	0x2000021c
 8000e40:	200001c8 	.word	0x200001c8
 8000e44:	2000008b 	.word	0x2000008b
 8000e48:	20000088 	.word	0x20000088
 8000e4c:	20000090 	.word	0x20000090
 8000e50:	20000220 	.word	0x20000220
 8000e54:	00000000 	.word	0x00000000

08000e58 <controllingSM>:
static int32_t map_value(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);
static void setSteeringAngle(void);
static void checkSteering(void);

void controllingSM(void)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af02      	add	r7, sp, #8

	/* Set the Direction of Motors to FWD */
	//setMotorDirection(DIR_FWD);

	//pwm_value_steering = map_value(steering_data.steering, MIN_STEERING_VALUE, MAX_STEERING_VALUE, 0, 100);
	uint32_t pedal_value = abs_diff(map_value(uart_rx_buffer[PEDAL_GAS_IDX],PEDAL_GAS_MIN,PEDAL_GAS_MAX,0,100)\
 8000e5e:	4bba      	ldr	r3, [pc, #744]	@ (8001148 <controllingSM+0x2f0>)
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	2364      	movs	r3, #100	@ 0x64
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	2240      	movs	r2, #64	@ 0x40
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f000 fae3 	bl	8001438 <map_value>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461c      	mov	r4, r3
						,map_value(uart_rx_buffer[PEDAL_BRAKE_IDX],PEDAL_BRAKE_MIN,PEDAL_BRAKE_MAX,0,100));
 8000e76:	4bb4      	ldr	r3, [pc, #720]	@ (8001148 <controllingSM+0x2f0>)
 8000e78:	795b      	ldrb	r3, [r3, #5]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2300      	movs	r3, #0
 8000e82:	2240      	movs	r2, #64	@ 0x40
 8000e84:	2100      	movs	r1, #0
 8000e86:	f000 fad7 	bl	8001438 <map_value>
 8000e8a:	4603      	mov	r3, r0
	uint32_t pedal_value = abs_diff(map_value(uart_rx_buffer[PEDAL_GAS_IDX],PEDAL_GAS_MIN,PEDAL_GAS_MAX,0,100)\
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f000 fa66 	bl	8001360 <abs_diff>
 8000e94:	6078      	str	r0, [r7, #4]
	if(uart_rx_buffer[PEDAL_BRAKE_IDX] < 255 && uart_rx_buffer[PEDAL_GAS_IDX] == 0)
 8000e96:	4bac      	ldr	r3, [pc, #688]	@ (8001148 <controllingSM+0x2f0>)
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	2bff      	cmp	r3, #255	@ 0xff
 8000e9c:	d006      	beq.n	8000eac <controllingSM+0x54>
 8000e9e:	4baa      	ldr	r3, [pc, #680]	@ (8001148 <controllingSM+0x2f0>)
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <controllingSM+0x54>
	{
		pedal_value = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e005      	b.n	8000eb8 <controllingSM+0x60>
	}
	else if(uart_rx_buffer[PEDAL_BRAKE_IDX] == 255)
 8000eac:	4ba6      	ldr	r3, [pc, #664]	@ (8001148 <controllingSM+0x2f0>)
 8000eae:	795b      	ldrb	r3, [r3, #5]
 8000eb0:	2bff      	cmp	r3, #255	@ 0xff
 8000eb2:	d101      	bne.n	8000eb8 <controllingSM+0x60>
	{
		pedal_value = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);*/



	checkClutchValue();
 8000eb8:	f000 fa68 	bl	800138c <checkClutchValue>
	switch (clutch_value)
 8000ebc:	4ba3      	ldr	r3, [pc, #652]	@ (800114c <controllingSM+0x2f4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	f200 814f 	bhi.w	8001164 <controllingSM+0x30c>
 8000ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ecc <controllingSM+0x74>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000ee5 	.word	0x08000ee5
 8000ed0:	08000f59 	.word	0x08000f59
 8000ed4:	08000f6d 	.word	0x08000f6d
 8000ed8:	08000fe1 	.word	0x08000fe1
 8000edc:	08001055 	.word	0x08001055
 8000ee0:	080010c9 	.word	0x080010c9
	{
		case BACK:
			setMotorDirection(DIR_BACK);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f000 f9d1 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 75 * (pedal_value / 100.0);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff faba 	bl	8000464 <__aeabi_ui2d>
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b96      	ldr	r3, [pc, #600]	@ (8001150 <controllingSM+0x2f8>)
 8000ef6:	f7ff fc59 	bl	80007ac <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	a38f      	add	r3, pc, #572	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fb26 	bl	8000558 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fd32 	bl	800097c <__aeabi_d2uiz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001154 <controllingSM+0x2fc>)
 8000f1e:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 75 * (pedal_value / 100.0);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fa9f 	bl	8000464 <__aeabi_ui2d>
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b89      	ldr	r3, [pc, #548]	@ (8001150 <controllingSM+0x2f8>)
 8000f2c:	f7ff fc3e 	bl	80007ac <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	a381      	add	r3, pc, #516	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff fb0b 	bl	8000558 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fd17 	bl	800097c <__aeabi_d2uiz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b81      	ldr	r3, [pc, #516]	@ (8001158 <controllingSM+0x300>)
 8000f54:	701a      	strb	r2, [r3, #0]
			break;
 8000f56:	e106      	b.n	8001166 <controllingSM+0x30e>
		case STOP:
			setMotorDirection(DIR_FWD);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f997 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 0;
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001154 <controllingSM+0x2fc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 0;
 8000f64:	4b7c      	ldr	r3, [pc, #496]	@ (8001158 <controllingSM+0x300>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
			break;
 8000f6a:	e0fc      	b.n	8001166 <controllingSM+0x30e>
		case ONE:
			setMotorDirection(DIR_FWD);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f98d 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 25 * (pedal_value / 100.0);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fa76 	bl	8000464 <__aeabi_ui2d>
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b74      	ldr	r3, [pc, #464]	@ (8001150 <controllingSM+0x2f8>)
 8000f7e:	f7ff fc15 	bl	80007ac <__aeabi_ddiv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	4b73      	ldr	r3, [pc, #460]	@ (800115c <controllingSM+0x304>)
 8000f90:	f7ff fae2 	bl	8000558 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fcee 	bl	800097c <__aeabi_d2uiz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8001154 <controllingSM+0x2fc>)
 8000fa6:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 25 * (pedal_value / 100.0);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff fa5b 	bl	8000464 <__aeabi_ui2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <controllingSM+0x2f8>)
 8000fb4:	f7ff fbfa 	bl	80007ac <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	4b65      	ldr	r3, [pc, #404]	@ (800115c <controllingSM+0x304>)
 8000fc6:	f7ff fac7 	bl	8000558 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f7ff fcd3 	bl	800097c <__aeabi_d2uiz>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b5f      	ldr	r3, [pc, #380]	@ (8001158 <controllingSM+0x300>)
 8000fdc:	701a      	strb	r2, [r3, #0]
			break;
 8000fde:	e0c2      	b.n	8001166 <controllingSM+0x30e>
		case TWO:
			setMotorDirection(DIR_FWD);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f953 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 50 * (pedal_value / 100.0);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fa3c 	bl	8000464 <__aeabi_ui2d>
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b57      	ldr	r3, [pc, #348]	@ (8001150 <controllingSM+0x2f8>)
 8000ff2:	f7ff fbdb 	bl	80007ac <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <controllingSM+0x308>)
 8001004:	f7ff faa8 	bl	8000558 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fcb4 	bl	800097c <__aeabi_d2uiz>
 8001014:	4603      	mov	r3, r0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b4e      	ldr	r3, [pc, #312]	@ (8001154 <controllingSM+0x2fc>)
 800101a:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 50 * (pedal_value / 100.0);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fa21 	bl	8000464 <__aeabi_ui2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b4a      	ldr	r3, [pc, #296]	@ (8001150 <controllingSM+0x2f8>)
 8001028:	f7ff fbc0 	bl	80007ac <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <controllingSM+0x308>)
 800103a:	f7ff fa8d 	bl	8000558 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fc99 	bl	800097c <__aeabi_d2uiz>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b42      	ldr	r3, [pc, #264]	@ (8001158 <controllingSM+0x300>)
 8001050:	701a      	strb	r2, [r3, #0]
			break;
 8001052:	e088      	b.n	8001166 <controllingSM+0x30e>
		case THREE:
			setMotorDirection(DIR_FWD);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f919 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 75 * (pedal_value / 100.0);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fa02 	bl	8000464 <__aeabi_ui2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <controllingSM+0x2f8>)
 8001066:	f7ff fba1 	bl	80007ac <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	a333      	add	r3, pc, #204	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fa6e 	bl	8000558 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fc7a 	bl	800097c <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <controllingSM+0x2fc>)
 800108e:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 75 * (pedal_value / 100.0);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff f9e7 	bl	8000464 <__aeabi_ui2d>
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <controllingSM+0x2f8>)
 800109c:	f7ff fb86 	bl	80007ac <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	a325      	add	r3, pc, #148	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fa53 	bl	8000558 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fc5f 	bl	800097c <__aeabi_d2uiz>
 80010be:	4603      	mov	r3, r0
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <controllingSM+0x300>)
 80010c4:	701a      	strb	r2, [r3, #0]
			break;
 80010c6:	e04e      	b.n	8001166 <controllingSM+0x30e>
		case FOUR:
			setMotorDirection(DIR_FWD);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f8df 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 100 * (pedal_value / 100.0);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f9c8 	bl	8000464 <__aeabi_ui2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <controllingSM+0x2f8>)
 80010da:	f7ff fb67 	bl	80007ac <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <controllingSM+0x2f8>)
 80010ec:	f7ff fa34 	bl	8000558 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fc40 	bl	800097c <__aeabi_d2uiz>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <controllingSM+0x2fc>)
 8001102:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 100 * (pedal_value / 100.0);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff f9ad 	bl	8000464 <__aeabi_ui2d>
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <controllingSM+0x2f8>)
 8001110:	f7ff fb4c 	bl	80007ac <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <controllingSM+0x2f8>)
 8001122:	f7ff fa19 	bl	8000558 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fc25 	bl	800097c <__aeabi_d2uiz>
 8001132:	4603      	mov	r3, r0
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <controllingSM+0x300>)
 8001138:	701a      	strb	r2, [r3, #0]
			break;
 800113a:	e014      	b.n	8001166 <controllingSM+0x30e>
 800113c:	f3af 8000 	nop.w
 8001140:	00000000 	.word	0x00000000
 8001144:	4052c000 	.word	0x4052c000
 8001148:	20000088 	.word	0x20000088
 800114c:	20000000 	.word	0x20000000
 8001150:	40590000 	.word	0x40590000
 8001154:	200000e8 	.word	0x200000e8
 8001158:	200000e9 	.word	0x200000e9
 800115c:	40390000 	.word	0x40390000
 8001160:	40490000 	.word	0x40490000
		default:
			/* Handle unexpected clutch values*/
			break;
 8001164:	bf00      	nop
	}

	/*0.5 for motor safety+*/
	sConfigOC[BACK_RIGHT_MOTOR].Pulse =  ((pwm_value_Back_Right / 100.0)* MAX_PWM_VALUE);
 8001166:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <controllingSM+0x3b8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f98a 	bl	8000484 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <controllingSM+0x3bc>)
 8001176:	f7ff fb19 	bl	80007ac <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a321      	add	r3, pc, #132	@ (adr r3, 8001208 <controllingSM+0x3b0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f9e6 	bl	8000558 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fbf2 	bl	800097c <__aeabi_d2uiz>
 8001198:	4603      	mov	r3, r0
 800119a:	4a1f      	ldr	r2, [pc, #124]	@ (8001218 <controllingSM+0x3c0>)
 800119c:	6053      	str	r3, [r2, #4]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_RIGHT_MOTOR], TIM_CHANNEL_1);
 800119e:	2200      	movs	r2, #0
 80011a0:	491d      	ldr	r1, [pc, #116]	@ (8001218 <controllingSM+0x3c0>)
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <controllingSM+0x3c4>)
 80011a4:	f002 fb84 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>

	sConfigOC[BACK_LEFT_MOTOR].Pulse =  (((pwm_value_Back_Left / 100.0))* MAX_PWM_VALUE);
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <controllingSM+0x3c8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f969 	bl	8000484 <__aeabi_i2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <controllingSM+0x3bc>)
 80011b8:	f7ff faf8 	bl	80007ac <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	a310      	add	r3, pc, #64	@ (adr r3, 8001208 <controllingSM+0x3b0>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f9c5 	bl	8000558 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fbd1 	bl	800097c <__aeabi_d2uiz>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <controllingSM+0x3c0>)
 80011de:	6213      	str	r3, [r2, #32]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_LEFT_MOTOR], TIM_CHANNEL_2);
 80011e0:	2204      	movs	r2, #4
 80011e2:	4910      	ldr	r1, [pc, #64]	@ (8001224 <controllingSM+0x3cc>)
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <controllingSM+0x3c4>)
 80011e6:	f002 fb63 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ea:	2100      	movs	r1, #0
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <controllingSM+0x3c4>)
 80011ee:	f002 f88b 	bl	8003308 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011f2:	2104      	movs	r1, #4
 80011f4:	4809      	ldr	r0, [pc, #36]	@ (800121c <controllingSM+0x3c4>)
 80011f6:	f002 f887 	bl	8003308 <HAL_TIM_PWM_Start>

}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	00000000 	.word	0x00000000
 800120c:	40efffe0 	.word	0x40efffe0
 8001210:	200000e8 	.word	0x200000e8
 8001214:	40590000 	.word	0x40590000
 8001218:	20000094 	.word	0x20000094
 800121c:	200000f0 	.word	0x200000f0
 8001220:	200000e9 	.word	0x200000e9
 8001224:	200000b0 	.word	0x200000b0

08001228 <Controlling>:


void Controlling(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
    pwm_init();
 800122c:	f000 f848 	bl	80012c0 <pwm_init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	4812      	ldr	r0, [pc, #72]	@ (800127c <Controlling+0x54>)
 8001234:	f002 f868 	bl	8003308 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001238:	2104      	movs	r1, #4
 800123a:	4810      	ldr	r0, [pc, #64]	@ (800127c <Controlling+0x54>)
 800123c:	f002 f864 	bl	8003308 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001240:	2108      	movs	r1, #8
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <Controlling+0x54>)
 8001244:	f002 f860 	bl	8003308 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001248:	213c      	movs	r1, #60	@ 0x3c
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <Controlling+0x58>)
 800124c:	f002 f9b2 	bl	80035b4 <HAL_TIM_Encoder_Start>

    while (1)
    {
    	if( xSemaphoreTake(Semaphore2Handle, HAL_MAX_DELAY) == pdTRUE)
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <Controlling+0x5c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	4618      	mov	r0, r3
 800125a:	f004 fa1f 	bl	800569c <xQueueSemaphoreTake>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d1f5      	bne.n	8001250 <Controlling+0x28>
    	{
    		controllingSM();
 8001264:	f7ff fdf8 	bl	8000e58 <controllingSM>
    		checkSteering();
 8001268:	f000 f9b8 	bl	80015dc <checkSteering>
            xSemaphoreGive(Semaphore1Handle);
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <Controlling+0x60>)
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	2300      	movs	r3, #0
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	f003 ff8f 	bl	8005198 <xQueueGenericSend>
    	if( xSemaphoreTake(Semaphore2Handle, HAL_MAX_DELAY) == pdTRUE)
 800127a:	e7e9      	b.n	8001250 <Controlling+0x28>
 800127c:	200000f0 	.word	0x200000f0
 8001280:	20000138 	.word	0x20000138
 8001284:	20000220 	.word	0x20000220
 8001288:	2000021c 	.word	0x2000021c

0800128c <setMotorDirection>:
    	}
    }
}

void setMotorDirection(uint8_t dir)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, BACK_LEFT_MOTOR_DIR_PIN, dir);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	461a      	mov	r2, r3
 800129a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <setMotorDirection+0x30>)
 80012a0:	f001 fa5e 	bl	8002760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, BACK_RIGHT_MOTOR_DIR_PIN, dir);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <setMotorDirection+0x30>)
 80012ae:	f001 fa57 	bl	8002760 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020400 	.word	0x40020400

080012c0 <pwm_init>:

static void pwm_init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
    /* Configure PWM channels*/
	uint8_t i = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 3; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e029      	b.n	8001324 <pwm_init+0x64>
    {
        sConfigOC[i].OCMode = TIM_OCMODE_PWM1;
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	491f      	ldr	r1, [pc, #124]	@ (8001350 <pwm_init+0x90>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	2260      	movs	r2, #96	@ 0x60
 80012e0:	601a      	str	r2, [r3, #0]
        sConfigOC[i].Pulse = 0;
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	491a      	ldr	r1, [pc, #104]	@ (8001350 <pwm_init+0x90>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	3304      	adds	r3, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
        sConfigOC[i].OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	79fa      	ldrb	r2, [r7, #7]
 80012f8:	4915      	ldr	r1, [pc, #84]	@ (8001350 <pwm_init+0x90>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3308      	adds	r3, #8
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
        sConfigOC[i].OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	4910      	ldr	r1, [pc, #64]	@ (8001350 <pwm_init+0x90>)
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	3310      	adds	r3, #16
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	3301      	adds	r3, #1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d9d2      	bls.n	80012d0 <pwm_init+0x10>
    }
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_RIGHT_MOTOR], TIM_CHANNEL_1);
 800132a:	2200      	movs	r2, #0
 800132c:	4908      	ldr	r1, [pc, #32]	@ (8001350 <pwm_init+0x90>)
 800132e:	4809      	ldr	r0, [pc, #36]	@ (8001354 <pwm_init+0x94>)
 8001330:	f002 fabe 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_LEFT_MOTOR], TIM_CHANNEL_2);
 8001334:	2204      	movs	r2, #4
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <pwm_init+0x98>)
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <pwm_init+0x94>)
 800133a:	f002 fab9 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 800133e:	2208      	movs	r2, #8
 8001340:	4906      	ldr	r1, [pc, #24]	@ (800135c <pwm_init+0x9c>)
 8001342:	4804      	ldr	r0, [pc, #16]	@ (8001354 <pwm_init+0x94>)
 8001344:	f002 fab4 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000094 	.word	0x20000094
 8001354:	200000f0 	.word	0x200000f0
 8001358:	200000b0 	.word	0x200000b0
 800135c:	200000cc 	.word	0x200000cc

08001360 <abs_diff>:

static uint32_t abs_diff(uint32_t a, uint32_t b)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
    return (a > b) ? (a - b) : (b - a);
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d903      	bls.n	800137a <abs_diff+0x1a>
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	e002      	b.n	8001380 <abs_diff+0x20>
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1ad3      	subs	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <checkClutchValue>:
//	}
//}


static void checkClutchValue(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
    uint8_t current_decrement;
    static uint8_t prev_increment = 0; // Persistent variable to track previous increment state
    static uint8_t prev_decrement = 0; // Persistent variable to track previous decrement state

    // Check for clutch increment
    current_increment = uart_rx_buffer[BUTTONS_IDX] & CLUTCH_INCREMENT_MASK;
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <checkClutchValue+0x9c>)
 8001394:	799b      	ldrb	r3, [r3, #6]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	71fb      	strb	r3, [r7, #7]

    if (current_increment == CLUTCH_INCREMENT_MASK) // Assuming CLUTCH_INCREMENT_MASK is 1 when the increment button is pressed
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d115      	bne.n	80013ce <checkClutchValue+0x42>
    {
        // Check for button release
        if (current_increment != prev_increment)
 80013a2:	4b22      	ldr	r3, [pc, #136]	@ (800142c <checkClutchValue+0xa0>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d00c      	beq.n	80013c6 <checkClutchValue+0x3a>
        {
            clutch_value++;
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <checkClutchValue+0xa4>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <checkClutchValue+0xa4>)
 80013b6:	701a      	strb	r2, [r3, #0]
            if (clutch_value > 5)
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <checkClutchValue+0xa4>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d902      	bls.n	80013c6 <checkClutchValue+0x3a>
            {
                clutch_value = 5;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <checkClutchValue+0xa4>)
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
            }
        }
        prev_increment = current_increment;
 80013c6:	4a19      	ldr	r2, [pc, #100]	@ (800142c <checkClutchValue+0xa0>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	7013      	strb	r3, [r2, #0]
 80013cc:	e002      	b.n	80013d4 <checkClutchValue+0x48>
    }
    else
    {
        prev_increment = 0; // Reset prev_increment if the increment button is not pressed
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <checkClutchValue+0xa0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
    }

    // Check for clutch decrement
    current_decrement = (uart_rx_buffer[BUTTONS_IDX] & CLUTCH_DECREMENT_MASK) >> 1;
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <checkClutchValue+0x9c>)
 80013d6:	799b      	ldrb	r3, [r3, #6]
 80013d8:	105b      	asrs	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	71bb      	strb	r3, [r7, #6]

    if (current_decrement == (CLUTCH_DECREMENT_MASK >> 1)) // Assuming CLUTCH_DECREMENT_MASK is 2 when the decrement button is pressed
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d115      	bne.n	8001414 <checkClutchValue+0x88>
    {
        // Check for button release
        if (current_decrement != prev_decrement)
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <checkClutchValue+0xa8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d00c      	beq.n	800140c <checkClutchValue+0x80>
        {
            clutch_value--;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <checkClutchValue+0xa4>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <checkClutchValue+0xa4>)
 80013fc:	701a      	strb	r2, [r3, #0]
            if (clutch_value > 5) // assuming clutch_value is unsigned and will wrap around to 255 when decremented from 0
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <checkClutchValue+0xa4>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d902      	bls.n	800140c <checkClutchValue+0x80>
            {
                clutch_value = 0;
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <checkClutchValue+0xa4>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
            }
        }
        prev_decrement = current_decrement;
 800140c:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <checkClutchValue+0xa8>)
 800140e:	79bb      	ldrb	r3, [r7, #6]
 8001410:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        prev_decrement = 0; // Reset prev_decrement if the decrement button is not pressed
    }
}
 8001412:	e002      	b.n	800141a <checkClutchValue+0x8e>
        prev_decrement = 0; // Reset prev_decrement if the decrement button is not pressed
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <checkClutchValue+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000088 	.word	0x20000088
 800142c:	200000ea 	.word	0x200000ea
 8001430:	20000000 	.word	0x20000000
 8001434:	200000eb 	.word	0x200000eb

08001438 <map_value>:


static int32_t map_value(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
    /* Ensure the input value is within the expected range */
    if (value < in_min)
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	429a      	cmp	r2, r3
 800144c:	da02      	bge.n	8001454 <map_value+0x1c>
    {
        value = in_min;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e005      	b.n	8001460 <map_value+0x28>
    }
    else if (value > in_max)
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dd01      	ble.n	8001460 <map_value+0x28>
    {
        value = in_max;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	60fb      	str	r3, [r7, #12]
    }

    /* Apply the linear transformation formula */
    int32_t mapped_value = (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	6a39      	ldr	r1, [r7, #32]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	1a8a      	subs	r2, r1, r2
 800146c:	fb03 f202 	mul.w	r2, r3, r2
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1acb      	subs	r3, r1, r3
 8001476:	fb92 f3f3 	sdiv	r3, r2, r3
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	617b      	str	r3, [r7, #20]
    return mapped_value;
 8001480:	697b      	ldr	r3, [r7, #20]
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <setSteeringAngle>:

static void setSteeringAngle(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
    const TickType_t timeoutTicks = pdMS_TO_TICKS(1000); // Convert 1 second to tick count
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	60bb      	str	r3, [r7, #8]
    TickType_t startTickCount = xTaskGetTickCount();
 800149c:	f004 fef2 	bl	8006284 <xTaskGetTickCount>
 80014a0:	6078      	str	r0, [r7, #4]

    // Max steering left is the min because the left value of steering is 0
    int32_t steering_mapped_value = map_value((uart_rx_buffer[STEERING_IDX]), MIN_STEERING_VALUE, MAX_STEERING_VALUE, Max_Steering_Left + 80, Max_Steering_Right);
 80014a2:	4b46      	ldr	r3, [pc, #280]	@ (80015bc <setSteeringAngle+0x12c>)
 80014a4:	78db      	ldrb	r3, [r3, #3]
 80014a6:	4618      	mov	r0, r3
 80014a8:	4b45      	ldr	r3, [pc, #276]	@ (80015c0 <setSteeringAngle+0x130>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80014b0:	4b44      	ldr	r3, [pc, #272]	@ (80015c4 <setSteeringAngle+0x134>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4613      	mov	r3, r2
 80014b8:	22ff      	movs	r2, #255	@ 0xff
 80014ba:	2100      	movs	r1, #0
 80014bc:	f7ff ffbc 	bl	8001438 <map_value>
 80014c0:	6038      	str	r0, [r7, #0]
    int32_t currentEncoderValue = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 80014c2:	4b41      	ldr	r3, [pc, #260]	@ (80015c8 <setSteeringAngle+0x138>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014cc:	60fb      	str	r3, [r7, #12]

    if (currentEncoderValue < steering_mapped_value)
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	da2d      	bge.n	8001532 <setSteeringAngle+0xa2>
    {
        /* Move left */
        while (currentEncoderValue < (steering_mapped_value - 5) && currentEncoderValue <= (Max_Steering_Left + 20))
 80014d6:	e020      	b.n	800151a <setSteeringAngle+0x8a>
        {
            HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_LEFT);
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014de:	483b      	ldr	r0, [pc, #236]	@ (80015cc <setSteeringAngle+0x13c>)
 80014e0:	f001 f93e 	bl	8002760 <HAL_GPIO_WritePin>
            sConfigOC[STEERING_MOTOR].Pulse = STEERING_MOTOR_SPEED;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <setSteeringAngle+0x140>)
 80014e6:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 80014ec:	2208      	movs	r2, #8
 80014ee:	4939      	ldr	r1, [pc, #228]	@ (80015d4 <setSteeringAngle+0x144>)
 80014f0:	4839      	ldr	r0, [pc, #228]	@ (80015d8 <setSteeringAngle+0x148>)
 80014f2:	f002 f9dd 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014f6:	2108      	movs	r1, #8
 80014f8:	4837      	ldr	r0, [pc, #220]	@ (80015d8 <setSteeringAngle+0x148>)
 80014fa:	f001 ff05 	bl	8003308 <HAL_TIM_PWM_Start>
            currentEncoderValue = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 80014fe:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <setSteeringAngle+0x138>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	b21b      	sxth	r3, r3
 8001504:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001508:	60fb      	str	r3, [r7, #12]

            // Check for timeout
            if ((xTaskGetTickCount() - startTickCount) > timeoutTicks)
 800150a:	f004 febb 	bl	8006284 <xTaskGetTickCount>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	429a      	cmp	r2, r3
 8001518:	d33d      	bcc.n	8001596 <setSteeringAngle+0x106>
        while (currentEncoderValue < (steering_mapped_value - 5) && currentEncoderValue <= (Max_Steering_Left + 20))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3b05      	subs	r3, #5
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	da3b      	bge.n	800159c <setSteeringAngle+0x10c>
 8001524:	4b26      	ldr	r3, [pc, #152]	@ (80015c0 <setSteeringAngle+0x130>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3314      	adds	r3, #20
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	ddd3      	ble.n	80014d8 <setSteeringAngle+0x48>
 8001530:	e034      	b.n	800159c <setSteeringAngle+0x10c>
            {
                break;
            }
        }
    }
    else if (currentEncoderValue > steering_mapped_value)
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	dd30      	ble.n	800159c <setSteeringAngle+0x10c>
    {
        /* Move right */
        while (currentEncoderValue > (steering_mapped_value + 5) && currentEncoderValue >= (Max_Steering_Right + 30))
 800153a:	e020      	b.n	800157e <setSteeringAngle+0xee>
        {
            HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001542:	4822      	ldr	r0, [pc, #136]	@ (80015cc <setSteeringAngle+0x13c>)
 8001544:	f001 f90c 	bl	8002760 <HAL_GPIO_WritePin>
            sConfigOC[STEERING_MOTOR].Pulse = STEERING_MOTOR_SPEED;
 8001548:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <setSteeringAngle+0x140>)
 800154a:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800154e:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 8001550:	2208      	movs	r2, #8
 8001552:	4920      	ldr	r1, [pc, #128]	@ (80015d4 <setSteeringAngle+0x144>)
 8001554:	4820      	ldr	r0, [pc, #128]	@ (80015d8 <setSteeringAngle+0x148>)
 8001556:	f002 f9ab 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800155a:	2108      	movs	r1, #8
 800155c:	481e      	ldr	r0, [pc, #120]	@ (80015d8 <setSteeringAngle+0x148>)
 800155e:	f001 fed3 	bl	8003308 <HAL_TIM_PWM_Start>
            currentEncoderValue = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <setSteeringAngle+0x138>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001566:	b21b      	sxth	r3, r3
 8001568:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800156c:	60fb      	str	r3, [r7, #12]

            // Check for timeout
            if ((xTaskGetTickCount() - startTickCount) > timeoutTicks)
 800156e:	f004 fe89 	bl	8006284 <xTaskGetTickCount>
 8001572:	4602      	mov	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	429a      	cmp	r2, r3
 800157c:	d30d      	bcc.n	800159a <setSteeringAngle+0x10a>
        while (currentEncoderValue > (steering_mapped_value + 5) && currentEncoderValue >= (Max_Steering_Right + 30))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3305      	adds	r3, #5
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	dd09      	ble.n	800159c <setSteeringAngle+0x10c>
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <setSteeringAngle+0x134>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	331d      	adds	r3, #29
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	dcd3      	bgt.n	800153c <setSteeringAngle+0xac>
 8001594:	e002      	b.n	800159c <setSteeringAngle+0x10c>
                break;
 8001596:	bf00      	nop
 8001598:	e000      	b.n	800159c <setSteeringAngle+0x10c>
            {
                break;
 800159a:	bf00      	nop
            }
        }
    }

    // Stop the motor
    sConfigOC[STEERING_MOTOR].Pulse = 0;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <setSteeringAngle+0x140>)
 800159e:	2200      	movs	r2, #0
 80015a0:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 80015a2:	2208      	movs	r2, #8
 80015a4:	490b      	ldr	r1, [pc, #44]	@ (80015d4 <setSteeringAngle+0x144>)
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <setSteeringAngle+0x148>)
 80015a8:	f002 f982 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80015ac:	2108      	movs	r1, #8
 80015ae:	480a      	ldr	r0, [pc, #40]	@ (80015d8 <setSteeringAngle+0x148>)
 80015b0:	f001 feaa 	bl	8003308 <HAL_TIM_PWM_Start>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000088 	.word	0x20000088
 80015c0:	2000022c 	.word	0x2000022c
 80015c4:	20000228 	.word	0x20000228
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40020400 	.word	0x40020400
 80015d0:	20000094 	.word	0x20000094
 80015d4:	200000cc 	.word	0x200000cc
 80015d8:	200000f0 	.word	0x200000f0

080015dc <checkSteering>:

static void checkSteering(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	static uint8_t prev = 0;


	if(uart_rx_buffer[STEERING_IDX] >= STEERING_MAX_MID || uart_rx_buffer[STEERING_IDX] <= STEERING_MIN_MID)
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <checkSteering+0x4c>)
 80015e2:	78db      	ldrb	r3, [r3, #3]
 80015e4:	2b81      	cmp	r3, #129	@ 0x81
 80015e6:	d803      	bhi.n	80015f0 <checkSteering+0x14>
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <checkSteering+0x4c>)
 80015ea:	78db      	ldrb	r3, [r3, #3]
 80015ec:	2b7c      	cmp	r3, #124	@ 0x7c
 80015ee:	d818      	bhi.n	8001622 <checkSteering+0x46>
	{
		if(uart_rx_buffer[STEERING_IDX] != prev)
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <checkSteering+0x4c>)
 80015f2:	78da      	ldrb	r2, [r3, #3]
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <checkSteering+0x50>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d006      	beq.n	800160a <checkSteering+0x2e>
		{
			setSteeringAngle();
 80015fc:	f7ff ff48 	bl	8001490 <setSteeringAngle>
			prev = uart_rx_buffer[STEERING_IDX];
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <checkSteering+0x4c>)
 8001602:	78da      	ldrb	r2, [r3, #3]
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <checkSteering+0x50>)
 8001606:	701a      	strb	r2, [r3, #0]
		}


	}

}
 8001608:	e00b      	b.n	8001622 <checkSteering+0x46>
			sConfigOC[STEERING_MOTOR].Pulse = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <checkSteering+0x54>)
 800160c:	2200      	movs	r2, #0
 800160e:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 8001610:	2208      	movs	r2, #8
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <checkSteering+0x58>)
 8001614:	4808      	ldr	r0, [pc, #32]	@ (8001638 <checkSteering+0x5c>)
 8001616:	f002 f94b 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800161a:	2108      	movs	r1, #8
 800161c:	4806      	ldr	r0, [pc, #24]	@ (8001638 <checkSteering+0x5c>)
 800161e:	f001 fe73 	bl	8003308 <HAL_TIM_PWM_Start>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000088 	.word	0x20000088
 800162c:	200000ec 	.word	0x200000ec
 8001630:	20000094 	.word	0x20000094
 8001634:	200000cc 	.word	0x200000cc
 8001638:	200000f0 	.word	0x200000f0

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001640:	f000 fdc2 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001644:	f000 f860 	bl	8001708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001648:	f000 fa02 	bl	8001a50 <MX_GPIO_Init>
  MX_TIM1_Init();
 800164c:	f000 f8bc 	bl	80017c8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001650:	f000 f9aa 	bl	80019a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001654:	f000 f954 	bl	8001900 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001658:	f000 f9d0 	bl	80019fc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  calibre_steering();
 800165c:	f000 fa52 	bl	8001b04 <calibre_steering>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001660:	f003 f97e 	bl	8004960 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 1, &Semaphore1_attributes);
 8001664:	4a19      	ldr	r2, [pc, #100]	@ (80016cc <main+0x90>)
 8001666:	2101      	movs	r1, #1
 8001668:	2001      	movs	r0, #1
 800166a:	f003 fa70 	bl	8004b4e <osSemaphoreNew>
 800166e:	4603      	mov	r3, r0
 8001670:	4a17      	ldr	r2, [pc, #92]	@ (80016d0 <main+0x94>)
 8001672:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore2 */
  Semaphore2Handle = osSemaphoreNew(1, 0, &Semaphore2_attributes);
 8001674:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <main+0x98>)
 8001676:	2100      	movs	r1, #0
 8001678:	2001      	movs	r0, #1
 800167a:	f003 fa68 	bl	8004b4e <osSemaphoreNew>
 800167e:	4603      	mov	r3, r0
 8001680:	4a15      	ldr	r2, [pc, #84]	@ (80016d8 <main+0x9c>)
 8001682:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore3 */
  Semaphore3Handle = osSemaphoreNew(1, 0, &Semaphore3_attributes);
 8001684:	4a15      	ldr	r2, [pc, #84]	@ (80016dc <main+0xa0>)
 8001686:	2100      	movs	r1, #0
 8001688:	2001      	movs	r0, #1
 800168a:	f003 fa60 	bl	8004b4e <osSemaphoreNew>
 800168e:	4603      	mov	r3, r0
 8001690:	4a13      	ldr	r2, [pc, #76]	@ (80016e0 <main+0xa4>)
 8001692:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001694:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <main+0xa8>)
 8001696:	2100      	movs	r1, #0
 8001698:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <main+0xac>)
 800169a:	f003 f9ab 	bl	80049f4 <osThreadNew>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <main+0xb0>)
 80016a2:	6013      	str	r3, [r2, #0]

  /* creation of Communication_T */
  Communication_THandle = osThreadNew(Communication, NULL, &Communication_T_attributes);
 80016a4:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <main+0xb4>)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <main+0xb8>)
 80016aa:	f003 f9a3 	bl	80049f4 <osThreadNew>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a11      	ldr	r2, [pc, #68]	@ (80016f8 <main+0xbc>)
 80016b2:	6013      	str	r3, [r2, #0]

  /* creation of ControllingTask */
  ControllingTaskHandle = osThreadNew(Controlling, NULL, &ControllingTask_attributes);
 80016b4:	4a11      	ldr	r2, [pc, #68]	@ (80016fc <main+0xc0>)
 80016b6:	2100      	movs	r1, #0
 80016b8:	4811      	ldr	r0, [pc, #68]	@ (8001700 <main+0xc4>)
 80016ba:	f003 f99b 	bl	80049f4 <osThreadNew>
 80016be:	4603      	mov	r3, r0
 80016c0:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <main+0xc8>)
 80016c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016c4:	f003 f970 	bl	80049a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <main+0x8c>
 80016cc:	08007efc 	.word	0x08007efc
 80016d0:	2000021c 	.word	0x2000021c
 80016d4:	08007f0c 	.word	0x08007f0c
 80016d8:	20000220 	.word	0x20000220
 80016dc:	08007f1c 	.word	0x08007f1c
 80016e0:	20000224 	.word	0x20000224
 80016e4:	08007e90 	.word	0x08007e90
 80016e8:	08001d21 	.word	0x08001d21
 80016ec:	20000210 	.word	0x20000210
 80016f0:	08007eb4 	.word	0x08007eb4
 80016f4:	08000d69 	.word	0x08000d69
 80016f8:	20000214 	.word	0x20000214
 80016fc:	08007ed8 	.word	0x08007ed8
 8001700:	08001229 	.word	0x08001229
 8001704:	20000218 	.word	0x20000218

08001708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	@ 0x50
 800170c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	2230      	movs	r2, #48	@ 0x30
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f006 fa86 	bl	8007c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <SystemClock_Config+0xb8>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	4a22      	ldr	r2, [pc, #136]	@ (80017c0 <SystemClock_Config+0xb8>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	@ 0x40
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <SystemClock_Config+0xb8>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <SystemClock_Config+0xbc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <SystemClock_Config+0xbc>)
 8001756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <SystemClock_Config+0xbc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001770:	2310      	movs	r3, #16
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4618      	mov	r0, r3
 800177e:	f001 f82d 	bl	80027dc <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001788:	f000 fae1 	bl	8001d4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178c:	230f      	movs	r3, #15
 800178e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001798:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fa8f 	bl	8002ccc <HAL_RCC_ClockConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80017b4:	f000 facb 	bl	8001d4e <Error_Handler>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3750      	adds	r7, #80	@ 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40007000 	.word	0x40007000

080017c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b092      	sub	sp, #72	@ 0x48
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 fa18 	bl	8007c28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f8:	4b3f      	ldr	r3, [pc, #252]	@ (80018f8 <MX_TIM1_Init+0x130>)
 80017fa:	4a40      	ldr	r2, [pc, #256]	@ (80018fc <MX_TIM1_Init+0x134>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80017fe:	4b3e      	ldr	r3, [pc, #248]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001800:	2201      	movs	r2, #1
 8001802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b3c      	ldr	r3, [pc, #240]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800180a:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <MX_TIM1_Init+0x130>)
 800180c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b39      	ldr	r3, [pc, #228]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001818:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <MX_TIM1_Init+0x130>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b36      	ldr	r3, [pc, #216]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001824:	4834      	ldr	r0, [pc, #208]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001826:	f001 fd1f 	bl	8003268 <HAL_TIM_PWM_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001830:	f000 fa8d 	bl	8001d4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001840:	4619      	mov	r1, r3
 8001842:	482d      	ldr	r0, [pc, #180]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001844:	f002 fb5c 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800184e:	f000 fa7e 	bl	8001d4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001852:	2360      	movs	r3, #96	@ 0x60
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	2200      	movs	r2, #0
 8001874:	4619      	mov	r1, r3
 8001876:	4820      	ldr	r0, [pc, #128]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001878:	f002 f81a 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001882:	f000 fa64 	bl	8001d4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188a:	2204      	movs	r2, #4
 800188c:	4619      	mov	r1, r3
 800188e:	481a      	ldr	r0, [pc, #104]	@ (80018f8 <MX_TIM1_Init+0x130>)
 8001890:	f002 f80e 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800189a:	f000 fa58 	bl	8001d4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800189e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a2:	2208      	movs	r2, #8
 80018a4:	4619      	mov	r1, r3
 80018a6:	4814      	ldr	r0, [pc, #80]	@ (80018f8 <MX_TIM1_Init+0x130>)
 80018a8:	f002 f802 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80018b2:	f000 fa4c 	bl	8001d4e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <MX_TIM1_Init+0x130>)
 80018da:	f002 fb7f 	bl	8003fdc <HAL_TIMEx_ConfigBreakDeadTime>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80018e4:	f000 fa33 	bl	8001d4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <MX_TIM1_Init+0x130>)
 80018ea:	f000 facd 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 80018ee:	bf00      	nop
 80018f0:	3748      	adds	r7, #72	@ 0x48
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200000f0 	.word	0x200000f0
 80018fc:	40010000 	.word	0x40010000

08001900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	2224      	movs	r2, #36	@ 0x24
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f006 f98a 	bl	8007c28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 800191e:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <MX_TIM3_Init+0xa4>)
 8001920:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 8001930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001934:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 800193e:	2280      	movs	r2, #128	@ 0x80
 8001940:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001942:	2303      	movs	r3, #3
 8001944:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800194a:	2301      	movs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800195a:	2301      	movs	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001962:	230a      	movs	r3, #10
 8001964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4619      	mov	r1, r3
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 800196e:	f001 fd7b 	bl	8003468 <HAL_TIM_Encoder_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001978:	f000 f9e9 	bl	8001d4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <MX_TIM3_Init+0xa0>)
 800198a:	f002 fab9 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001994:	f000 f9db 	bl	8001d4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	3730      	adds	r7, #48	@ 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000138 	.word	0x20000138
 80019a4:	40000400 	.word	0x40000400

080019a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <MX_USART2_UART_Init+0x50>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019e0:	f002 fb62 	bl	80040a8 <HAL_UART_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ea:	f000 f9b0 	bl	8001d4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000180 	.word	0x20000180
 80019f8:	40004400 	.word	0x40004400

080019fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a00:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <MX_USART6_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a08:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_USART6_UART_Init+0x4c>)
 8001a34:	f002 fb38 	bl	80040a8 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f000 f986 	bl	8001d4e <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001c8 	.word	0x200001c8
 8001a4c:	40011400 	.word	0x40011400

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <MX_GPIO_Init+0xac>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	4a23      	ldr	r2, [pc, #140]	@ (8001afc <MX_GPIO_Init+0xac>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a76:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <MX_GPIO_Init+0xac>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <MX_GPIO_Init+0xac>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <MX_GPIO_Init+0xac>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <MX_GPIO_Init+0xac>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001aa4:	4816      	ldr	r0, [pc, #88]	@ (8001b00 <MX_GPIO_Init+0xb0>)
 8001aa6:	f000 fe5b 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4810      	ldr	r0, [pc, #64]	@ (8001b00 <MX_GPIO_Init+0xb0>)
 8001ac0:	f000 fcca 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ac4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4619      	mov	r1, r3
 8001adc:	4808      	ldr	r0, [pc, #32]	@ (8001b00 <MX_GPIO_Init+0xb0>)
 8001ade:	f000 fcbb 	bl	8002458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	2007      	movs	r0, #7
 8001ae8:	f000 fc8c 	bl	8002404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001aec:	2007      	movs	r0, #7
 8001aee:	f000 fca5 	bl	800243c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020400 	.word	0x40020400

08001b04 <calibre_steering>:

/* USER CODE BEGIN 4 */
void calibre_steering(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08c      	sub	sp, #48	@ 0x30
 8001b08:	af00      	add	r7, sp, #0
	int32_t current = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t prev = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t counter = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	TIM_OC_InitTypeDef sConfigOC;
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b18:	213c      	movs	r1, #60	@ 0x3c
 8001b1a:	487b      	ldr	r0, [pc, #492]	@ (8001d08 <calibre_steering+0x204>)
 8001b1c:	f001 fd4a 	bl	80035b4 <HAL_TIM_Encoder_Start>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b20:	2360      	movs	r3, #96	@ 0x60
 8001b22:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2208      	movs	r2, #8
 8001b34:	4619      	mov	r1, r3
 8001b36:	4875      	ldr	r0, [pc, #468]	@ (8001d0c <calibre_steering+0x208>)
 8001b38:	f001 feba 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
	while(counter <= 3)
 8001b3c:	e03a      	b.n	8001bb4 <calibre_steering+0xb0>
	{
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001b3e:	4b74      	ldr	r3, [pc, #464]	@ (8001d10 <calibre_steering+0x20c>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prev = current;
 8001b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b54:	486f      	ldr	r0, [pc, #444]	@ (8001d14 <calibre_steering+0x210>)
 8001b56:	f000 fe03 	bl	8002760 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 65000;
 8001b5a:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8001b5e:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2208      	movs	r2, #8
 8001b64:	4619      	mov	r1, r3
 8001b66:	4869      	ldr	r0, [pc, #420]	@ (8001d0c <calibre_steering+0x208>)
 8001b68:	f001 fea2 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b6c:	2108      	movs	r1, #8
 8001b6e:	4867      	ldr	r0, [pc, #412]	@ (8001d0c <calibre_steering+0x208>)
 8001b70:	f001 fbca 	bl	8003308 <HAL_TIM_PWM_Start>
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <calibre_steering+0x20c>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if( current == prev || current == prev+1 || current == prev-1)
 8001b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d009      	beq.n	8001b9c <calibre_steering+0x98>
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d004      	beq.n	8001b9c <calibre_steering+0x98>
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	3b01      	subs	r3, #1
 8001b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d105      	bne.n	8001ba8 <calibre_steering+0xa4>
		{
			counter++;
 8001b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001ba6:	e002      	b.n	8001bae <calibre_steering+0xaa>
		}
		else
		{
			counter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		HAL_Delay(200);
 8001bae:	20c8      	movs	r0, #200	@ 0xc8
 8001bb0:	f000 fb4c 	bl	800224c <HAL_Delay>
	while(counter <= 3)
 8001bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d9c0      	bls.n	8001b3e <calibre_steering+0x3a>
	}
	sConfigOC.Pulse = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4851      	ldr	r0, [pc, #324]	@ (8001d0c <calibre_steering+0x208>)
 8001bc8:	f001 fe72 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bcc:	2108      	movs	r1, #8
 8001bce:	484f      	ldr	r0, [pc, #316]	@ (8001d0c <calibre_steering+0x208>)
 8001bd0:	f001 fb9a 	bl	8003308 <HAL_TIM_PWM_Start>

	Max_Steering_Right = current;
 8001bd4:	4a50      	ldr	r2, [pc, #320]	@ (8001d18 <calibre_steering+0x214>)
 8001bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd8:	6013      	str	r3, [r2, #0]

	HAL_Delay(500);
 8001bda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bde:	f000 fb35 	bl	800224c <HAL_Delay>

	counter = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	while(counter <= 3)
 8001be8:	e03a      	b.n	8001c60 <calibre_steering+0x15c>
	{
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001bea:	4b49      	ldr	r3, [pc, #292]	@ (8001d10 <calibre_steering+0x20c>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prev = current;
 8001bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_LEFT);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c00:	4844      	ldr	r0, [pc, #272]	@ (8001d14 <calibre_steering+0x210>)
 8001c02:	f000 fdad 	bl	8002760 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 65000;
 8001c06:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8001c0a:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2208      	movs	r2, #8
 8001c10:	4619      	mov	r1, r3
 8001c12:	483e      	ldr	r0, [pc, #248]	@ (8001d0c <calibre_steering+0x208>)
 8001c14:	f001 fe4c 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c18:	2108      	movs	r1, #8
 8001c1a:	483c      	ldr	r0, [pc, #240]	@ (8001d0c <calibre_steering+0x208>)
 8001c1c:	f001 fb74 	bl	8003308 <HAL_TIM_PWM_Start>
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001c20:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <calibre_steering+0x20c>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if( current == prev || current == prev+1 || current == prev-1)
 8001c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d009      	beq.n	8001c48 <calibre_steering+0x144>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	3301      	adds	r3, #1
 8001c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d004      	beq.n	8001c48 <calibre_steering+0x144>
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	3b01      	subs	r3, #1
 8001c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d105      	bne.n	8001c54 <calibre_steering+0x150>
		{
			counter++;
 8001c48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001c52:	e002      	b.n	8001c5a <calibre_steering+0x156>
		}
		else
		{
			counter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		HAL_Delay(200);
 8001c5a:	20c8      	movs	r0, #200	@ 0xc8
 8001c5c:	f000 faf6 	bl	800224c <HAL_Delay>
	while(counter <= 3)
 8001c60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d9c0      	bls.n	8001bea <calibre_steering+0xe6>
	}
	sConfigOC.Pulse = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2208      	movs	r2, #8
 8001c70:	4619      	mov	r1, r3
 8001c72:	4826      	ldr	r0, [pc, #152]	@ (8001d0c <calibre_steering+0x208>)
 8001c74:	f001 fe1c 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4824      	ldr	r0, [pc, #144]	@ (8001d0c <calibre_steering+0x208>)
 8001c7c:	f001 fb44 	bl	8003308 <HAL_TIM_PWM_Start>

	Max_Steering_Left = current;
 8001c80:	4a26      	ldr	r2, [pc, #152]	@ (8001d1c <calibre_steering+0x218>)
 8001c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c84:	6013      	str	r3, [r2, #0]
	HAL_Delay(500);
 8001c86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c8a:	f000 fadf 	bl	800224c <HAL_Delay>
//	HAL_Delay(500);
//	sConfigOC.Pulse = 0;
//	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

	int32_t middle = ((Max_Steering_Left + Max_Steering_Right) / 2);
 8001c8e:	4b23      	ldr	r3, [pc, #140]	@ (8001d1c <calibre_steering+0x218>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <calibre_steering+0x214>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	0fda      	lsrs	r2, r3, #31
 8001c9a:	4413      	add	r3, r2
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	623b      	str	r3, [r7, #32]
	while( current >= middle )
 8001ca0:	e01e      	b.n	8001ce0 <calibre_steering+0x1dc>
	{
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <calibre_steering+0x20c>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cb4:	4817      	ldr	r0, [pc, #92]	@ (8001d14 <calibre_steering+0x210>)
 8001cb6:	f000 fd53 	bl	8002760 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 40000;
 8001cba:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001cbe:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4811      	ldr	r0, [pc, #68]	@ (8001d0c <calibre_steering+0x208>)
 8001cc8:	f001 fdf2 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ccc:	2108      	movs	r1, #8
 8001cce:	480f      	ldr	r0, [pc, #60]	@ (8001d0c <calibre_steering+0x208>)
 8001cd0:	f001 fb1a 	bl	8003308 <HAL_TIM_PWM_Start>
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <calibre_steering+0x20c>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while( current >= middle )
 8001ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dadc      	bge.n	8001ca2 <calibre_steering+0x19e>
	}
	sConfigOC.Pulse = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2208      	movs	r2, #8
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <calibre_steering+0x208>)
 8001cf4:	f001 fddc 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <calibre_steering+0x208>)
 8001cfc:	f001 fb04 	bl	8003308 <HAL_TIM_PWM_Start>
}
 8001d00:	bf00      	nop
 8001d02:	3730      	adds	r7, #48	@ 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000138 	.word	0x20000138
 8001d0c:	200000f0 	.word	0x200000f0
 8001d10:	40000400 	.word	0x40000400
 8001d14:	40020400 	.word	0x40020400
 8001d18:	20000228 	.word	0x20000228
 8001d1c:	2000022c 	.word	0x2000022c

08001d20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f002 fef5 	bl	8004b18 <osDelay>
 8001d2e:	e7fb      	b.n	8001d28 <StartDefaultTask+0x8>

08001d30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d42:	f000 fa63 	bl	800220c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d52:	b672      	cpsid	i
}
 8001d54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d56:	bf00      	nop
 8001d58:	e7fd      	b.n	8001d56 <Error_Handler+0x8>
	...

08001d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b12      	ldr	r3, [pc, #72]	@ (8001db0 <HAL_MspInit+0x54>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	4a11      	ldr	r2, [pc, #68]	@ (8001db0 <HAL_MspInit+0x54>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d72:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <HAL_MspInit+0x54>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_MspInit+0x54>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_MspInit+0x54>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_MspInit+0x54>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	f06f 0001 	mvn.w	r0, #1
 8001da2:	f000 fb2f 	bl	8002404 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10d      	bne.n	8001de2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b0a      	ldr	r3, [pc, #40]	@ (8001df4 <HAL_TIM_PWM_MspInit+0x40>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <HAL_TIM_PWM_MspInit+0x40>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <HAL_TIM_PWM_MspInit+0x40>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d12b      	bne.n	8001e72 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e52:	23c0      	movs	r3, #192	@ 0xc0
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e62:	2302      	movs	r3, #2
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e6e:	f000 faf3 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e72:	bf00      	nop
 8001e74:	3728      	adds	r7, #40	@ 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020000 	.word	0x40020000

08001e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <HAL_TIM_MspPostInit+0x68>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d11e      	bne.n	8001ee8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a10      	ldr	r2, [pc, #64]	@ (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ec6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001eca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <HAL_TIM_MspPostInit+0x70>)
 8001ee4:	f000 fab8 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020000 	.word	0x40020000

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <HAL_UART_MspInit+0xe8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d12c      	bne.n	8001f78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a30      	ldr	r2, [pc, #192]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a29      	ldr	r2, [pc, #164]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f56:	230c      	movs	r3, #12
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f66:	2307      	movs	r3, #7
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481e      	ldr	r0, [pc, #120]	@ (8001fec <HAL_UART_MspInit+0xf0>)
 8001f72:	f000 fa71 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f76:	e031      	b.n	8001fdc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <HAL_UART_MspInit+0xf4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f8c:	f043 0320 	orr.w	r3, r3, #32
 8001f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <HAL_UART_MspInit+0xec>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <HAL_UART_MspInit+0xf0>)
 8001fd8:	f000 fa3e 	bl	8002458 <HAL_GPIO_Init>
}
 8001fdc:	bf00      	nop
 8001fde:	3730      	adds	r7, #48	@ 0x30
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40011400 	.word	0x40011400

08001ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	@ 0x38
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <HAL_InitTick+0xe8>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a33      	ldr	r2, [pc, #204]	@ (80020dc <HAL_InitTick+0xe8>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b31      	ldr	r3, [pc, #196]	@ (80020dc <HAL_InitTick+0xe8>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002020:	f107 0210 	add.w	r2, r7, #16
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f001 f82e 	bl	800308c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800203a:	f000 ffff 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 800203e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002040:	e004      	b.n	800204c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002042:	f000 fffb 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 8002046:	4603      	mov	r3, r0
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800204c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204e:	4a24      	ldr	r2, [pc, #144]	@ (80020e0 <HAL_InitTick+0xec>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	3b01      	subs	r3, #1
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800205a:	4b22      	ldr	r3, [pc, #136]	@ (80020e4 <HAL_InitTick+0xf0>)
 800205c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_InitTick+0xf0>)
 8002064:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002068:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800206a:	4a1e      	ldr	r2, [pc, #120]	@ (80020e4 <HAL_InitTick+0xf0>)
 800206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002070:	4b1c      	ldr	r3, [pc, #112]	@ (80020e4 <HAL_InitTick+0xf0>)
 8002072:	2200      	movs	r2, #0
 8002074:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_InitTick+0xf0>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_InitTick+0xf0>)
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002082:	4818      	ldr	r0, [pc, #96]	@ (80020e4 <HAL_InitTick+0xf0>)
 8002084:	f001 f834 	bl	80030f0 <HAL_TIM_Base_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800208e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11b      	bne.n	80020ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002096:	4813      	ldr	r0, [pc, #76]	@ (80020e4 <HAL_InitTick+0xf0>)
 8002098:	f001 f884 	bl	80031a4 <HAL_TIM_Base_Start_IT>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80020a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d111      	bne.n	80020ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020aa:	201c      	movs	r0, #28
 80020ac:	f000 f9c6 	bl	800243c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	d808      	bhi.n	80020c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80020b6:	2200      	movs	r2, #0
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	201c      	movs	r0, #28
 80020bc:	f000 f9a2 	bl	8002404 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020c0:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_InitTick+0xf4>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e002      	b.n	80020ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3738      	adds	r7, #56	@ 0x38
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	20000230 	.word	0x20000230
 80020e8:	20000008 	.word	0x20000008

080020ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <NMI_Handler+0x4>

080020f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <MemManage_Handler+0x4>

08002104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <BusFault_Handler+0x4>

0800210c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <UsageFault_Handler+0x4>

08002114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	ultrasonic_flag = 1;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <EXTI1_IRQHandler+0x14>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800212e:	2002      	movs	r0, #2
 8002130:	f000 fb30 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000278 	.word	0x20000278

0800213c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <TIM2_IRQHandler+0x10>)
 8002142:	f001 fac5 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000230 	.word	0x20000230

08002150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002178:	f7ff ffea 	bl	8002150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800217c:	480c      	ldr	r0, [pc, #48]	@ (80021b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217e:	490d      	ldr	r1, [pc, #52]	@ (80021b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002194:	4c0a      	ldr	r4, [pc, #40]	@ (80021c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a2:	f005 fd9f 	bl	8007ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7ff fa49 	bl	800163c <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80021b8:	08007f54 	.word	0x08007f54
  ldr r2, =_sbss
 80021bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80021c0:	20004da8 	.word	0x20004da8

080021c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <HAL_Init+0x40>)
 80021d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <HAL_Init+0x40>)
 80021de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a07      	ldr	r2, [pc, #28]	@ (8002208 <HAL_Init+0x40>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f000 f8fc 	bl	80023ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f6:	200f      	movs	r0, #15
 80021f8:	f7ff fefc 	bl	8001ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fc:	f7ff fdae 	bl	8001d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_IncTick+0x20>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_IncTick+0x24>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4413      	add	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <HAL_IncTick+0x24>)
 800221e:	6013      	str	r3, [r2, #0]
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	2000000c 	.word	0x2000000c
 8002230:	2000027c 	.word	0x2000027c

08002234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return uwTick;
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_GetTick+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	2000027c 	.word	0x2000027c

0800224c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002254:	f7ff ffee 	bl	8002234 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d005      	beq.n	8002272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <HAL_Delay+0x44>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002272:	bf00      	nop
 8002274:	f7ff ffde 	bl	8002234 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	429a      	cmp	r2, r3
 8002282:	d8f7      	bhi.n	8002274 <HAL_Delay+0x28>
  {
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000000c 	.word	0x2000000c

08002294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b0:	4013      	ands	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e0:	4b04      	ldr	r3, [pc, #16]	@ (80022f4 <__NVIC_GetPriorityGrouping+0x18>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 0307 	and.w	r3, r3, #7
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db0b      	blt.n	8002322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4907      	ldr	r1, [pc, #28]	@ (8002330 <__NVIC_EnableIRQ+0x38>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	@ (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	@ (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	@ 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	@ 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ff4c 	bl	8002294 <__NVIC_SetPriorityGrouping>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002416:	f7ff ff61 	bl	80022dc <__NVIC_GetPriorityGrouping>
 800241a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	6978      	ldr	r0, [r7, #20]
 8002422:	f7ff ffb1 	bl	8002388 <NVIC_EncodePriority>
 8002426:	4602      	mov	r2, r0
 8002428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff80 	bl	8002334 <__NVIC_SetPriority>
}
 8002434:	bf00      	nop
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff54 	bl	80022f8 <__NVIC_EnableIRQ>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e159      	b.n	8002728 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8148 	bne.w	8002722 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a2 	beq.w	8002722 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b57      	ldr	r3, [pc, #348]	@ (8002740 <HAL_GPIO_Init+0x2e8>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a56      	ldr	r2, [pc, #344]	@ (8002740 <HAL_GPIO_Init+0x2e8>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b54      	ldr	r3, [pc, #336]	@ (8002740 <HAL_GPIO_Init+0x2e8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fa:	4a52      	ldr	r2, [pc, #328]	@ (8002744 <HAL_GPIO_Init+0x2ec>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a49      	ldr	r2, [pc, #292]	@ (8002748 <HAL_GPIO_Init+0x2f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x202>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a48      	ldr	r2, [pc, #288]	@ (800274c <HAL_GPIO_Init+0x2f4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x1fe>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a47      	ldr	r2, [pc, #284]	@ (8002750 <HAL_GPIO_Init+0x2f8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x1fa>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a46      	ldr	r2, [pc, #280]	@ (8002754 <HAL_GPIO_Init+0x2fc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x1f6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a45      	ldr	r2, [pc, #276]	@ (8002758 <HAL_GPIO_Init+0x300>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x1f2>
 8002646:	2304      	movs	r3, #4
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x204>
 800264a:	2307      	movs	r3, #7
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x204>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x204>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x204>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x204>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	@ (8002744 <HAL_GPIO_Init+0x2ec>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_GPIO_Init+0x304>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a2f      	ldr	r2, [pc, #188]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a24      	ldr	r2, [pc, #144]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b23      	ldr	r3, [pc, #140]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1a      	ldr	r2, [pc, #104]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b18      	ldr	r3, [pc, #96]	@ (800275c <HAL_GPIO_Init+0x304>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a0f      	ldr	r2, [pc, #60]	@ (800275c <HAL_GPIO_Init+0x304>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f aea2 	bls.w	8002474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40013c00 	.word	0x40013c00

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800279e:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027aa:	4a05      	ldr	r2, [pc, #20]	@ (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f806 	bl	80027c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e267      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d075      	beq.n	80028e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027fa:	4b88      	ldr	r3, [pc, #544]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b04      	cmp	r3, #4
 8002804:	d00c      	beq.n	8002820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002806:	4b85      	ldr	r3, [pc, #532]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d112      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002812:	4b82      	ldr	r3, [pc, #520]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800281e:	d10b      	bne.n	8002838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	4b7e      	ldr	r3, [pc, #504]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d05b      	beq.n	80028e4 <HAL_RCC_OscConfig+0x108>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d157      	bne.n	80028e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e242      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x74>
 8002842:	4b76      	ldr	r3, [pc, #472]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e01d      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x98>
 800285a:	4b70      	ldr	r3, [pc, #448]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b6d      	ldr	r3, [pc, #436]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	e00b      	b.n	800288c <HAL_RCC_OscConfig+0xb0>
 8002874:	4b69      	ldr	r3, [pc, #420]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a68      	ldr	r2, [pc, #416]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 800287a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b66      	ldr	r3, [pc, #408]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a65      	ldr	r2, [pc, #404]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fcce 	bl	8002234 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7ff fcca 	bl	8002234 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e207      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b5b      	ldr	r3, [pc, #364]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0xc0>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fcba 	bl	8002234 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7ff fcb6 	bl	8002234 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e1f3      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	4b51      	ldr	r3, [pc, #324]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0xe8>
 80028e2:	e000      	b.n	80028e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d063      	beq.n	80029ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	2b08      	cmp	r3, #8
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b44      	ldr	r3, [pc, #272]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	4b41      	ldr	r3, [pc, #260]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e1c7      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4937      	ldr	r1, [pc, #220]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e03a      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	4b34      	ldr	r3, [pc, #208]	@ (8002a20 <HAL_RCC_OscConfig+0x244>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff fc6f 	bl	8002234 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7ff fc6b 	bl	8002234 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1a8      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4925      	ldr	r1, [pc, #148]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_RCC_OscConfig+0x244>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff fc4e 	bl	8002234 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299c:	f7ff fc4a 	bl	8002234 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e187      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d036      	beq.n	8002a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <HAL_RCC_OscConfig+0x248>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff fc2e 	bl	8002234 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff fc2a 	bl	8002234 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e167      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_OscConfig+0x240>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x200>
 80029fa:	e01b      	b.n	8002a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <HAL_RCC_OscConfig+0x248>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7ff fc17 	bl	8002234 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e00e      	b.n	8002a28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7ff fc13 	bl	8002234 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d907      	bls.n	8002a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e150      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	42470000 	.word	0x42470000
 8002a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b88      	ldr	r3, [pc, #544]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ea      	bne.n	8002a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8097 	beq.w	8002b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b81      	ldr	r3, [pc, #516]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b7d      	ldr	r3, [pc, #500]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b7a      	ldr	r3, [pc, #488]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b77      	ldr	r3, [pc, #476]	@ (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b74      	ldr	r3, [pc, #464]	@ (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a73      	ldr	r2, [pc, #460]	@ (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7ff fbd3 	bl	8002234 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7ff fbcf 	bl	8002234 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e10c      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <HAL_RCC_OscConfig+0x474>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2ea>
 8002ab8:	4b64      	ldr	r3, [pc, #400]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abc:	4a63      	ldr	r2, [pc, #396]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCC_OscConfig+0x324>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x30c>
 8002ace:	4b5f      	ldr	r3, [pc, #380]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ada:	4b5c      	ldr	r3, [pc, #368]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	4a5b      	ldr	r2, [pc, #364]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x324>
 8002ae8:	4b58      	ldr	r3, [pc, #352]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a57      	ldr	r2, [pc, #348]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af4:	4b55      	ldr	r3, [pc, #340]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af8:	4a54      	ldr	r2, [pc, #336]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7ff fb94 	bl	8002234 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7ff fb90 	bl	8002234 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0cb      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ee      	beq.n	8002b10 <HAL_RCC_OscConfig+0x334>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7ff fb7e 	bl	8002234 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7ff fb7a 	bl	8002234 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0b5      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b52:	4b3e      	ldr	r3, [pc, #248]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b39      	ldr	r3, [pc, #228]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	4a38      	ldr	r2, [pc, #224]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a1 	beq.w	8002cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7a:	4b34      	ldr	r3, [pc, #208]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d05c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d141      	bne.n	8002c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fb4e 	bl	8002234 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7ff fb4a 	bl	8002234 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e087      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	491b      	ldr	r1, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7ff fb23 	bl	8002234 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf2:	f7ff fb1f 	bl	8002234 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e05c      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	4b11      	ldr	r3, [pc, #68]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x416>
 8002c10:	e054      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c12:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <HAL_RCC_OscConfig+0x478>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff fb0c 	bl	8002234 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7ff fb08 	bl	8002234 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e045      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_RCC_OscConfig+0x470>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x444>
 8002c3e:	e03d      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e038      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
 8002c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_RCC_OscConfig+0x4ec>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d121      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d11a      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d111      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0cc      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b68      	ldr	r3, [pc, #416]	@ (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d90c      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b65      	ldr	r3, [pc, #404]	@ (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	@ (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a58      	ldr	r2, [pc, #352]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d044      	beq.n	8002dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d119      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d003      	beq.n	8002d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e06f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e067      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b37      	ldr	r3, [pc, #220]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4934      	ldr	r1, [pc, #208]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7ff fa3a 	bl	8002234 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7ff fa36 	bl	8002234 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b2b      	ldr	r3, [pc, #172]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dec:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d20c      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	@ (8002e84 <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	@ (8002e8c <HAL_RCC_ClockConfig+0x1c0>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f8be 	bl	8001ff4 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	08007f2c 	.word	0x08007f2c
 8002e90:	20000004 	.word	0x20000004
 8002e94:	20000008 	.word	0x20000008

08002e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e9c:	b090      	sub	sp, #64	@ 0x40
 8002e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb0:	4b59      	ldr	r3, [pc, #356]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d00d      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	f200 80a1 	bhi.w	8003004 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x34>
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eca:	e09b      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ecc:	4b53      	ldr	r3, [pc, #332]	@ (800301c <HAL_RCC_GetSysClockFreq+0x184>)
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ed0:	e09b      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ed2:	4b53      	ldr	r3, [pc, #332]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ed6:	e098      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d028      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eee:	4b4a      	ldr	r3, [pc, #296]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	623b      	str	r3, [r7, #32]
 8002ef8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f00:	2100      	movs	r1, #0
 8002f02:	4b47      	ldr	r3, [pc, #284]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f04:	fb03 f201 	mul.w	r2, r3, r1
 8002f08:	2300      	movs	r3, #0
 8002f0a:	fb00 f303 	mul.w	r3, r0, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a43      	ldr	r2, [pc, #268]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f12:	fba0 1202 	umull	r1, r2, r0, r2
 8002f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f18:	460a      	mov	r2, r1
 8002f1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f1e:	4413      	add	r3, r2
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f24:	2200      	movs	r2, #0
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	61fa      	str	r2, [r7, #28]
 8002f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f32:	f7fd fd43 	bl	80009bc <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f3e:	e053      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f40:	4b35      	ldr	r3, [pc, #212]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	2200      	movs	r2, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	617a      	str	r2, [r7, #20]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f52:	f04f 0b00 	mov.w	fp, #0
 8002f56:	4652      	mov	r2, sl
 8002f58:	465b      	mov	r3, fp
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f68:	0150      	lsls	r0, r2, #5
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f72:	eb63 090b 	sbc.w	r9, r3, fp
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	00eb      	lsls	r3, r5, #3
 8002f9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa0:	00e2      	lsls	r2, r4, #3
 8002fa2:	4614      	mov	r4, r2
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	eb14 030a 	adds.w	r3, r4, sl
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	eb45 030b 	adc.w	r3, r5, fp
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	028b      	lsls	r3, r1, #10
 8002fc2:	4621      	mov	r1, r4
 8002fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc8:	4621      	mov	r1, r4
 8002fca:	028a      	lsls	r2, r1, #10
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	60fa      	str	r2, [r7, #12]
 8002fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fdc:	f7fd fcee 	bl	80009bc <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002ff8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_RCC_GetSysClockFreq+0x184>)
 8003006:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800300c:	4618      	mov	r0, r3
 800300e:	3740      	adds	r7, #64	@ 0x40
 8003010:	46bd      	mov	sp, r7
 8003012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	00f42400 	.word	0x00f42400
 8003020:	017d7840 	.word	0x017d7840

08003024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <HAL_RCC_GetHCLKFreq+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003040:	f7ff fff0 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0a9b      	lsrs	r3, r3, #10
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4903      	ldr	r1, [pc, #12]	@ (8003060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003058:	4618      	mov	r0, r3
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	08007f3c 	.word	0x08007f3c

08003064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003068:	f7ff ffdc 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0b5b      	lsrs	r3, r3, #13
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4903      	ldr	r1, [pc, #12]	@ (8003088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800307a:	5ccb      	ldrb	r3, [r1, r3]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	08007f3c 	.word	0x08007f3c

0800308c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	220f      	movs	r2, #15
 800309a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030a8:	4b0f      	ldr	r3, [pc, #60]	@ (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030b4:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <HAL_RCC_GetClockConfig+0x60>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0207 	and.w	r2, r3, #7
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	601a      	str	r2, [r3, #0]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40023c00 	.word	0x40023c00

080030f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e041      	b.n	8003186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f839 	bl	800318e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 fca8 	bl	8003a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d001      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e044      	b.n	8003246 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003254 <HAL_TIM_Base_Start_IT+0xb0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d018      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x6c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e6:	d013      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x6c>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <HAL_TIM_Base_Start_IT+0xb4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00e      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x6c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a19      	ldr	r2, [pc, #100]	@ (800325c <HAL_TIM_Base_Start_IT+0xb8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x6c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a17      	ldr	r2, [pc, #92]	@ (8003260 <HAL_TIM_Base_Start_IT+0xbc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x6c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a16      	ldr	r2, [pc, #88]	@ (8003264 <HAL_TIM_Base_Start_IT+0xc0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d111      	bne.n	8003234 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b06      	cmp	r3, #6
 8003220:	d010      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003232:	e007      	b.n	8003244 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40000c00 	.word	0x40000c00
 8003264:	40014000 	.word	0x40014000

08003268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e041      	b.n	80032fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fd90 	bl	8001db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 fbec 	bl	8003a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_TIM_PWM_Start+0x24>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e022      	b.n	8003372 <HAL_TIM_PWM_Start+0x6a>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d109      	bne.n	8003346 <HAL_TIM_PWM_Start+0x3e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e015      	b.n	8003372 <HAL_TIM_PWM_Start+0x6a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d109      	bne.n	8003360 <HAL_TIM_PWM_Start+0x58>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e008      	b.n	8003372 <HAL_TIM_PWM_Start+0x6a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e068      	b.n	800344c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <HAL_TIM_PWM_Start+0x82>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003388:	e013      	b.n	80033b2 <HAL_TIM_PWM_Start+0xaa>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d104      	bne.n	800339a <HAL_TIM_PWM_Start+0x92>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003398:	e00b      	b.n	80033b2 <HAL_TIM_PWM_Start+0xaa>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d104      	bne.n	80033aa <HAL_TIM_PWM_Start+0xa2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a8:	e003      	b.n	80033b2 <HAL_TIM_PWM_Start+0xaa>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2201      	movs	r2, #1
 80033b8:	6839      	ldr	r1, [r7, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fd7a 	bl	8003eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a23      	ldr	r2, [pc, #140]	@ (8003454 <HAL_TIM_PWM_Start+0x14c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d107      	bne.n	80033da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1d      	ldr	r2, [pc, #116]	@ (8003454 <HAL_TIM_PWM_Start+0x14c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_TIM_PWM_Start+0x10e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ec:	d013      	beq.n	8003416 <HAL_TIM_PWM_Start+0x10e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_TIM_PWM_Start+0x150>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_TIM_PWM_Start+0x10e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a17      	ldr	r2, [pc, #92]	@ (800345c <HAL_TIM_PWM_Start+0x154>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_TIM_PWM_Start+0x10e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a16      	ldr	r2, [pc, #88]	@ (8003460 <HAL_TIM_PWM_Start+0x158>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIM_PWM_Start+0x10e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <HAL_TIM_PWM_Start+0x15c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d111      	bne.n	800343a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d010      	beq.n	800344a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	e007      	b.n	800344a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40010000 	.word	0x40010000
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800
 8003460:	40000c00 	.word	0x40000c00
 8003464:	40014000 	.word	0x40014000

08003468 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e097      	b.n	80035ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fe fcb1 	bl	8001df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034ac:	f023 0307 	bic.w	r3, r3, #7
 80034b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	4619      	mov	r1, r3
 80034bc:	4610      	mov	r0, r2
 80034be:	f000 fae1 	bl	8003a84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	4313      	orrs	r3, r2
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003508:	f023 030c 	bic.w	r3, r3, #12
 800350c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003514:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003518:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	4313      	orrs	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	011a      	lsls	r2, r3, #4
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	031b      	lsls	r3, r3, #12
 8003538:	4313      	orrs	r3, r2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800354e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	4313      	orrs	r3, r2
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d110      	bne.n	8003606 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d102      	bne.n	80035f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80035ea:	7b7b      	ldrb	r3, [r7, #13]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d001      	beq.n	80035f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e069      	b.n	80036c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003604:	e031      	b.n	800366a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d110      	bne.n	800362e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800360c:	7bbb      	ldrb	r3, [r7, #14]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003612:	7b3b      	ldrb	r3, [r7, #12]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d001      	beq.n	800361c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e055      	b.n	80036c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800362c:	e01d      	b.n	800366a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d105      	bne.n	8003646 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800363a:	7b7b      	ldrb	r3, [r7, #13]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d102      	bne.n	8003646 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003640:	7b3b      	ldrb	r3, [r7, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03e      	b.n	80036c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_TIM_Encoder_Start+0xc4>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d008      	beq.n	8003688 <HAL_TIM_Encoder_Start+0xd4>
 8003676:	e00f      	b.n	8003698 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2201      	movs	r2, #1
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fc17 	bl	8003eb4 <TIM_CCxChannelCmd>
      break;
 8003686:	e016      	b.n	80036b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	2104      	movs	r1, #4
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fc0f 	bl	8003eb4 <TIM_CCxChannelCmd>
      break;
 8003696:	e00e      	b.n	80036b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2201      	movs	r2, #1
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fc07 	bl	8003eb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	2104      	movs	r1, #4
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fc00 	bl	8003eb4 <TIM_CCxChannelCmd>
      break;
 80036b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d020      	beq.n	8003734 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0202 	mvn.w	r2, #2
 8003704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f994 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f986 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f997 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d020      	beq.n	8003780 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0204 	mvn.w	r2, #4
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f96e 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f960 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f971 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0208 	mvn.w	r2, #8
 800379c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2204      	movs	r2, #4
 80037a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f948 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f93a 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f94b 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0210 	mvn.w	r2, #16
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2208      	movs	r2, #8
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f922 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f914 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f925 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00c      	beq.n	800383c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0201 	mvn.w	r2, #1
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe fa7a 	bl	8001d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00c      	beq.n	8003860 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fc1a 	bl	8004094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8f6 	bl	8003a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0220 	mvn.w	r2, #32
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fbec 	bl	8004080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0ae      	b.n	8003a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	f200 809f 	bhi.w	8003a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038de:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003a1d 	.word	0x08003a1d
 80038ec:	08003a1d 	.word	0x08003a1d
 80038f0:	08003a1d 	.word	0x08003a1d
 80038f4:	08003959 	.word	0x08003959
 80038f8:	08003a1d 	.word	0x08003a1d
 80038fc:	08003a1d 	.word	0x08003a1d
 8003900:	08003a1d 	.word	0x08003a1d
 8003904:	0800399b 	.word	0x0800399b
 8003908:	08003a1d 	.word	0x08003a1d
 800390c:	08003a1d 	.word	0x08003a1d
 8003910:	08003a1d 	.word	0x08003a1d
 8003914:	080039db 	.word	0x080039db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f93c 	bl	8003b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0208 	orr.w	r2, r2, #8
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
      break;
 8003956:	e064      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f982 	bl	8003c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	619a      	str	r2, [r3, #24]
      break;
 8003998:	e043      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f9cd 	bl	8003d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0208 	orr.w	r2, r2, #8
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0204 	bic.w	r2, r2, #4
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	61da      	str	r2, [r3, #28]
      break;
 80039d8:	e023      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fa17 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69d9      	ldr	r1, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	61da      	str	r2, [r3, #28]
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a3a      	ldr	r2, [pc, #232]	@ (8003b80 <TIM_Base_SetConfig+0xfc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00f      	beq.n	8003abc <TIM_Base_SetConfig+0x38>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa2:	d00b      	beq.n	8003abc <TIM_Base_SetConfig+0x38>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a37      	ldr	r2, [pc, #220]	@ (8003b84 <TIM_Base_SetConfig+0x100>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_Base_SetConfig+0x38>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a36      	ldr	r2, [pc, #216]	@ (8003b88 <TIM_Base_SetConfig+0x104>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a35      	ldr	r2, [pc, #212]	@ (8003b8c <TIM_Base_SetConfig+0x108>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b80 <TIM_Base_SetConfig+0xfc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d01b      	beq.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d017      	beq.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a28      	ldr	r2, [pc, #160]	@ (8003b84 <TIM_Base_SetConfig+0x100>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <TIM_Base_SetConfig+0x104>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00f      	beq.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <TIM_Base_SetConfig+0x108>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a25      	ldr	r2, [pc, #148]	@ (8003b90 <TIM_Base_SetConfig+0x10c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <TIM_Base_SetConfig+0x110>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a23      	ldr	r2, [pc, #140]	@ (8003b98 <TIM_Base_SetConfig+0x114>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <TIM_Base_SetConfig+0xfc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]
  }
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800

08003b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f023 0201 	bic.w	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0302 	bic.w	r3, r3, #2
 8003be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c64 <TIM_OC1_SetConfig+0xc8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10c      	bne.n	8003c12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0308 	bic.w	r3, r3, #8
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 0304 	bic.w	r3, r3, #4
 8003c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <TIM_OC1_SetConfig+0xc8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d111      	bne.n	8003c3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	621a      	str	r2, [r3, #32]
}
 8003c58:	bf00      	nop
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	40010000 	.word	0x40010000

08003c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f023 0210 	bic.w	r2, r3, #16
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0320 	bic.w	r3, r3, #32
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <TIM_OC2_SetConfig+0xd4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10d      	bne.n	8003ce4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a15      	ldr	r2, [pc, #84]	@ (8003d3c <TIM_OC2_SetConfig+0xd4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d113      	bne.n	8003d14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000

08003d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1d      	ldr	r2, [pc, #116]	@ (8003e10 <TIM_OC3_SetConfig+0xd0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10d      	bne.n	8003dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a14      	ldr	r2, [pc, #80]	@ (8003e10 <TIM_OC3_SetConfig+0xd0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40010000 	.word	0x40010000

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <TIM_OC4_SetConfig+0x9c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d109      	bne.n	8003e88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000

08003eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a1a      	ldr	r2, [r3, #32]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1a      	ldr	r2, [r3, #32]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e050      	b.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f64:	d013      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a18      	ldr	r2, [pc, #96]	@ (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a16      	ldr	r2, [pc, #88]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40014000 	.word	0x40014000

08003fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e03d      	b.n	8004074 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e042      	b.n	8004140 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd ff14 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	@ 0x24
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f97f 	bl	80043f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	@ 0x28
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	f040 8081 	bne.w	800426c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_UART_Receive+0x2e>
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e079      	b.n	800426e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2222      	movs	r2, #34	@ 0x22
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418e:	f7fe f851 	bl	8002234 <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	88fa      	ldrh	r2, [r7, #6]
 800419e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a8:	d108      	bne.n	80041bc <HAL_UART_Receive+0x74>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	e003      	b.n	80041c4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041c4:	e047      	b.n	8004256 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2200      	movs	r2, #0
 80041ce:	2120      	movs	r1, #32
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f850 	bl	8004276 <UART_WaitOnFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e042      	b.n	800426e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10c      	bne.n	8004208 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	3302      	adds	r3, #2
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	e01f      	b.n	8004248 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004210:	d007      	beq.n	8004222 <HAL_UART_Receive+0xda>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_UART_Receive+0xe8>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e008      	b.n	8004242 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800423c:	b2da      	uxtb	r2, r3
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3301      	adds	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1b2      	bne.n	80041c6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b086      	sub	sp, #24
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004286:	e03b      	b.n	8004300 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428e:	d037      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004290:	f7fd ffd0 	bl	8002234 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	6a3a      	ldr	r2, [r7, #32]
 800429c:	429a      	cmp	r2, r3
 800429e:	d302      	bcc.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e03a      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d023      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b80      	cmp	r3, #128	@ 0x80
 80042bc:	d020      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b40      	cmp	r3, #64	@ 0x40
 80042c2:	d01d      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d116      	bne.n	8004300 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f81d 	bl	8004328 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2208      	movs	r2, #8
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e00f      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	429a      	cmp	r2, r3
 800430e:	bf0c      	ite	eq
 8004310:	2301      	moveq	r3, #1
 8004312:	2300      	movne	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	429a      	cmp	r2, r3
 800431c:	d0b4      	beq.n	8004288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b095      	sub	sp, #84	@ 0x54
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004350:	643a      	str	r2, [r7, #64]	@ 0x40
 8004352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3314      	adds	r3, #20
 800436a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	61fb      	str	r3, [r7, #28]
   return(result);
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3314      	adds	r3, #20
 8004382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800438a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439c:	2b01      	cmp	r3, #1
 800439e:	d119      	bne.n	80043d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f023 0310 	bic.w	r3, r3, #16
 80043b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	330c      	adds	r3, #12
 80043be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c0:	61ba      	str	r2, [r7, #24]
 80043c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6979      	ldr	r1, [r7, #20]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	613b      	str	r3, [r7, #16]
   return(result);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043e2:	bf00      	nop
 80043e4:	3754      	adds	r7, #84	@ 0x54
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f4:	b0c0      	sub	sp, #256	@ 0x100
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	68d9      	ldr	r1, [r3, #12]
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	ea40 0301 	orr.w	r3, r0, r1
 8004418:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	431a      	orrs	r2, r3
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	431a      	orrs	r2, r3
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004448:	f021 010c 	bic.w	r1, r1, #12
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004456:	430b      	orrs	r3, r1
 8004458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	6999      	ldr	r1, [r3, #24]
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	ea40 0301 	orr.w	r3, r0, r1
 8004476:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b8f      	ldr	r3, [pc, #572]	@ (80046bc <UART_SetConfig+0x2cc>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d005      	beq.n	8004490 <UART_SetConfig+0xa0>
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b8d      	ldr	r3, [pc, #564]	@ (80046c0 <UART_SetConfig+0x2d0>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d104      	bne.n	800449a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7fe fde8 	bl	8003064 <HAL_RCC_GetPCLK2Freq>
 8004494:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004498:	e003      	b.n	80044a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800449a:	f7fe fdcf 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 800449e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ac:	f040 810c 	bne.w	80046c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044c2:	4622      	mov	r2, r4
 80044c4:	462b      	mov	r3, r5
 80044c6:	1891      	adds	r1, r2, r2
 80044c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044ca:	415b      	adcs	r3, r3
 80044cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044d2:	4621      	mov	r1, r4
 80044d4:	eb12 0801 	adds.w	r8, r2, r1
 80044d8:	4629      	mov	r1, r5
 80044da:	eb43 0901 	adc.w	r9, r3, r1
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f2:	4690      	mov	r8, r2
 80044f4:	4699      	mov	r9, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	eb18 0303 	adds.w	r3, r8, r3
 80044fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004500:	462b      	mov	r3, r5
 8004502:	eb49 0303 	adc.w	r3, r9, r3
 8004506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004516:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800451a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800451e:	460b      	mov	r3, r1
 8004520:	18db      	adds	r3, r3, r3
 8004522:	653b      	str	r3, [r7, #80]	@ 0x50
 8004524:	4613      	mov	r3, r2
 8004526:	eb42 0303 	adc.w	r3, r2, r3
 800452a:	657b      	str	r3, [r7, #84]	@ 0x54
 800452c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004530:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004534:	f7fc fa42 	bl	80009bc <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4b61      	ldr	r3, [pc, #388]	@ (80046c4 <UART_SetConfig+0x2d4>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	011c      	lsls	r4, r3, #4
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004550:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004554:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004560:	415b      	adcs	r3, r3
 8004562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004568:	4641      	mov	r1, r8
 800456a:	eb12 0a01 	adds.w	sl, r2, r1
 800456e:	4649      	mov	r1, r9
 8004570:	eb43 0b01 	adc.w	fp, r3, r1
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004580:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004588:	4692      	mov	sl, r2
 800458a:	469b      	mov	fp, r3
 800458c:	4643      	mov	r3, r8
 800458e:	eb1a 0303 	adds.w	r3, sl, r3
 8004592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004596:	464b      	mov	r3, r9
 8004598:	eb4b 0303 	adc.w	r3, fp, r3
 800459c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045b4:	460b      	mov	r3, r1
 80045b6:	18db      	adds	r3, r3, r3
 80045b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ba:	4613      	mov	r3, r2
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045ca:	f7fc f9f7 	bl	80009bc <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4611      	mov	r1, r2
 80045d4:	4b3b      	ldr	r3, [pc, #236]	@ (80046c4 <UART_SetConfig+0x2d4>)
 80045d6:	fba3 2301 	umull	r2, r3, r3, r1
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2264      	movs	r2, #100	@ 0x64
 80045de:	fb02 f303 	mul.w	r3, r2, r3
 80045e2:	1acb      	subs	r3, r1, r3
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045ea:	4b36      	ldr	r3, [pc, #216]	@ (80046c4 <UART_SetConfig+0x2d4>)
 80045ec:	fba3 2302 	umull	r2, r3, r3, r2
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045f8:	441c      	add	r4, r3
 80045fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004604:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004608:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004614:	415b      	adcs	r3, r3
 8004616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6339      	str	r1, [r7, #48]	@ 0x30
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004650:	464b      	mov	r3, r9
 8004652:	460a      	mov	r2, r1
 8004654:	eb42 0303 	adc.w	r3, r2, r3
 8004658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004668:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800466c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004670:	460b      	mov	r3, r1
 8004672:	18db      	adds	r3, r3, r3
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004676:	4613      	mov	r3, r2
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800467e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004682:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004686:	f7fc f999 	bl	80009bc <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <UART_SetConfig+0x2d4>)
 8004690:	fba3 1302 	umull	r1, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	2164      	movs	r1, #100	@ 0x64
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	3332      	adds	r3, #50	@ 0x32
 80046a2:	4a08      	ldr	r2, [pc, #32]	@ (80046c4 <UART_SetConfig+0x2d4>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	f003 0207 	and.w	r2, r3, #7
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4422      	add	r2, r4
 80046b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046b8:	e106      	b.n	80048c8 <UART_SetConfig+0x4d8>
 80046ba:	bf00      	nop
 80046bc:	40011000 	.word	0x40011000
 80046c0:	40011400 	.word	0x40011400
 80046c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046da:	4642      	mov	r2, r8
 80046dc:	464b      	mov	r3, r9
 80046de:	1891      	adds	r1, r2, r2
 80046e0:	6239      	str	r1, [r7, #32]
 80046e2:	415b      	adcs	r3, r3
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ea:	4641      	mov	r1, r8
 80046ec:	1854      	adds	r4, r2, r1
 80046ee:	4649      	mov	r1, r9
 80046f0:	eb43 0501 	adc.w	r5, r3, r1
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	00eb      	lsls	r3, r5, #3
 80046fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004702:	00e2      	lsls	r2, r4, #3
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	4643      	mov	r3, r8
 800470a:	18e3      	adds	r3, r4, r3
 800470c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004710:	464b      	mov	r3, r9
 8004712:	eb45 0303 	adc.w	r3, r5, r3
 8004716:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004726:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004736:	4629      	mov	r1, r5
 8004738:	008b      	lsls	r3, r1, #2
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004740:	4621      	mov	r1, r4
 8004742:	008a      	lsls	r2, r1, #2
 8004744:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004748:	f7fc f938 	bl	80009bc <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4b60      	ldr	r3, [pc, #384]	@ (80048d4 <UART_SetConfig+0x4e4>)
 8004752:	fba3 2302 	umull	r2, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	011c      	lsls	r4, r3, #4
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004764:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004768:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	61b9      	str	r1, [r7, #24]
 8004774:	415b      	adcs	r3, r3
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800477c:	4641      	mov	r1, r8
 800477e:	1851      	adds	r1, r2, r1
 8004780:	6139      	str	r1, [r7, #16]
 8004782:	4649      	mov	r1, r9
 8004784:	414b      	adcs	r3, r1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004794:	4659      	mov	r1, fp
 8004796:	00cb      	lsls	r3, r1, #3
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800479e:	4651      	mov	r1, sl
 80047a0:	00ca      	lsls	r2, r1, #3
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	4642      	mov	r2, r8
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047b0:	464b      	mov	r3, r9
 80047b2:	460a      	mov	r2, r1
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047d4:	4649      	mov	r1, r9
 80047d6:	008b      	lsls	r3, r1, #2
 80047d8:	4641      	mov	r1, r8
 80047da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047de:	4641      	mov	r1, r8
 80047e0:	008a      	lsls	r2, r1, #2
 80047e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047e6:	f7fc f8e9 	bl	80009bc <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	4b38      	ldr	r3, [pc, #224]	@ (80048d4 <UART_SetConfig+0x4e4>)
 80047f2:	fba3 2301 	umull	r2, r3, r3, r1
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2264      	movs	r2, #100	@ 0x64
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	1acb      	subs	r3, r1, r3
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	3332      	adds	r3, #50	@ 0x32
 8004804:	4a33      	ldr	r2, [pc, #204]	@ (80048d4 <UART_SetConfig+0x4e4>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004810:	441c      	add	r4, r3
 8004812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004816:	2200      	movs	r2, #0
 8004818:	673b      	str	r3, [r7, #112]	@ 0x70
 800481a:	677a      	str	r2, [r7, #116]	@ 0x74
 800481c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	1891      	adds	r1, r2, r2
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	415b      	adcs	r3, r3
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004830:	4641      	mov	r1, r8
 8004832:	1851      	adds	r1, r2, r1
 8004834:	6039      	str	r1, [r7, #0]
 8004836:	4649      	mov	r1, r9
 8004838:	414b      	adcs	r3, r1
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004848:	4659      	mov	r1, fp
 800484a:	00cb      	lsls	r3, r1, #3
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004852:	4651      	mov	r1, sl
 8004854:	00ca      	lsls	r2, r1, #3
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	4603      	mov	r3, r0
 800485c:	4642      	mov	r2, r8
 800485e:	189b      	adds	r3, r3, r2
 8004860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004862:	464b      	mov	r3, r9
 8004864:	460a      	mov	r2, r1
 8004866:	eb42 0303 	adc.w	r3, r2, r3
 800486a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	663b      	str	r3, [r7, #96]	@ 0x60
 8004876:	667a      	str	r2, [r7, #100]	@ 0x64
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004884:	4649      	mov	r1, r9
 8004886:	008b      	lsls	r3, r1, #2
 8004888:	4641      	mov	r1, r8
 800488a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800488e:	4641      	mov	r1, r8
 8004890:	008a      	lsls	r2, r1, #2
 8004892:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004896:	f7fc f891 	bl	80009bc <__aeabi_uldivmod>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4b0d      	ldr	r3, [pc, #52]	@ (80048d4 <UART_SetConfig+0x4e4>)
 80048a0:	fba3 1302 	umull	r1, r3, r3, r2
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	2164      	movs	r1, #100	@ 0x64
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	3332      	adds	r3, #50	@ 0x32
 80048b2:	4a08      	ldr	r2, [pc, #32]	@ (80048d4 <UART_SetConfig+0x4e4>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4422      	add	r2, r4
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048ce:	46bd      	mov	sp, r7
 80048d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d4:	51eb851f 	.word	0x51eb851f

080048d8 <__NVIC_SetPriority>:
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	6039      	str	r1, [r7, #0]
 80048e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	db0a      	blt.n	8004902 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	490c      	ldr	r1, [pc, #48]	@ (8004924 <__NVIC_SetPriority+0x4c>)
 80048f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f6:	0112      	lsls	r2, r2, #4
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	440b      	add	r3, r1
 80048fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004900:	e00a      	b.n	8004918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	b2da      	uxtb	r2, r3
 8004906:	4908      	ldr	r1, [pc, #32]	@ (8004928 <__NVIC_SetPriority+0x50>)
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	3b04      	subs	r3, #4
 8004910:	0112      	lsls	r2, r2, #4
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	440b      	add	r3, r1
 8004916:	761a      	strb	r2, [r3, #24]
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	e000e100 	.word	0xe000e100
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <SysTick_Handler+0x1c>)
 8004932:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004934:	f001 ffee 	bl	8006914 <xTaskGetSchedulerState>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800493e:	f002 fee3 	bl	8007708 <xPortSysTickHandler>
  }
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000e010 	.word	0xe000e010

0800494c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004950:	2100      	movs	r1, #0
 8004952:	f06f 0004 	mvn.w	r0, #4
 8004956:	f7ff ffbf 	bl	80048d8 <__NVIC_SetPriority>
#endif
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004966:	f3ef 8305 	mrs	r3, IPSR
 800496a:	603b      	str	r3, [r7, #0]
  return(result);
 800496c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004972:	f06f 0305 	mvn.w	r3, #5
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	e00c      	b.n	8004994 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800497a:	4b0a      	ldr	r3, [pc, #40]	@ (80049a4 <osKernelInitialize+0x44>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d105      	bne.n	800498e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004982:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <osKernelInitialize+0x44>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004988:	2300      	movs	r3, #0
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	e002      	b.n	8004994 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004994:	687b      	ldr	r3, [r7, #4]
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000280 	.word	0x20000280

080049a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ae:	f3ef 8305 	mrs	r3, IPSR
 80049b2:	603b      	str	r3, [r7, #0]
  return(result);
 80049b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80049ba:	f06f 0305 	mvn.w	r3, #5
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	e010      	b.n	80049e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <osKernelStart+0x48>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d109      	bne.n	80049de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049ca:	f7ff ffbf 	bl	800494c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049ce:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <osKernelStart+0x48>)
 80049d0:	2202      	movs	r2, #2
 80049d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049d4:	f001 fb3a 	bl	800604c <vTaskStartScheduler>
      stat = osOK;
 80049d8:	2300      	movs	r3, #0
 80049da:	607b      	str	r3, [r7, #4]
 80049dc:	e002      	b.n	80049e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049e4:	687b      	ldr	r3, [r7, #4]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000280 	.word	0x20000280

080049f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	@ 0x38
 80049f8:	af04      	add	r7, sp, #16
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a04:	f3ef 8305 	mrs	r3, IPSR
 8004a08:	617b      	str	r3, [r7, #20]
  return(result);
 8004a0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d17e      	bne.n	8004b0e <osThreadNew+0x11a>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d07b      	beq.n	8004b0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a16:	2380      	movs	r3, #128	@ 0x80
 8004a18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a1a:	2318      	movs	r3, #24
 8004a1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295
 8004a26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d045      	beq.n	8004aba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <osThreadNew+0x48>
        name = attr->name;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <osThreadNew+0x6e>
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b38      	cmp	r3, #56	@ 0x38
 8004a54:	d805      	bhi.n	8004a62 <osThreadNew+0x6e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <osThreadNew+0x72>
        return (NULL);
 8004a62:	2300      	movs	r3, #0
 8004a64:	e054      	b.n	8004b10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	089b      	lsrs	r3, r3, #2
 8004a74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00e      	beq.n	8004a9c <osThreadNew+0xa8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a84:	d90a      	bls.n	8004a9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d006      	beq.n	8004a9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <osThreadNew+0xa8>
        mem = 1;
 8004a96:	2301      	movs	r3, #1
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e010      	b.n	8004abe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10c      	bne.n	8004abe <osThreadNew+0xca>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <osThreadNew+0xca>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <osThreadNew+0xca>
          mem = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e001      	b.n	8004abe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d110      	bne.n	8004ae6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004acc:	9202      	str	r2, [sp, #8]
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6a3a      	ldr	r2, [r7, #32]
 8004ad8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f001 f8c2 	bl	8005c64 <xTaskCreateStatic>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e013      	b.n	8004b0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d110      	bne.n	8004b0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	f107 0310 	add.w	r3, r7, #16
 8004af4:	9301      	str	r3, [sp, #4]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f001 f910 	bl	8005d24 <xTaskCreate>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <osThreadNew+0x11a>
            hTask = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b0e:	693b      	ldr	r3, [r7, #16]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3728      	adds	r7, #40	@ 0x28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b20:	f3ef 8305 	mrs	r3, IPSR
 8004b24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <osDelay+0x1c>
    stat = osErrorISR;
 8004b2c:	f06f 0305 	mvn.w	r3, #5
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e007      	b.n	8004b44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f001 fa4e 	bl	8005fe0 <vTaskDelay>
    }
  }

  return (stat);
 8004b44:	68fb      	ldr	r3, [r7, #12]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08a      	sub	sp, #40	@ 0x28
 8004b52:	af02      	add	r7, sp, #8
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b5e:	f3ef 8305 	mrs	r3, IPSR
 8004b62:	613b      	str	r3, [r7, #16]
  return(result);
 8004b64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d175      	bne.n	8004c56 <osSemaphoreNew+0x108>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d072      	beq.n	8004c56 <osSemaphoreNew+0x108>
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d86e      	bhi.n	8004c56 <osSemaphoreNew+0x108>
    mem = -1;
 8004b78:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d006      	beq.n	8004b9a <osSemaphoreNew+0x4c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b92:	d902      	bls.n	8004b9a <osSemaphoreNew+0x4c>
        mem = 1;
 8004b94:	2301      	movs	r3, #1
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	e00c      	b.n	8004bb4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <osSemaphoreNew+0x66>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <osSemaphoreNew+0x66>
          mem = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e001      	b.n	8004bb4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d04c      	beq.n	8004c56 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d128      	bne.n	8004c14 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d10a      	bne.n	8004bde <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	9200      	str	r2, [sp, #0]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f000 f995 	bl	8004f04 <xQueueGenericCreateStatic>
 8004bda:	61f8      	str	r0, [r7, #28]
 8004bdc:	e005      	b.n	8004bea <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004bde:	2203      	movs	r2, #3
 8004be0:	2100      	movs	r1, #0
 8004be2:	2001      	movs	r0, #1
 8004be4:	f000 fa0b 	bl	8004ffe <xQueueGenericCreate>
 8004be8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d022      	beq.n	8004c36 <osSemaphoreNew+0xe8>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01f      	beq.n	8004c36 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	69f8      	ldr	r0, [r7, #28]
 8004bfe:	f000 facb 	bl	8005198 <xQueueGenericSend>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d016      	beq.n	8004c36 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004c08:	69f8      	ldr	r0, [r7, #28]
 8004c0a:	f000 fe57 	bl	80058bc <vQueueDelete>
            hSemaphore = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	e010      	b.n	8004c36 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d108      	bne.n	8004c2c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fa49 	bl	80050ba <xQueueCreateCountingSemaphoreStatic>
 8004c28:	61f8      	str	r0, [r7, #28]
 8004c2a:	e004      	b.n	8004c36 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fa7c 	bl	800512c <xQueueCreateCountingSemaphore>
 8004c34:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00c      	beq.n	8004c56 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e001      	b.n	8004c4e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004c4e:	6979      	ldr	r1, [r7, #20]
 8004c50:	69f8      	ldr	r0, [r7, #28]
 8004c52:	f000 ff7f 	bl	8005b54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004c56:	69fb      	ldr	r3, [r7, #28]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a07      	ldr	r2, [pc, #28]	@ (8004c8c <vApplicationGetIdleTaskMemory+0x2c>)
 8004c70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4a06      	ldr	r2, [pc, #24]	@ (8004c90 <vApplicationGetIdleTaskMemory+0x30>)
 8004c76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	601a      	str	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000284 	.word	0x20000284
 8004c90:	2000032c 	.word	0x2000032c

08004c94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a07      	ldr	r2, [pc, #28]	@ (8004cc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ca4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4a06      	ldr	r2, [pc, #24]	@ (8004cc4 <vApplicationGetTimerTaskMemory+0x30>)
 8004caa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cb2:	601a      	str	r2, [r3, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	2000052c 	.word	0x2000052c
 8004cc4:	200005d4 	.word	0x200005d4

08004cc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f103 0208 	add.w	r2, r3, #8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f103 0208 	add.w	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 0208 	add.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d103      	bne.n	8004d8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	e00c      	b.n	8004da4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3308      	adds	r3, #8
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e002      	b.n	8004d98 <vListInsert+0x2e>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d2f6      	bcs.n	8004d92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	601a      	str	r2, [r3, #0]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6892      	ldr	r2, [r2, #8]
 8004df2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6852      	ldr	r2, [r2, #4]
 8004dfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d103      	bne.n	8004e10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	1e5a      	subs	r2, r3, #1
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10b      	bne.n	8004e5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e56:	bf00      	nop
 8004e58:	bf00      	nop
 8004e5a:	e7fd      	b.n	8004e58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e5c:	f002 fbc4 	bl	80075e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	68f9      	ldr	r1, [r7, #12]
 8004e6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	441a      	add	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e92:	fb01 f303 	mul.w	r3, r1, r3
 8004e96:	441a      	add	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	22ff      	movs	r2, #255	@ 0xff
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	22ff      	movs	r2, #255	@ 0xff
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d114      	bne.n	8004edc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01a      	beq.n	8004ef0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3310      	adds	r3, #16
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 fb62 	bl	8006588 <xTaskRemoveFromEventList>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d012      	beq.n	8004ef0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eca:	4b0d      	ldr	r3, [pc, #52]	@ (8004f00 <xQueueGenericReset+0xd0>)
 8004ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	e009      	b.n	8004ef0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3310      	adds	r3, #16
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fef1 	bl	8004cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3324      	adds	r3, #36	@ 0x24
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff feec 	bl	8004cc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ef0:	f002 fbac 	bl	800764c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ef4:	2301      	movs	r3, #1
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08e      	sub	sp, #56	@ 0x38
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f2a:	bf00      	nop
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <xQueueGenericCreateStatic+0x56>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <xQueueGenericCreateStatic+0x5a>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <xQueueGenericCreateStatic+0x5c>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	623b      	str	r3, [r7, #32]
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <xQueueGenericCreateStatic+0x84>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <xQueueGenericCreateStatic+0x88>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <xQueueGenericCreateStatic+0x8a>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	61fb      	str	r3, [r7, #28]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004faa:	2350      	movs	r3, #80	@ 0x50
 8004fac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b50      	cmp	r3, #80	@ 0x50
 8004fb2:	d00b      	beq.n	8004fcc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	61bb      	str	r3, [r7, #24]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fcc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00d      	beq.n	8004ff4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fe0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f840 	bl	8005074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3730      	adds	r7, #48	@ 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b08a      	sub	sp, #40	@ 0x28
 8005002:	af02      	add	r7, sp, #8
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	4613      	mov	r3, r2
 800500a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10b      	bne.n	800502a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	613b      	str	r3, [r7, #16]
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	e7fd      	b.n	8005026 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	fb02 f303 	mul.w	r3, r2, r3
 8005032:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3350      	adds	r3, #80	@ 0x50
 8005038:	4618      	mov	r0, r3
 800503a:	f002 fbf7 	bl	800782c <pvPortMalloc>
 800503e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d011      	beq.n	800506a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3350      	adds	r3, #80	@ 0x50
 800504e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005058:	79fa      	ldrb	r2, [r7, #7]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	4613      	mov	r3, r2
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f805 	bl	8005074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800506a:	69bb      	ldr	r3, [r7, #24]
	}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e002      	b.n	8005096 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050a2:	2101      	movs	r1, #1
 80050a4:	69b8      	ldr	r0, [r7, #24]
 80050a6:	f7ff fec3 	bl	8004e30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b08a      	sub	sp, #40	@ 0x28
 80050be:	af02      	add	r7, sp, #8
 80050c0:	60f8      	str	r0, [r7, #12]
 80050c2:	60b9      	str	r1, [r7, #8]
 80050c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61bb      	str	r3, [r7, #24]
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d90b      	bls.n	8005104 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	617b      	str	r3, [r7, #20]
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	e7fd      	b.n	8005100 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005104:	2302      	movs	r3, #2
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	2100      	movs	r1, #0
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fef8 	bl	8004f04 <xQueueGenericCreateStatic>
 8005114:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005122:	69fb      	ldr	r3, [r7, #28]
	}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	613b      	str	r3, [r7, #16]
}
 800514e:	bf00      	nop
 8005150:	bf00      	nop
 8005152:	e7fd      	b.n	8005150 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d90b      	bls.n	8005174 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	60fb      	str	r3, [r7, #12]
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	e7fd      	b.n	8005170 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005174:	2202      	movs	r2, #2
 8005176:	2100      	movs	r1, #0
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff ff40 	bl	8004ffe <xQueueGenericCreate>
 800517e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800518c:	697b      	ldr	r3, [r7, #20]
	}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	@ 0x38
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051a6:	2300      	movs	r3, #0
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <xQueueGenericSend+0x34>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <xQueueGenericSend+0x42>
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <xQueueGenericSend+0x46>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <xQueueGenericSend+0x48>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xQueueGenericSend+0x64>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d103      	bne.n	800520a <xQueueGenericSend+0x72>
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <xQueueGenericSend+0x76>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueGenericSend+0x78>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <xQueueGenericSend+0x94>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	623b      	str	r3, [r7, #32]
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800522c:	f001 fb72 	bl	8006914 <xTaskGetSchedulerState>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <xQueueGenericSend+0xa4>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <xQueueGenericSend+0xa8>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <xQueueGenericSend+0xaa>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <xQueueGenericSend+0xc6>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	61fb      	str	r3, [r7, #28]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800525e:	f002 f9c3 	bl	80075e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <xQueueGenericSend+0xdc>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d129      	bne.n	80052c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800527a:	f000 fb5b 	bl	8005934 <prvCopyDataToQueue>
 800527e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d010      	beq.n	80052aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	3324      	adds	r3, #36	@ 0x24
 800528c:	4618      	mov	r0, r3
 800528e:	f001 f97b 	bl	8006588 <xTaskRemoveFromEventList>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d013      	beq.n	80052c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005298:	4b3f      	ldr	r3, [pc, #252]	@ (8005398 <xQueueGenericSend+0x200>)
 800529a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	e00a      	b.n	80052c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052b0:	4b39      	ldr	r3, [pc, #228]	@ (8005398 <xQueueGenericSend+0x200>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052c0:	f002 f9c4 	bl	800764c <vPortExitCritical>
				return pdPASS;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e063      	b.n	8005390 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ce:	f002 f9bd 	bl	800764c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e05c      	b.n	8005390 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	4618      	mov	r0, r3
 80052e2:	f001 f9b5 	bl	8006650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ea:	f002 f9af 	bl	800764c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ee:	f000 ff1d 	bl	800612c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052f2:	f002 f979 	bl	80075e8 <vPortEnterCritical>
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d103      	bne.n	800530c <xQueueGenericSend+0x174>
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800530c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005312:	b25b      	sxtb	r3, r3
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d103      	bne.n	8005322 <xQueueGenericSend+0x18a>
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005322:	f002 f993 	bl	800764c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005326:	1d3a      	adds	r2, r7, #4
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f001 f9a4 	bl	800667c <xTaskCheckForTimeOut>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d124      	bne.n	8005384 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800533a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800533c:	f000 fbf2 	bl	8005b24 <prvIsQueueFull>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d018      	beq.n	8005378 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	3310      	adds	r3, #16
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4611      	mov	r1, r2
 800534e:	4618      	mov	r0, r3
 8005350:	f001 f8c8 	bl	80064e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005356:	f000 fb7d 	bl	8005a54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800535a:	f000 fef5 	bl	8006148 <xTaskResumeAll>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	f47f af7c 	bne.w	800525e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005366:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <xQueueGenericSend+0x200>)
 8005368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	e772      	b.n	800525e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800537a:	f000 fb6b 	bl	8005a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800537e:	f000 fee3 	bl	8006148 <xTaskResumeAll>
 8005382:	e76c      	b.n	800525e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005386:	f000 fb65 	bl	8005a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800538a:	f000 fedd 	bl	8006148 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800538e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005390:	4618      	mov	r0, r3
 8005392:	3738      	adds	r7, #56	@ 0x38
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b090      	sub	sp, #64	@ 0x40
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <xQueueGenericSendFromISR+0x3e>
 80053d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <xQueueGenericSendFromISR+0x42>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <xQueueGenericSendFromISR+0x44>
 80053de:	2300      	movs	r3, #0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053f6:	bf00      	nop
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d103      	bne.n	800540a <xQueueGenericSendFromISR+0x6e>
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <xQueueGenericSendFromISR+0x72>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <xQueueGenericSendFromISR+0x74>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	623b      	str	r3, [r7, #32]
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800542c:	f002 f9bc 	bl	80077a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005430:	f3ef 8211 	mrs	r2, BASEPRI
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	61fa      	str	r2, [r7, #28]
 8005446:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005448:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800544a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800544c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005454:	429a      	cmp	r2, r3
 8005456:	d302      	bcc.n	800545e <xQueueGenericSendFromISR+0xc2>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b02      	cmp	r3, #2
 800545c:	d12f      	bne.n	80054be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005464:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005474:	f000 fa5e 	bl	8005934 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005478:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d112      	bne.n	80054a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	3324      	adds	r3, #36	@ 0x24
 800548e:	4618      	mov	r0, r3
 8005490:	f001 f87a 	bl	8006588 <xTaskRemoveFromEventList>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e007      	b.n	80054b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054ac:	3301      	adds	r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	b25a      	sxtb	r2, r3
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054b8:	2301      	movs	r3, #1
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80054bc:	e001      	b.n	80054c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3740      	adds	r7, #64	@ 0x40
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08c      	sub	sp, #48	@ 0x30
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <xQueueReceive+0x32>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	623b      	str	r3, [r7, #32]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <xQueueReceive+0x40>
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <xQueueReceive+0x44>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <xQueueReceive+0x46>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <xQueueReceive+0x62>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	61fb      	str	r3, [r7, #28]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800553a:	f001 f9eb 	bl	8006914 <xTaskGetSchedulerState>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <xQueueReceive+0x72>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <xQueueReceive+0x76>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <xQueueReceive+0x78>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <xQueueReceive+0x94>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61bb      	str	r3, [r7, #24]
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800556c:	f002 f83c 	bl	80075e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005580:	f000 fa42 	bl	8005a08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	1e5a      	subs	r2, r3, #1
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00f      	beq.n	80055b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	3310      	adds	r3, #16
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fff5 	bl	8006588 <xTaskRemoveFromEventList>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005698 <xQueueReceive+0x1c0>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055b4:	f002 f84a 	bl	800764c <vPortExitCritical>
				return pdPASS;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e069      	b.n	8005690 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055c2:	f002 f843 	bl	800764c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e062      	b.n	8005690 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 f83b 	bl	8006650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055de:	f002 f835 	bl	800764c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055e2:	f000 fda3 	bl	800612c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055e6:	f001 ffff 	bl	80075e8 <vPortEnterCritical>
 80055ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f0:	b25b      	sxtb	r3, r3
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d103      	bne.n	8005600 <xQueueReceive+0x128>
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005602:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005606:	b25b      	sxtb	r3, r3
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d103      	bne.n	8005616 <xQueueReceive+0x13e>
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005616:	f002 f819 	bl	800764c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800561a:	1d3a      	adds	r2, r7, #4
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f001 f82a 	bl	800667c <xTaskCheckForTimeOut>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d123      	bne.n	8005676 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800562e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005630:	f000 fa62 	bl	8005af8 <prvIsQueueEmpty>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800563a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563c:	3324      	adds	r3, #36	@ 0x24
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f000 ff4e 	bl	80064e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800564a:	f000 fa03 	bl	8005a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800564e:	f000 fd7b 	bl	8006148 <xTaskResumeAll>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d189      	bne.n	800556c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005658:	4b0f      	ldr	r3, [pc, #60]	@ (8005698 <xQueueReceive+0x1c0>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	e780      	b.n	800556c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800566a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800566c:	f000 f9f2 	bl	8005a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005670:	f000 fd6a 	bl	8006148 <xTaskResumeAll>
 8005674:	e77a      	b.n	800556c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005678:	f000 f9ec 	bl	8005a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800567c:	f000 fd64 	bl	8006148 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005682:	f000 fa39 	bl	8005af8 <prvIsQueueEmpty>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	f43f af6f 	beq.w	800556c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800568e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005690:	4618      	mov	r0, r3
 8005692:	3730      	adds	r7, #48	@ 0x30
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08e      	sub	sp, #56	@ 0x38
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	623b      	str	r3, [r7, #32]
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	61fb      	str	r3, [r7, #28]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056f0:	f001 f910 	bl	8006914 <xTaskGetSchedulerState>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <xQueueSemaphoreTake+0x64>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <xQueueSemaphoreTake+0x68>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <xQueueSemaphoreTake+0x6a>
 8005704:	2300      	movs	r3, #0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	61bb      	str	r3, [r7, #24]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005722:	f001 ff61 	bl	80075e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d024      	beq.n	800577c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	1e5a      	subs	r2, r3, #1
 8005736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800573a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005742:	f001 fa61 	bl	8006c08 <pvTaskIncrementMutexHeldCount>
 8005746:	4602      	mov	r2, r0
 8005748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00f      	beq.n	8005774 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	3310      	adds	r3, #16
 8005758:	4618      	mov	r0, r3
 800575a:	f000 ff15 	bl	8006588 <xTaskRemoveFromEventList>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005764:	4b54      	ldr	r3, [pc, #336]	@ (80058b8 <xQueueSemaphoreTake+0x21c>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005774:	f001 ff6a 	bl	800764c <vPortExitCritical>
				return pdPASS;
 8005778:	2301      	movs	r3, #1
 800577a:	e098      	b.n	80058ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d112      	bne.n	80057a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00b      	beq.n	80057a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	617b      	str	r3, [r7, #20]
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	e7fd      	b.n	800579c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057a0:	f001 ff54 	bl	800764c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e082      	b.n	80058ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ae:	f107 030c 	add.w	r3, r7, #12
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 ff4c 	bl	8006650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057bc:	f001 ff46 	bl	800764c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c0:	f000 fcb4 	bl	800612c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c4:	f001 ff10 	bl	80075e8 <vPortEnterCritical>
 80057c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057ce:	b25b      	sxtb	r3, r3
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d103      	bne.n	80057de <xQueueSemaphoreTake+0x142>
 80057d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e4:	b25b      	sxtb	r3, r3
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d103      	bne.n	80057f4 <xQueueSemaphoreTake+0x158>
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f4:	f001 ff2a 	bl	800764c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057f8:	463a      	mov	r2, r7
 80057fa:	f107 030c 	add.w	r3, r7, #12
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f000 ff3b 	bl	800667c <xTaskCheckForTimeOut>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d132      	bne.n	8005872 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800580c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800580e:	f000 f973 	bl	8005af8 <prvIsQueueEmpty>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d026      	beq.n	8005866 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005820:	f001 fee2 	bl	80075e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4618      	mov	r0, r3
 800582a:	f001 f891 	bl	8006950 <xTaskPriorityInherit>
 800582e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005830:	f001 ff0c 	bl	800764c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005836:	3324      	adds	r3, #36	@ 0x24
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fe51 	bl	80064e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005842:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005844:	f000 f906 	bl	8005a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005848:	f000 fc7e 	bl	8006148 <xTaskResumeAll>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	f47f af67 	bne.w	8005722 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005854:	4b18      	ldr	r3, [pc, #96]	@ (80058b8 <xQueueSemaphoreTake+0x21c>)
 8005856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	e75d      	b.n	8005722 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005866:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005868:	f000 f8f4 	bl	8005a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800586c:	f000 fc6c 	bl	8006148 <xTaskResumeAll>
 8005870:	e757      	b.n	8005722 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005874:	f000 f8ee 	bl	8005a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005878:	f000 fc66 	bl	8006148 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800587c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800587e:	f000 f93b 	bl	8005af8 <prvIsQueueEmpty>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f43f af4c 	beq.w	8005722 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005890:	f001 feaa 	bl	80075e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005894:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005896:	f000 f835 	bl	8005904 <prvGetDisinheritPriorityAfterTimeout>
 800589a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 f92c 	bl	8006b00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058a8:	f001 fed0 	bl	800764c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3738      	adds	r7, #56	@ 0x38
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <vQueueDelete+0x2a>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60bb      	str	r3, [r7, #8]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f95e 	bl	8005ba8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f002 f866 	bl	80079c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e001      	b.n	8005926 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005926:	68fb      	ldr	r3, [r7, #12]
	}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d14d      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f001 f85e 	bl	8006a20 <xTaskPriorityDisinherit>
 8005964:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	e043      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d119      	bne.n	80059a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6858      	ldr	r0, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	461a      	mov	r2, r3
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	f002 f9d6 	bl	8007d30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	441a      	add	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d32b      	bcc.n	80059f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	e026      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68d8      	ldr	r0, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	461a      	mov	r2, r3
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	f002 f9bc 	bl	8007d30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	425b      	negs	r3, r3
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d207      	bcs.n	80059e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	425b      	negs	r3, r3
 80059de:	441a      	add	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d105      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80059fe:	697b      	ldr	r3, [r7, #20]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d018      	beq.n	8005a4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a22:	441a      	add	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d303      	bcc.n	8005a3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68d9      	ldr	r1, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	461a      	mov	r2, r3
 8005a46:	6838      	ldr	r0, [r7, #0]
 8005a48:	f002 f972 	bl	8007d30 <memcpy>
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a5c:	f001 fdc4 	bl	80075e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a68:	e011      	b.n	8005a8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d012      	beq.n	8005a98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3324      	adds	r3, #36	@ 0x24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fd86 	bl	8006588 <xTaskRemoveFromEventList>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a82:	f000 fe5f 	bl	8006744 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dce9      	bgt.n	8005a6a <prvUnlockQueue+0x16>
 8005a96:	e000      	b.n	8005a9a <prvUnlockQueue+0x46>
					break;
 8005a98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	22ff      	movs	r2, #255	@ 0xff
 8005a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005aa2:	f001 fdd3 	bl	800764c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aa6:	f001 fd9f 	bl	80075e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ab2:	e011      	b.n	8005ad8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d012      	beq.n	8005ae2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3310      	adds	r3, #16
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fd61 	bl	8006588 <xTaskRemoveFromEventList>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005acc:	f000 fe3a 	bl	8006744 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dce9      	bgt.n	8005ab4 <prvUnlockQueue+0x60>
 8005ae0:	e000      	b.n	8005ae4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ae2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	22ff      	movs	r2, #255	@ 0xff
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005aec:	f001 fdae 	bl	800764c <vPortExitCritical>
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b00:	f001 fd72 	bl	80075e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e001      	b.n	8005b16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 fd99 	bl	800764c <vPortExitCritical>

	return xReturn;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b2c:	f001 fd5c 	bl	80075e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d102      	bne.n	8005b42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e001      	b.n	8005b46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b46:	f001 fd81 	bl	800764c <vPortExitCritical>

	return xReturn;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e014      	b.n	8005b8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b64:	4a0f      	ldr	r2, [pc, #60]	@ (8005ba4 <vQueueAddToRegistry+0x50>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b70:	490c      	ldr	r1, [pc, #48]	@ (8005ba4 <vQueueAddToRegistry+0x50>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <vQueueAddToRegistry+0x50>)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b86:	e006      	b.n	8005b96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	d9e7      	bls.n	8005b64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	200009d4 	.word	0x200009d4

08005ba8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e016      	b.n	8005be4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005bb6:	4a10      	ldr	r2, [pc, #64]	@ (8005bf8 <vQueueUnregisterQueue+0x50>)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d10b      	bne.n	8005bde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf8 <vQueueUnregisterQueue+0x50>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2100      	movs	r1, #0
 8005bcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005bd0:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <vQueueUnregisterQueue+0x50>)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
				break;
 8005bdc:	e006      	b.n	8005bec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	d9e5      	bls.n	8005bb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	200009d4 	.word	0x200009d4

08005bfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c0c:	f001 fcec 	bl	80075e8 <vPortEnterCritical>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c16:	b25b      	sxtb	r3, r3
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d103      	bne.n	8005c26 <vQueueWaitForMessageRestricted+0x2a>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d103      	bne.n	8005c3c <vQueueWaitForMessageRestricted+0x40>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c3c:	f001 fd06 	bl	800764c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3324      	adds	r3, #36	@ 0x24
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fc6d 	bl	8006530 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c56:	6978      	ldr	r0, [r7, #20]
 8005c58:	f7ff fefc 	bl	8005a54 <prvUnlockQueue>
	}
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	@ 0x38
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	623b      	str	r3, [r7, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cae:	23a8      	movs	r3, #168	@ 0xa8
 8005cb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2ba8      	cmp	r3, #168	@ 0xa8
 8005cb6:	d00b      	beq.n	8005cd0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61bb      	str	r3, [r7, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01e      	beq.n	8005d16 <xTaskCreateStatic+0xb2>
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	f107 0314 	add.w	r3, r7, #20
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f851 	bl	8005db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d10:	f000 f8f6 	bl	8005f00 <prvAddNewTaskToReadyList>
 8005d14:	e001      	b.n	8005d1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d1a:	697b      	ldr	r3, [r7, #20]
	}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3728      	adds	r7, #40	@ 0x28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	@ 0x30
 8005d28:	af04      	add	r7, sp, #16
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 fd77 	bl	800782c <pvPortMalloc>
 8005d3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00e      	beq.n	8005d64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d46:	20a8      	movs	r0, #168	@ 0xa8
 8005d48:	f001 fd70 	bl	800782c <pvPortMalloc>
 8005d4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d5a:	e005      	b.n	8005d68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f001 fe33 	bl	80079c8 <vPortFree>
 8005d62:	e001      	b.n	8005d68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9303      	str	r3, [sp, #12]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	9302      	str	r3, [sp, #8]
 8005d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f80f 	bl	8005db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d92:	69f8      	ldr	r0, [r7, #28]
 8005d94:	f000 f8b4 	bl	8005f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e002      	b.n	8005da4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005da2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005da4:	69bb      	ldr	r3, [r7, #24]
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	21a5      	movs	r1, #165	@ 0xa5
 8005dca:	f001 ff2d 	bl	8007c28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f023 0307 	bic.w	r3, r3, #7
 8005de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	617b      	str	r3, [r7, #20]
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	e7fd      	b.n	8005e06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01f      	beq.n	8005e50 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e012      	b.n	8005e3c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	7819      	ldrb	r1, [r3, #0]
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	3334      	adds	r3, #52	@ 0x34
 8005e26:	460a      	mov	r2, r1
 8005e28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d006      	beq.n	8005e44 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	d9e9      	bls.n	8005e16 <prvInitialiseNewTask+0x66>
 8005e42:	e000      	b.n	8005e46 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e4e:	e003      	b.n	8005e58 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	2b37      	cmp	r3, #55	@ 0x37
 8005e5c:	d901      	bls.n	8005e62 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e5e:	2337      	movs	r3, #55	@ 0x37
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e66:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	2200      	movs	r2, #0
 8005e72:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	3304      	adds	r3, #4
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe ff45 	bl	8004d08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e80:	3318      	adds	r3, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe ff40 	bl	8004d08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e90:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e9c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	3354      	adds	r3, #84	@ 0x54
 8005eb2:	224c      	movs	r2, #76	@ 0x4c
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 feb6 	bl	8007c28 <memset>
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8005ef4 <prvInitialiseNewTask+0x144>)
 8005ec0:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef8 <prvInitialiseNewTask+0x148>)
 8005ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	4a0c      	ldr	r2, [pc, #48]	@ (8005efc <prvInitialiseNewTask+0x14c>)
 8005ecc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	68f9      	ldr	r1, [r7, #12]
 8005ed2:	69b8      	ldr	r0, [r7, #24]
 8005ed4:	f001 fa5a 	bl	800738c <pxPortInitialiseStack>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eea:	bf00      	nop
 8005eec:	3720      	adds	r7, #32
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20004c68 	.word	0x20004c68
 8005ef8:	20004cd0 	.word	0x20004cd0
 8005efc:	20004d38 	.word	0x20004d38

08005f00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f08:	f001 fb6e 	bl	80075e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc4 <prvAddNewTaskToReadyList+0xc4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc4 <prvAddNewTaskToReadyList+0xc4>)
 8005f14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f16:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc8 <prvAddNewTaskToReadyList+0xc8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc8 <prvAddNewTaskToReadyList+0xc8>)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f24:	4b27      	ldr	r3, [pc, #156]	@ (8005fc4 <prvAddNewTaskToReadyList+0xc4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d110      	bne.n	8005f4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f2c:	f000 fc2e 	bl	800678c <prvInitialiseTaskLists>
 8005f30:	e00d      	b.n	8005f4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f32:	4b26      	ldr	r3, [pc, #152]	@ (8005fcc <prvAddNewTaskToReadyList+0xcc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d109      	bne.n	8005f4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f3a:	4b23      	ldr	r3, [pc, #140]	@ (8005fc8 <prvAddNewTaskToReadyList+0xc8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d802      	bhi.n	8005f4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f48:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc8 <prvAddNewTaskToReadyList+0xc8>)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f4e:	4b20      	ldr	r3, [pc, #128]	@ (8005fd0 <prvAddNewTaskToReadyList+0xd0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a1e      	ldr	r2, [pc, #120]	@ (8005fd0 <prvAddNewTaskToReadyList+0xd0>)
 8005f56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f58:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd0 <prvAddNewTaskToReadyList+0xd0>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f64:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd4 <prvAddNewTaskToReadyList+0xd4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d903      	bls.n	8005f74 <prvAddNewTaskToReadyList+0x74>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f70:	4a18      	ldr	r2, [pc, #96]	@ (8005fd4 <prvAddNewTaskToReadyList+0xd4>)
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4a15      	ldr	r2, [pc, #84]	@ (8005fd8 <prvAddNewTaskToReadyList+0xd8>)
 8005f82:	441a      	add	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7fe fec9 	bl	8004d22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f90:	f001 fb5c 	bl	800764c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f94:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <prvAddNewTaskToReadyList+0xcc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00e      	beq.n	8005fba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc8 <prvAddNewTaskToReadyList+0xc8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d207      	bcs.n	8005fba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005faa:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <prvAddNewTaskToReadyList+0xdc>)
 8005fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000ee8 	.word	0x20000ee8
 8005fc8:	20000a14 	.word	0x20000a14
 8005fcc:	20000ef4 	.word	0x20000ef4
 8005fd0:	20000f04 	.word	0x20000f04
 8005fd4:	20000ef0 	.word	0x20000ef0
 8005fd8:	20000a18 	.word	0x20000a18
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d018      	beq.n	8006024 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ff2:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <vTaskDelay+0x64>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <vTaskDelay+0x32>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006012:	f000 f88b 	bl	800612c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006016:	2100      	movs	r1, #0
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fe09 	bl	8006c30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800601e:	f000 f893 	bl	8006148 <xTaskResumeAll>
 8006022:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d107      	bne.n	800603a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800602a:	4b07      	ldr	r3, [pc, #28]	@ (8006048 <vTaskDelay+0x68>)
 800602c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000f10 	.word	0x20000f10
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	@ 0x28
 8006050:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800605a:	463a      	mov	r2, r7
 800605c:	1d39      	adds	r1, r7, #4
 800605e:	f107 0308 	add.w	r3, r7, #8
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fdfc 	bl	8004c60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	9202      	str	r2, [sp, #8]
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	2300      	movs	r3, #0
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	460a      	mov	r2, r1
 800607a:	4924      	ldr	r1, [pc, #144]	@ (800610c <vTaskStartScheduler+0xc0>)
 800607c:	4824      	ldr	r0, [pc, #144]	@ (8006110 <vTaskStartScheduler+0xc4>)
 800607e:	f7ff fdf1 	bl	8005c64 <xTaskCreateStatic>
 8006082:	4603      	mov	r3, r0
 8006084:	4a23      	ldr	r2, [pc, #140]	@ (8006114 <vTaskStartScheduler+0xc8>)
 8006086:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006088:	4b22      	ldr	r3, [pc, #136]	@ (8006114 <vTaskStartScheduler+0xc8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e001      	b.n	800609a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d102      	bne.n	80060a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060a0:	f000 fe1a 	bl	8006cd8 <xTimerCreateTimerTask>
 80060a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d11b      	bne.n	80060e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	613b      	str	r3, [r7, #16]
}
 80060be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060c0:	4b15      	ldr	r3, [pc, #84]	@ (8006118 <vTaskStartScheduler+0xcc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3354      	adds	r3, #84	@ 0x54
 80060c6:	4a15      	ldr	r2, [pc, #84]	@ (800611c <vTaskStartScheduler+0xd0>)
 80060c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060ca:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <vTaskStartScheduler+0xd4>)
 80060cc:	f04f 32ff 	mov.w	r2, #4294967295
 80060d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060d2:	4b14      	ldr	r3, [pc, #80]	@ (8006124 <vTaskStartScheduler+0xd8>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060d8:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <vTaskStartScheduler+0xdc>)
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060de:	f001 f9df 	bl	80074a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060e2:	e00f      	b.n	8006104 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d10b      	bne.n	8006104 <vTaskStartScheduler+0xb8>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60fb      	str	r3, [r7, #12]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <vTaskStartScheduler+0xb4>
}
 8006104:	bf00      	nop
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	08007e78 	.word	0x08007e78
 8006110:	0800675d 	.word	0x0800675d
 8006114:	20000f0c 	.word	0x20000f0c
 8006118:	20000a14 	.word	0x20000a14
 800611c:	20000014 	.word	0x20000014
 8006120:	20000f08 	.word	0x20000f08
 8006124:	20000ef4 	.word	0x20000ef4
 8006128:	20000eec 	.word	0x20000eec

0800612c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006130:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <vTaskSuspendAll+0x18>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3301      	adds	r3, #1
 8006136:	4a03      	ldr	r2, [pc, #12]	@ (8006144 <vTaskSuspendAll+0x18>)
 8006138:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800613a:	bf00      	nop
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	20000f10 	.word	0x20000f10

08006148 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006152:	2300      	movs	r3, #0
 8006154:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006156:	4b42      	ldr	r3, [pc, #264]	@ (8006260 <xTaskResumeAll+0x118>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10b      	bne.n	8006176 <xTaskResumeAll+0x2e>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	603b      	str	r3, [r7, #0]
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	e7fd      	b.n	8006172 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006176:	f001 fa37 	bl	80075e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800617a:	4b39      	ldr	r3, [pc, #228]	@ (8006260 <xTaskResumeAll+0x118>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3b01      	subs	r3, #1
 8006180:	4a37      	ldr	r2, [pc, #220]	@ (8006260 <xTaskResumeAll+0x118>)
 8006182:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006184:	4b36      	ldr	r3, [pc, #216]	@ (8006260 <xTaskResumeAll+0x118>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d162      	bne.n	8006252 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800618c:	4b35      	ldr	r3, [pc, #212]	@ (8006264 <xTaskResumeAll+0x11c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d05e      	beq.n	8006252 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006194:	e02f      	b.n	80061f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006196:	4b34      	ldr	r3, [pc, #208]	@ (8006268 <xTaskResumeAll+0x120>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3318      	adds	r3, #24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fe1a 	bl	8004ddc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fe15 	bl	8004ddc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b6:	4b2d      	ldr	r3, [pc, #180]	@ (800626c <xTaskResumeAll+0x124>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d903      	bls.n	80061c6 <xTaskResumeAll+0x7e>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	4a2a      	ldr	r2, [pc, #168]	@ (800626c <xTaskResumeAll+0x124>)
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4a27      	ldr	r2, [pc, #156]	@ (8006270 <xTaskResumeAll+0x128>)
 80061d4:	441a      	add	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3304      	adds	r3, #4
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f7fe fda0 	bl	8004d22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e6:	4b23      	ldr	r3, [pc, #140]	@ (8006274 <xTaskResumeAll+0x12c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80061f0:	4b21      	ldr	r3, [pc, #132]	@ (8006278 <xTaskResumeAll+0x130>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006268 <xTaskResumeAll+0x120>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1cb      	bne.n	8006196 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006204:	f000 fb66 	bl	80068d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006208:	4b1c      	ldr	r3, [pc, #112]	@ (800627c <xTaskResumeAll+0x134>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d010      	beq.n	8006236 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006214:	f000 f846 	bl	80062a4 <xTaskIncrementTick>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800621e:	4b16      	ldr	r3, [pc, #88]	@ (8006278 <xTaskResumeAll+0x130>)
 8006220:	2201      	movs	r2, #1
 8006222:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3b01      	subs	r3, #1
 8006228:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f1      	bne.n	8006214 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006230:	4b12      	ldr	r3, [pc, #72]	@ (800627c <xTaskResumeAll+0x134>)
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006236:	4b10      	ldr	r3, [pc, #64]	@ (8006278 <xTaskResumeAll+0x130>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d009      	beq.n	8006252 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006242:	4b0f      	ldr	r3, [pc, #60]	@ (8006280 <xTaskResumeAll+0x138>)
 8006244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006252:	f001 f9fb 	bl	800764c <vPortExitCritical>

	return xAlreadyYielded;
 8006256:	68bb      	ldr	r3, [r7, #8]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000f10 	.word	0x20000f10
 8006264:	20000ee8 	.word	0x20000ee8
 8006268:	20000ea8 	.word	0x20000ea8
 800626c:	20000ef0 	.word	0x20000ef0
 8006270:	20000a18 	.word	0x20000a18
 8006274:	20000a14 	.word	0x20000a14
 8006278:	20000efc 	.word	0x20000efc
 800627c:	20000ef8 	.word	0x20000ef8
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800628a:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <xTaskGetTickCount+0x1c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006290:	687b      	ldr	r3, [r7, #4]
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000eec 	.word	0x20000eec

080062a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ae:	4b4f      	ldr	r3, [pc, #316]	@ (80063ec <xTaskIncrementTick+0x148>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 8090 	bne.w	80063d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062b8:	4b4d      	ldr	r3, [pc, #308]	@ (80063f0 <xTaskIncrementTick+0x14c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3301      	adds	r3, #1
 80062be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062c0:	4a4b      	ldr	r2, [pc, #300]	@ (80063f0 <xTaskIncrementTick+0x14c>)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d121      	bne.n	8006310 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80062cc:	4b49      	ldr	r3, [pc, #292]	@ (80063f4 <xTaskIncrementTick+0x150>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00b      	beq.n	80062ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	603b      	str	r3, [r7, #0]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <xTaskIncrementTick+0x46>
 80062ee:	4b41      	ldr	r3, [pc, #260]	@ (80063f4 <xTaskIncrementTick+0x150>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	4b40      	ldr	r3, [pc, #256]	@ (80063f8 <xTaskIncrementTick+0x154>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a3e      	ldr	r2, [pc, #248]	@ (80063f4 <xTaskIncrementTick+0x150>)
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	4a3e      	ldr	r2, [pc, #248]	@ (80063f8 <xTaskIncrementTick+0x154>)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	4b3e      	ldr	r3, [pc, #248]	@ (80063fc <xTaskIncrementTick+0x158>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	4a3c      	ldr	r2, [pc, #240]	@ (80063fc <xTaskIncrementTick+0x158>)
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	f000 fae2 	bl	80068d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006310:	4b3b      	ldr	r3, [pc, #236]	@ (8006400 <xTaskIncrementTick+0x15c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	429a      	cmp	r2, r3
 8006318:	d349      	bcc.n	80063ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800631a:	4b36      	ldr	r3, [pc, #216]	@ (80063f4 <xTaskIncrementTick+0x150>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006324:	4b36      	ldr	r3, [pc, #216]	@ (8006400 <xTaskIncrementTick+0x15c>)
 8006326:	f04f 32ff 	mov.w	r2, #4294967295
 800632a:	601a      	str	r2, [r3, #0]
					break;
 800632c:	e03f      	b.n	80063ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632e:	4b31      	ldr	r3, [pc, #196]	@ (80063f4 <xTaskIncrementTick+0x150>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	429a      	cmp	r2, r3
 8006344:	d203      	bcs.n	800634e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006346:	4a2e      	ldr	r2, [pc, #184]	@ (8006400 <xTaskIncrementTick+0x15c>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800634c:	e02f      	b.n	80063ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	3304      	adds	r3, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fd42 	bl	8004ddc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	3318      	adds	r3, #24
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fd39 	bl	8004ddc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636e:	4b25      	ldr	r3, [pc, #148]	@ (8006404 <xTaskIncrementTick+0x160>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d903      	bls.n	800637e <xTaskIncrementTick+0xda>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637a:	4a22      	ldr	r2, [pc, #136]	@ (8006404 <xTaskIncrementTick+0x160>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a1f      	ldr	r2, [pc, #124]	@ (8006408 <xTaskIncrementTick+0x164>)
 800638c:	441a      	add	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f7fe fcc4 	bl	8004d22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639e:	4b1b      	ldr	r3, [pc, #108]	@ (800640c <xTaskIncrementTick+0x168>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3b8      	bcc.n	800631a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ac:	e7b5      	b.n	800631a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ae:	4b17      	ldr	r3, [pc, #92]	@ (800640c <xTaskIncrementTick+0x168>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063b4:	4914      	ldr	r1, [pc, #80]	@ (8006408 <xTaskIncrementTick+0x164>)
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d901      	bls.n	80063ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80063c6:	2301      	movs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063ca:	4b11      	ldr	r3, [pc, #68]	@ (8006410 <xTaskIncrementTick+0x16c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e004      	b.n	80063e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006414 <xTaskIncrementTick+0x170>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a0d      	ldr	r2, [pc, #52]	@ (8006414 <xTaskIncrementTick+0x170>)
 80063e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063e2:	697b      	ldr	r3, [r7, #20]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20000f10 	.word	0x20000f10
 80063f0:	20000eec 	.word	0x20000eec
 80063f4:	20000ea0 	.word	0x20000ea0
 80063f8:	20000ea4 	.word	0x20000ea4
 80063fc:	20000f00 	.word	0x20000f00
 8006400:	20000f08 	.word	0x20000f08
 8006404:	20000ef0 	.word	0x20000ef0
 8006408:	20000a18 	.word	0x20000a18
 800640c:	20000a14 	.word	0x20000a14
 8006410:	20000efc 	.word	0x20000efc
 8006414:	20000ef8 	.word	0x20000ef8

08006418 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800641e:	4b2b      	ldr	r3, [pc, #172]	@ (80064cc <vTaskSwitchContext+0xb4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006426:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <vTaskSwitchContext+0xb8>)
 8006428:	2201      	movs	r2, #1
 800642a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800642c:	e047      	b.n	80064be <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800642e:	4b28      	ldr	r3, [pc, #160]	@ (80064d0 <vTaskSwitchContext+0xb8>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006434:	4b27      	ldr	r3, [pc, #156]	@ (80064d4 <vTaskSwitchContext+0xbc>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	e011      	b.n	8006460 <vTaskSwitchContext+0x48>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <vTaskSwitchContext+0x42>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	607b      	str	r3, [r7, #4]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <vTaskSwitchContext+0x3e>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3b01      	subs	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	491d      	ldr	r1, [pc, #116]	@ (80064d8 <vTaskSwitchContext+0xc0>)
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0e3      	beq.n	800643c <vTaskSwitchContext+0x24>
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4a16      	ldr	r2, [pc, #88]	@ (80064d8 <vTaskSwitchContext+0xc0>)
 8006480:	4413      	add	r3, r2
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	3308      	adds	r3, #8
 8006496:	429a      	cmp	r2, r3
 8006498:	d104      	bne.n	80064a4 <vTaskSwitchContext+0x8c>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	4a0c      	ldr	r2, [pc, #48]	@ (80064dc <vTaskSwitchContext+0xc4>)
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	4a09      	ldr	r2, [pc, #36]	@ (80064d4 <vTaskSwitchContext+0xbc>)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064b4:	4b09      	ldr	r3, [pc, #36]	@ (80064dc <vTaskSwitchContext+0xc4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3354      	adds	r3, #84	@ 0x54
 80064ba:	4a09      	ldr	r2, [pc, #36]	@ (80064e0 <vTaskSwitchContext+0xc8>)
 80064bc:	6013      	str	r3, [r2, #0]
}
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000f10 	.word	0x20000f10
 80064d0:	20000efc 	.word	0x20000efc
 80064d4:	20000ef0 	.word	0x20000ef0
 80064d8:	20000a18 	.word	0x20000a18
 80064dc:	20000a14 	.word	0x20000a14
 80064e0:	20000014 	.word	0x20000014

080064e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10b      	bne.n	800650c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	60fb      	str	r3, [r7, #12]
}
 8006506:	bf00      	nop
 8006508:	bf00      	nop
 800650a:	e7fd      	b.n	8006508 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800650c:	4b07      	ldr	r3, [pc, #28]	@ (800652c <vTaskPlaceOnEventList+0x48>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3318      	adds	r3, #24
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fe fc28 	bl	8004d6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800651a:	2101      	movs	r1, #1
 800651c:	6838      	ldr	r0, [r7, #0]
 800651e:	f000 fb87 	bl	8006c30 <prvAddCurrentTaskToDelayedList>
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000a14 	.word	0x20000a14

08006530 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	617b      	str	r3, [r7, #20]
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	e7fd      	b.n	8006556 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800655a:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <vTaskPlaceOnEventListRestricted+0x54>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3318      	adds	r3, #24
 8006560:	4619      	mov	r1, r3
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f7fe fbdd 	bl	8004d22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800656e:	f04f 33ff 	mov.w	r3, #4294967295
 8006572:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	68b8      	ldr	r0, [r7, #8]
 8006578:	f000 fb5a 	bl	8006c30 <prvAddCurrentTaskToDelayedList>
	}
 800657c:	bf00      	nop
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000a14 	.word	0x20000a14

08006588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60fb      	str	r3, [r7, #12]
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	e7fd      	b.n	80065b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	3318      	adds	r3, #24
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fc0e 	bl	8004ddc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006638 <xTaskRemoveFromEventList+0xb0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11d      	bne.n	8006604 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe fc05 	bl	8004ddc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d6:	4b19      	ldr	r3, [pc, #100]	@ (800663c <xTaskRemoveFromEventList+0xb4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d903      	bls.n	80065e6 <xTaskRemoveFromEventList+0x5e>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	4a16      	ldr	r2, [pc, #88]	@ (800663c <xTaskRemoveFromEventList+0xb4>)
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ea:	4613      	mov	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4a13      	ldr	r2, [pc, #76]	@ (8006640 <xTaskRemoveFromEventList+0xb8>)
 80065f4:	441a      	add	r2, r3
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f7fe fb90 	bl	8004d22 <vListInsertEnd>
 8006602:	e005      	b.n	8006610 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3318      	adds	r3, #24
 8006608:	4619      	mov	r1, r3
 800660a:	480e      	ldr	r0, [pc, #56]	@ (8006644 <xTaskRemoveFromEventList+0xbc>)
 800660c:	f7fe fb89 	bl	8004d22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006614:	4b0c      	ldr	r3, [pc, #48]	@ (8006648 <xTaskRemoveFromEventList+0xc0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661a:	429a      	cmp	r2, r3
 800661c:	d905      	bls.n	800662a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006622:	4b0a      	ldr	r3, [pc, #40]	@ (800664c <xTaskRemoveFromEventList+0xc4>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	e001      	b.n	800662e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800662e:	697b      	ldr	r3, [r7, #20]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000f10 	.word	0x20000f10
 800663c:	20000ef0 	.word	0x20000ef0
 8006640:	20000a18 	.word	0x20000a18
 8006644:	20000ea8 	.word	0x20000ea8
 8006648:	20000a14 	.word	0x20000a14
 800664c:	20000efc 	.word	0x20000efc

08006650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <vTaskInternalSetTimeOutState+0x24>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006660:	4b05      	ldr	r3, [pc, #20]	@ (8006678 <vTaskInternalSetTimeOutState+0x28>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	20000f00 	.word	0x20000f00
 8006678:	20000eec 	.word	0x20000eec

0800667c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10b      	bne.n	80066a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	613b      	str	r3, [r7, #16]
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	e7fd      	b.n	80066a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60fb      	str	r3, [r7, #12]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80066c2:	f000 ff91 	bl	80075e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066c6:	4b1d      	ldr	r3, [pc, #116]	@ (800673c <xTaskCheckForTimeOut+0xc0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d102      	bne.n	80066e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e023      	b.n	800672e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	4b15      	ldr	r3, [pc, #84]	@ (8006740 <xTaskCheckForTimeOut+0xc4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d007      	beq.n	8006702 <xTaskCheckForTimeOut+0x86>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d302      	bcc.n	8006702 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066fc:	2301      	movs	r3, #1
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	e015      	b.n	800672e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	429a      	cmp	r2, r3
 800670a:	d20b      	bcs.n	8006724 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1ad2      	subs	r2, r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ff99 	bl	8006650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	e004      	b.n	800672e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800672a:	2301      	movs	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800672e:	f000 ff8d 	bl	800764c <vPortExitCritical>

	return xReturn;
 8006732:	69fb      	ldr	r3, [r7, #28]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000eec 	.word	0x20000eec
 8006740:	20000f00 	.word	0x20000f00

08006744 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006748:	4b03      	ldr	r3, [pc, #12]	@ (8006758 <vTaskMissedYield+0x14>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	20000efc 	.word	0x20000efc

0800675c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006764:	f000 f852 	bl	800680c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006768:	4b06      	ldr	r3, [pc, #24]	@ (8006784 <prvIdleTask+0x28>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d9f9      	bls.n	8006764 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006770:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <prvIdleTask+0x2c>)
 8006772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006780:	e7f0      	b.n	8006764 <prvIdleTask+0x8>
 8006782:	bf00      	nop
 8006784:	20000a18 	.word	0x20000a18
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006792:	2300      	movs	r3, #0
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	e00c      	b.n	80067b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4a12      	ldr	r2, [pc, #72]	@ (80067ec <prvInitialiseTaskLists+0x60>)
 80067a4:	4413      	add	r3, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe fa8e 	bl	8004cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3301      	adds	r3, #1
 80067b0:	607b      	str	r3, [r7, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b37      	cmp	r3, #55	@ 0x37
 80067b6:	d9ef      	bls.n	8006798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067b8:	480d      	ldr	r0, [pc, #52]	@ (80067f0 <prvInitialiseTaskLists+0x64>)
 80067ba:	f7fe fa85 	bl	8004cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067be:	480d      	ldr	r0, [pc, #52]	@ (80067f4 <prvInitialiseTaskLists+0x68>)
 80067c0:	f7fe fa82 	bl	8004cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067c4:	480c      	ldr	r0, [pc, #48]	@ (80067f8 <prvInitialiseTaskLists+0x6c>)
 80067c6:	f7fe fa7f 	bl	8004cc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ca:	480c      	ldr	r0, [pc, #48]	@ (80067fc <prvInitialiseTaskLists+0x70>)
 80067cc:	f7fe fa7c 	bl	8004cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067d0:	480b      	ldr	r0, [pc, #44]	@ (8006800 <prvInitialiseTaskLists+0x74>)
 80067d2:	f7fe fa79 	bl	8004cc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <prvInitialiseTaskLists+0x78>)
 80067d8:	4a05      	ldr	r2, [pc, #20]	@ (80067f0 <prvInitialiseTaskLists+0x64>)
 80067da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <prvInitialiseTaskLists+0x7c>)
 80067de:	4a05      	ldr	r2, [pc, #20]	@ (80067f4 <prvInitialiseTaskLists+0x68>)
 80067e0:	601a      	str	r2, [r3, #0]
}
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000a18 	.word	0x20000a18
 80067f0:	20000e78 	.word	0x20000e78
 80067f4:	20000e8c 	.word	0x20000e8c
 80067f8:	20000ea8 	.word	0x20000ea8
 80067fc:	20000ebc 	.word	0x20000ebc
 8006800:	20000ed4 	.word	0x20000ed4
 8006804:	20000ea0 	.word	0x20000ea0
 8006808:	20000ea4 	.word	0x20000ea4

0800680c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006812:	e019      	b.n	8006848 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006814:	f000 fee8 	bl	80075e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006818:	4b10      	ldr	r3, [pc, #64]	@ (800685c <prvCheckTasksWaitingTermination+0x50>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fad9 	bl	8004ddc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800682a:	4b0d      	ldr	r3, [pc, #52]	@ (8006860 <prvCheckTasksWaitingTermination+0x54>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3b01      	subs	r3, #1
 8006830:	4a0b      	ldr	r2, [pc, #44]	@ (8006860 <prvCheckTasksWaitingTermination+0x54>)
 8006832:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006834:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <prvCheckTasksWaitingTermination+0x58>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3b01      	subs	r3, #1
 800683a:	4a0a      	ldr	r2, [pc, #40]	@ (8006864 <prvCheckTasksWaitingTermination+0x58>)
 800683c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800683e:	f000 ff05 	bl	800764c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f810 	bl	8006868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006848:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <prvCheckTasksWaitingTermination+0x58>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e1      	bne.n	8006814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000ebc 	.word	0x20000ebc
 8006860:	20000ee8 	.word	0x20000ee8
 8006864:	20000ed0 	.word	0x20000ed0

08006868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3354      	adds	r3, #84	@ 0x54
 8006874:	4618      	mov	r0, r3
 8006876:	f001 f9df 	bl	8007c38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006880:	2b00      	cmp	r3, #0
 8006882:	d108      	bne.n	8006896 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	4618      	mov	r0, r3
 800688a:	f001 f89d 	bl	80079c8 <vPortFree>
				vPortFree( pxTCB );
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 f89a 	bl	80079c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006894:	e019      	b.n	80068ca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800689c:	2b01      	cmp	r3, #1
 800689e:	d103      	bne.n	80068a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f891 	bl	80079c8 <vPortFree>
	}
 80068a6:	e010      	b.n	80068ca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d00b      	beq.n	80068ca <prvDeleteTCB+0x62>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	60fb      	str	r3, [r7, #12]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <prvDeleteTCB+0x5e>
	}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068da:	4b0c      	ldr	r3, [pc, #48]	@ (800690c <prvResetNextTaskUnblockTime+0x38>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006910 <prvResetNextTaskUnblockTime+0x3c>)
 80068e6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068ec:	e008      	b.n	8006900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ee:	4b07      	ldr	r3, [pc, #28]	@ (800690c <prvResetNextTaskUnblockTime+0x38>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4a04      	ldr	r2, [pc, #16]	@ (8006910 <prvResetNextTaskUnblockTime+0x3c>)
 80068fe:	6013      	str	r3, [r2, #0]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	20000ea0 	.word	0x20000ea0
 8006910:	20000f08 	.word	0x20000f08

08006914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800691a:	4b0b      	ldr	r3, [pc, #44]	@ (8006948 <xTaskGetSchedulerState+0x34>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006922:	2301      	movs	r3, #1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	e008      	b.n	800693a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006928:	4b08      	ldr	r3, [pc, #32]	@ (800694c <xTaskGetSchedulerState+0x38>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006930:	2302      	movs	r3, #2
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	e001      	b.n	800693a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006936:	2300      	movs	r3, #0
 8006938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800693a:	687b      	ldr	r3, [r7, #4]
	}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	20000ef4 	.word	0x20000ef4
 800694c:	20000f10 	.word	0x20000f10

08006950 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d051      	beq.n	8006a0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a14 <xTaskPriorityInherit+0xc4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	429a      	cmp	r2, r3
 8006972:	d241      	bcs.n	80069f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	db06      	blt.n	800698a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697c:	4b25      	ldr	r3, [pc, #148]	@ (8006a14 <xTaskPriorityInherit+0xc4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006982:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6959      	ldr	r1, [r3, #20]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a1f      	ldr	r2, [pc, #124]	@ (8006a18 <xTaskPriorityInherit+0xc8>)
 800699c:	4413      	add	r3, r2
 800699e:	4299      	cmp	r1, r3
 80069a0:	d122      	bne.n	80069e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fa18 	bl	8004ddc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069ac:	4b19      	ldr	r3, [pc, #100]	@ (8006a14 <xTaskPriorityInherit+0xc4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ba:	4b18      	ldr	r3, [pc, #96]	@ (8006a1c <xTaskPriorityInherit+0xcc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d903      	bls.n	80069ca <xTaskPriorityInherit+0x7a>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <xTaskPriorityInherit+0xcc>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4a10      	ldr	r2, [pc, #64]	@ (8006a18 <xTaskPriorityInherit+0xc8>)
 80069d8:	441a      	add	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fe f99e 	bl	8004d22 <vListInsertEnd>
 80069e6:	e004      	b.n	80069f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006a14 <xTaskPriorityInherit+0xc4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80069f2:	2301      	movs	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e008      	b.n	8006a0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069fc:	4b05      	ldr	r3, [pc, #20]	@ (8006a14 <xTaskPriorityInherit+0xc4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d201      	bcs.n	8006a0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000a14 	.word	0x20000a14
 8006a18:	20000a18 	.word	0x20000a18
 8006a1c:	20000ef0 	.word	0x20000ef0

08006a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d058      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a36:	4b2f      	ldr	r3, [pc, #188]	@ (8006af4 <xTaskPriorityDisinherit+0xd4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d00b      	beq.n	8006a58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10b      	bne.n	8006a78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60bb      	str	r3, [r7, #8]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7c:	1e5a      	subs	r2, r3, #1
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d02c      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d128      	bne.n	8006ae8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe f99e 	bl	8004ddc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <xTaskPriorityDisinherit+0xd8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <xTaskPriorityDisinherit+0xa8>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8006af8 <xTaskPriorityDisinherit+0xd8>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a09      	ldr	r2, [pc, #36]	@ (8006afc <xTaskPriorityDisinherit+0xdc>)
 8006ad6:	441a      	add	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fe f91f 	bl	8004d22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ae8:	697b      	ldr	r3, [r7, #20]
	}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000a14 	.word	0x20000a14
 8006af8:	20000ef0 	.word	0x20000ef0
 8006afc:	20000a18 	.word	0x20000a18

08006b00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d06c      	beq.n	8006bf2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10b      	bne.n	8006b38 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	60fb      	str	r3, [r7, #12]
}
 8006b32:	bf00      	nop
 8006b34:	bf00      	nop
 8006b36:	e7fd      	b.n	8006b34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d902      	bls.n	8006b48 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	e002      	b.n	8006b4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d04c      	beq.n	8006bf2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d147      	bne.n	8006bf2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b62:	4b26      	ldr	r3, [pc, #152]	@ (8006bfc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d10b      	bne.n	8006b84 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	60bb      	str	r3, [r7, #8]
}
 8006b7e:	bf00      	nop
 8006b80:	bf00      	nop
 8006b82:	e7fd      	b.n	8006b80 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	db04      	blt.n	8006ba2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4a13      	ldr	r2, [pc, #76]	@ (8006c00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d11c      	bne.n	8006bf2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe f90d 	bl	8004ddc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d903      	bls.n	8006bd6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4a07      	ldr	r2, [pc, #28]	@ (8006c00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006be4:	441a      	add	r2, r3
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f7fe f898 	bl	8004d22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bf2:	bf00      	nop
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000a14 	.word	0x20000a14
 8006c00:	20000a18 	.word	0x20000a18
 8006c04:	20000ef0 	.word	0x20000ef0

08006c08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c0c:	4b07      	ldr	r3, [pc, #28]	@ (8006c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c14:	4b05      	ldr	r3, [pc, #20]	@ (8006c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c1a:	3201      	adds	r2, #1
 8006c1c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006c1e:	4b03      	ldr	r3, [pc, #12]	@ (8006c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8006c20:	681b      	ldr	r3, [r3, #0]
	}
 8006c22:	4618      	mov	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	20000a14 	.word	0x20000a14

08006c30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c3a:	4b21      	ldr	r3, [pc, #132]	@ (8006cc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c40:	4b20      	ldr	r3, [pc, #128]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe f8c8 	bl	8004ddc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d10a      	bne.n	8006c6a <prvAddCurrentTaskToDelayedList+0x3a>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4819      	ldr	r0, [pc, #100]	@ (8006cc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c64:	f7fe f85d 	bl	8004d22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c68:	e026      	b.n	8006cb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4413      	add	r3, r2
 8006c70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c72:	4b14      	ldr	r3, [pc, #80]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d209      	bcs.n	8006c96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c82:	4b12      	ldr	r3, [pc, #72]	@ (8006ccc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7fe f86b 	bl	8004d6a <vListInsert>
}
 8006c94:	e010      	b.n	8006cb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c96:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f7fe f861 	bl	8004d6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d202      	bcs.n	8006cb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cb2:	4a08      	ldr	r2, [pc, #32]	@ (8006cd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6013      	str	r3, [r2, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000eec 	.word	0x20000eec
 8006cc4:	20000a14 	.word	0x20000a14
 8006cc8:	20000ed4 	.word	0x20000ed4
 8006ccc:	20000ea4 	.word	0x20000ea4
 8006cd0:	20000ea0 	.word	0x20000ea0
 8006cd4:	20000f08 	.word	0x20000f08

08006cd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	@ 0x28
 8006cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ce2:	f000 fb13 	bl	800730c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d5c <xTimerCreateTimerTask+0x84>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d021      	beq.n	8006d32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cf6:	1d3a      	adds	r2, r7, #4
 8006cf8:	f107 0108 	add.w	r1, r7, #8
 8006cfc:	f107 030c 	add.w	r3, r7, #12
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fd ffc7 	bl	8004c94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	9202      	str	r2, [sp, #8]
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	2302      	movs	r3, #2
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	2300      	movs	r3, #0
 8006d16:	460a      	mov	r2, r1
 8006d18:	4911      	ldr	r1, [pc, #68]	@ (8006d60 <xTimerCreateTimerTask+0x88>)
 8006d1a:	4812      	ldr	r0, [pc, #72]	@ (8006d64 <xTimerCreateTimerTask+0x8c>)
 8006d1c:	f7fe ffa2 	bl	8005c64 <xTaskCreateStatic>
 8006d20:	4603      	mov	r3, r0
 8006d22:	4a11      	ldr	r2, [pc, #68]	@ (8006d68 <xTimerCreateTimerTask+0x90>)
 8006d24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d26:	4b10      	ldr	r3, [pc, #64]	@ (8006d68 <xTimerCreateTimerTask+0x90>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10b      	bne.n	8006d50 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	613b      	str	r3, [r7, #16]
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d50:	697b      	ldr	r3, [r7, #20]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000f44 	.word	0x20000f44
 8006d60:	08007e80 	.word	0x08007e80
 8006d64:	08006ea5 	.word	0x08006ea5
 8006d68:	20000f48 	.word	0x20000f48

08006d6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	@ 0x28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <xTimerGenericCommand+0x30>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	623b      	str	r3, [r7, #32]
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d9c:	4b19      	ldr	r3, [pc, #100]	@ (8006e04 <xTimerGenericCommand+0x98>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02a      	beq.n	8006dfa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	dc18      	bgt.n	8006de8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006db6:	f7ff fdad 	bl	8006914 <xTaskGetSchedulerState>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d109      	bne.n	8006dd4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dc0:	4b10      	ldr	r3, [pc, #64]	@ (8006e04 <xTimerGenericCommand+0x98>)
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	f107 0110 	add.w	r1, r7, #16
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dcc:	f7fe f9e4 	bl	8005198 <xQueueGenericSend>
 8006dd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dd2:	e012      	b.n	8006dfa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <xTimerGenericCommand+0x98>)
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	f107 0110 	add.w	r1, r7, #16
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	f7fe f9da 	bl	8005198 <xQueueGenericSend>
 8006de4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006de6:	e008      	b.n	8006dfa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006de8:	4b06      	ldr	r3, [pc, #24]	@ (8006e04 <xTimerGenericCommand+0x98>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	f107 0110 	add.w	r1, r7, #16
 8006df0:	2300      	movs	r3, #0
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	f7fe fad2 	bl	800539c <xQueueGenericSendFromISR>
 8006df8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3728      	adds	r7, #40	@ 0x28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000f44 	.word	0x20000f44

08006e08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e12:	4b23      	ldr	r3, [pc, #140]	@ (8006ea0 <prvProcessExpiredTimer+0x98>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fd ffdb 	bl	8004ddc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d023      	beq.n	8006e7c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	18d1      	adds	r1, r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	6978      	ldr	r0, [r7, #20]
 8006e42:	f000 f8d5 	bl	8006ff0 <prvInsertTimerInActiveList>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d020      	beq.n	8006e8e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2300      	movs	r3, #0
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	2100      	movs	r1, #0
 8006e56:	6978      	ldr	r0, [r7, #20]
 8006e58:	f7ff ff88 	bl	8006d6c <xTimerGenericCommand>
 8006e5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d114      	bne.n	8006e8e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	60fb      	str	r3, [r7, #12]
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	6978      	ldr	r0, [r7, #20]
 8006e94:	4798      	blx	r3
}
 8006e96:	bf00      	nop
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000f3c 	.word	0x20000f3c

08006ea4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eac:	f107 0308 	add.w	r3, r7, #8
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 f859 	bl	8006f68 <prvGetNextExpireTime>
 8006eb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f805 	bl	8006ecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ec2:	f000 f8d7 	bl	8007074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ec6:	bf00      	nop
 8006ec8:	e7f0      	b.n	8006eac <prvTimerTask+0x8>
	...

08006ecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ed6:	f7ff f929 	bl	800612c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f866 	bl	8006fb0 <prvSampleTimeNow>
 8006ee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d130      	bne.n	8006f4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <prvProcessTimerOrBlockTask+0x3c>
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d806      	bhi.n	8006f08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006efa:	f7ff f925 	bl	8006148 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff ff81 	bl	8006e08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f06:	e024      	b.n	8006f52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f0e:	4b13      	ldr	r3, [pc, #76]	@ (8006f5c <prvProcessTimerOrBlockTask+0x90>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <prvProcessTimerOrBlockTask+0x50>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <prvProcessTimerOrBlockTask+0x52>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f20:	4b0f      	ldr	r3, [pc, #60]	@ (8006f60 <prvProcessTimerOrBlockTask+0x94>)
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f7fe fe65 	bl	8005bfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f32:	f7ff f909 	bl	8006148 <xTaskResumeAll>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f3c:	4b09      	ldr	r3, [pc, #36]	@ (8006f64 <prvProcessTimerOrBlockTask+0x98>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
}
 8006f4c:	e001      	b.n	8006f52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f4e:	f7ff f8fb 	bl	8006148 <xTaskResumeAll>
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000f40 	.word	0x20000f40
 8006f60:	20000f44 	.word	0x20000f44
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f70:	4b0e      	ldr	r3, [pc, #56]	@ (8006fac <prvGetNextExpireTime+0x44>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <prvGetNextExpireTime+0x16>
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	e000      	b.n	8006f80 <prvGetNextExpireTime+0x18>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f8c:	4b07      	ldr	r3, [pc, #28]	@ (8006fac <prvGetNextExpireTime+0x44>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e001      	b.n	8006f9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000f3c 	.word	0x20000f3c

08006fb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fb8:	f7ff f964 	bl	8006284 <xTaskGetTickCount>
 8006fbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006fec <prvSampleTimeNow+0x3c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d205      	bcs.n	8006fd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fc8:	f000 f93a 	bl	8007240 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e002      	b.n	8006fda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fda:	4a04      	ldr	r2, [pc, #16]	@ (8006fec <prvSampleTimeNow+0x3c>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000f4c 	.word	0x20000f4c

08006ff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d812      	bhi.n	800703c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	1ad2      	subs	r2, r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	429a      	cmp	r2, r3
 8007022:	d302      	bcc.n	800702a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007024:	2301      	movs	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e01b      	b.n	8007062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800702a:	4b10      	ldr	r3, [pc, #64]	@ (800706c <prvInsertTimerInActiveList+0x7c>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fd fe98 	bl	8004d6a <vListInsert>
 800703a:	e012      	b.n	8007062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d206      	bcs.n	8007052 <prvInsertTimerInActiveList+0x62>
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e007      	b.n	8007062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007052:	4b07      	ldr	r3, [pc, #28]	@ (8007070 <prvInsertTimerInActiveList+0x80>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fd fe84 	bl	8004d6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007062:	697b      	ldr	r3, [r7, #20]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000f40 	.word	0x20000f40
 8007070:	20000f3c 	.word	0x20000f3c

08007074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08e      	sub	sp, #56	@ 0x38
 8007078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800707a:	e0ce      	b.n	800721a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	da19      	bge.n	80070b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	3304      	adds	r3, #4
 8007086:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10b      	bne.n	80070a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	61fb      	str	r3, [r7, #28]
}
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	e7fd      	b.n	80070a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ac:	6850      	ldr	r0, [r2, #4]
 80070ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b0:	6892      	ldr	r2, [r2, #8]
 80070b2:	4611      	mov	r1, r2
 80070b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f2c0 80ae 	blt.w	800721a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd fe84 	bl	8004ddc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070d4:	463b      	mov	r3, r7
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ff6a 	bl	8006fb0 <prvSampleTimeNow>
 80070dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	f200 8097 	bhi.w	8007214 <prvProcessReceivedCommands+0x1a0>
 80070e6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <prvProcessReceivedCommands+0x78>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007115 	.word	0x08007115
 80070f0:	08007115 	.word	0x08007115
 80070f4:	08007115 	.word	0x08007115
 80070f8:	0800718b 	.word	0x0800718b
 80070fc:	0800719f 	.word	0x0800719f
 8007100:	080071eb 	.word	0x080071eb
 8007104:	08007115 	.word	0x08007115
 8007108:	08007115 	.word	0x08007115
 800710c:	0800718b 	.word	0x0800718b
 8007110:	0800719f 	.word	0x0800719f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007134:	f7ff ff5c 	bl	8006ff0 <prvInsertTimerInActiveList>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d06c      	beq.n	8007218 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d061      	beq.n	8007218 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	441a      	add	r2, r3
 800715c:	2300      	movs	r3, #0
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	2300      	movs	r3, #0
 8007162:	2100      	movs	r1, #0
 8007164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007166:	f7ff fe01 	bl	8006d6c <xTimerGenericCommand>
 800716a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d152      	bne.n	8007218 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	61bb      	str	r3, [r7, #24]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800718a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800719c:	e03d      	b.n	800721a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	617b      	str	r3, [r7, #20]
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	e7fd      	b.n	80071d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	18d1      	adds	r1, r2, r3
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071e4:	f7ff ff04 	bl	8006ff0 <prvInsertTimerInActiveList>
					break;
 80071e8:	e017      	b.n	800721a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80071f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071fa:	f000 fbe5 	bl	80079c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071fe:	e00c      	b.n	800721a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	b2da      	uxtb	r2, r3
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007212:	e002      	b.n	800721a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007214:	bf00      	nop
 8007216:	e000      	b.n	800721a <prvProcessReceivedCommands+0x1a6>
					break;
 8007218:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800721a:	4b08      	ldr	r3, [pc, #32]	@ (800723c <prvProcessReceivedCommands+0x1c8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	1d39      	adds	r1, r7, #4
 8007220:	2200      	movs	r2, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe f958 	bl	80054d8 <xQueueReceive>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	f47f af26 	bne.w	800707c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	3730      	adds	r7, #48	@ 0x30
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000f44 	.word	0x20000f44

08007240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007246:	e049      	b.n	80072dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007248:	4b2e      	ldr	r3, [pc, #184]	@ (8007304 <prvSwitchTimerLists+0xc4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007252:	4b2c      	ldr	r3, [pc, #176]	@ (8007304 <prvSwitchTimerLists+0xc4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3304      	adds	r3, #4
 8007260:	4618      	mov	r0, r3
 8007262:	f7fd fdbb 	bl	8004ddc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d02f      	beq.n	80072dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	429a      	cmp	r2, r3
 800728c:	d90e      	bls.n	80072ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800729a:	4b1a      	ldr	r3, [pc, #104]	@ (8007304 <prvSwitchTimerLists+0xc4>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f7fd fd60 	bl	8004d6a <vListInsert>
 80072aa:	e017      	b.n	80072dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072ac:	2300      	movs	r3, #0
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	2100      	movs	r1, #0
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff fd58 	bl	8006d6c <xTimerGenericCommand>
 80072bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10b      	bne.n	80072dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	603b      	str	r3, [r7, #0]
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	e7fd      	b.n	80072d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072dc:	4b09      	ldr	r3, [pc, #36]	@ (8007304 <prvSwitchTimerLists+0xc4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1b0      	bne.n	8007248 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072e6:	4b07      	ldr	r3, [pc, #28]	@ (8007304 <prvSwitchTimerLists+0xc4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <prvSwitchTimerLists+0xc8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a04      	ldr	r2, [pc, #16]	@ (8007304 <prvSwitchTimerLists+0xc4>)
 80072f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072f4:	4a04      	ldr	r2, [pc, #16]	@ (8007308 <prvSwitchTimerLists+0xc8>)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	6013      	str	r3, [r2, #0]
}
 80072fa:	bf00      	nop
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20000f3c 	.word	0x20000f3c
 8007308:	20000f40 	.word	0x20000f40

0800730c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007312:	f000 f969 	bl	80075e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007316:	4b15      	ldr	r3, [pc, #84]	@ (800736c <prvCheckForValidListAndQueue+0x60>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d120      	bne.n	8007360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800731e:	4814      	ldr	r0, [pc, #80]	@ (8007370 <prvCheckForValidListAndQueue+0x64>)
 8007320:	f7fd fcd2 	bl	8004cc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007324:	4813      	ldr	r0, [pc, #76]	@ (8007374 <prvCheckForValidListAndQueue+0x68>)
 8007326:	f7fd fccf 	bl	8004cc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800732a:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <prvCheckForValidListAndQueue+0x6c>)
 800732c:	4a10      	ldr	r2, [pc, #64]	@ (8007370 <prvCheckForValidListAndQueue+0x64>)
 800732e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007330:	4b12      	ldr	r3, [pc, #72]	@ (800737c <prvCheckForValidListAndQueue+0x70>)
 8007332:	4a10      	ldr	r2, [pc, #64]	@ (8007374 <prvCheckForValidListAndQueue+0x68>)
 8007334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007336:	2300      	movs	r3, #0
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4b11      	ldr	r3, [pc, #68]	@ (8007380 <prvCheckForValidListAndQueue+0x74>)
 800733c:	4a11      	ldr	r2, [pc, #68]	@ (8007384 <prvCheckForValidListAndQueue+0x78>)
 800733e:	2110      	movs	r1, #16
 8007340:	200a      	movs	r0, #10
 8007342:	f7fd fddf 	bl	8004f04 <xQueueGenericCreateStatic>
 8007346:	4603      	mov	r3, r0
 8007348:	4a08      	ldr	r2, [pc, #32]	@ (800736c <prvCheckForValidListAndQueue+0x60>)
 800734a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800734c:	4b07      	ldr	r3, [pc, #28]	@ (800736c <prvCheckForValidListAndQueue+0x60>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007354:	4b05      	ldr	r3, [pc, #20]	@ (800736c <prvCheckForValidListAndQueue+0x60>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	490b      	ldr	r1, [pc, #44]	@ (8007388 <prvCheckForValidListAndQueue+0x7c>)
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fbfa 	bl	8005b54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007360:	f000 f974 	bl	800764c <vPortExitCritical>
}
 8007364:	bf00      	nop
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000f44 	.word	0x20000f44
 8007370:	20000f14 	.word	0x20000f14
 8007374:	20000f28 	.word	0x20000f28
 8007378:	20000f3c 	.word	0x20000f3c
 800737c:	20000f40 	.word	0x20000f40
 8007380:	20000ff0 	.word	0x20000ff0
 8007384:	20000f50 	.word	0x20000f50
 8007388:	08007e88 	.word	0x08007e88

0800738c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3b04      	subs	r3, #4
 800739c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3b04      	subs	r3, #4
 80073aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3b04      	subs	r3, #4
 80073ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073bc:	4a0c      	ldr	r2, [pc, #48]	@ (80073f0 <pxPortInitialiseStack+0x64>)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3b14      	subs	r3, #20
 80073c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f06f 0202 	mvn.w	r2, #2
 80073da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3b20      	subs	r3, #32
 80073e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073e2:	68fb      	ldr	r3, [r7, #12]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	080073f5 	.word	0x080073f5

080073f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073fe:	4b13      	ldr	r3, [pc, #76]	@ (800744c <prvTaskExitError+0x58>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d00b      	beq.n	8007420 <prvTaskExitError+0x2c>
	__asm volatile
 8007408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	60fb      	str	r3, [r7, #12]
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	e7fd      	b.n	800741c <prvTaskExitError+0x28>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60bb      	str	r3, [r7, #8]
}
 8007432:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007434:	bf00      	nop
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0fc      	beq.n	8007436 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	20000010 	.word	0x20000010

08007450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007450:	4b07      	ldr	r3, [pc, #28]	@ (8007470 <pxCurrentTCBConst2>)
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	6808      	ldr	r0, [r1, #0]
 8007456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745a:	f380 8809 	msr	PSP, r0
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8811 	msr	BASEPRI, r0
 800746a:	4770      	bx	lr
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst2>:
 8007470:	20000a14 	.word	0x20000a14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007478:	4808      	ldr	r0, [pc, #32]	@ (800749c <prvPortStartFirstTask+0x24>)
 800747a:	6800      	ldr	r0, [r0, #0]
 800747c:	6800      	ldr	r0, [r0, #0]
 800747e:	f380 8808 	msr	MSP, r0
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8814 	msr	CONTROL, r0
 800748a:	b662      	cpsie	i
 800748c:	b661      	cpsie	f
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	df00      	svc	0
 8007498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800749a:	bf00      	nop
 800749c:	e000ed08 	.word	0xe000ed08

080074a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074a6:	4b47      	ldr	r3, [pc, #284]	@ (80075c4 <xPortStartScheduler+0x124>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a47      	ldr	r2, [pc, #284]	@ (80075c8 <xPortStartScheduler+0x128>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10b      	bne.n	80074c8 <xPortStartScheduler+0x28>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	613b      	str	r3, [r7, #16]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074c8:	4b3e      	ldr	r3, [pc, #248]	@ (80075c4 <xPortStartScheduler+0x124>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a3f      	ldr	r2, [pc, #252]	@ (80075cc <xPortStartScheduler+0x12c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10b      	bne.n	80074ea <xPortStartScheduler+0x4a>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	60fb      	str	r3, [r7, #12]
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074ea:	4b39      	ldr	r3, [pc, #228]	@ (80075d0 <xPortStartScheduler+0x130>)
 80074ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	22ff      	movs	r2, #255	@ 0xff
 80074fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007504:	78fb      	ldrb	r3, [r7, #3]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800750c:	b2da      	uxtb	r2, r3
 800750e:	4b31      	ldr	r3, [pc, #196]	@ (80075d4 <xPortStartScheduler+0x134>)
 8007510:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007512:	4b31      	ldr	r3, [pc, #196]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007514:	2207      	movs	r2, #7
 8007516:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007518:	e009      	b.n	800752e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800751a:	4b2f      	ldr	r3, [pc, #188]	@ (80075d8 <xPortStartScheduler+0x138>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3b01      	subs	r3, #1
 8007520:	4a2d      	ldr	r2, [pc, #180]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007522:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007536:	2b80      	cmp	r3, #128	@ 0x80
 8007538:	d0ef      	beq.n	800751a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800753a:	4b27      	ldr	r3, [pc, #156]	@ (80075d8 <xPortStartScheduler+0x138>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1c3 0307 	rsb	r3, r3, #7
 8007542:	2b04      	cmp	r3, #4
 8007544:	d00b      	beq.n	800755e <xPortStartScheduler+0xbe>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800755e:	4b1e      	ldr	r3, [pc, #120]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	4a1c      	ldr	r2, [pc, #112]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007568:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <xPortStartScheduler+0x138>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007570:	4a19      	ldr	r2, [pc, #100]	@ (80075d8 <xPortStartScheduler+0x138>)
 8007572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	b2da      	uxtb	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800757c:	4b17      	ldr	r3, [pc, #92]	@ (80075dc <xPortStartScheduler+0x13c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a16      	ldr	r2, [pc, #88]	@ (80075dc <xPortStartScheduler+0x13c>)
 8007582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007588:	4b14      	ldr	r3, [pc, #80]	@ (80075dc <xPortStartScheduler+0x13c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a13      	ldr	r2, [pc, #76]	@ (80075dc <xPortStartScheduler+0x13c>)
 800758e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007594:	f000 f8da 	bl	800774c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007598:	4b11      	ldr	r3, [pc, #68]	@ (80075e0 <xPortStartScheduler+0x140>)
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800759e:	f000 f8f9 	bl	8007794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075a2:	4b10      	ldr	r3, [pc, #64]	@ (80075e4 <xPortStartScheduler+0x144>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a0f      	ldr	r2, [pc, #60]	@ (80075e4 <xPortStartScheduler+0x144>)
 80075a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075ae:	f7ff ff63 	bl	8007478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075b2:	f7fe ff31 	bl	8006418 <vTaskSwitchContext>
	prvTaskExitError();
 80075b6:	f7ff ff1d 	bl	80073f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	e000ed00 	.word	0xe000ed00
 80075c8:	410fc271 	.word	0x410fc271
 80075cc:	410fc270 	.word	0x410fc270
 80075d0:	e000e400 	.word	0xe000e400
 80075d4:	20001040 	.word	0x20001040
 80075d8:	20001044 	.word	0x20001044
 80075dc:	e000ed20 	.word	0xe000ed20
 80075e0:	20000010 	.word	0x20000010
 80075e4:	e000ef34 	.word	0xe000ef34

080075e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	607b      	str	r3, [r7, #4]
}
 8007600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007602:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <vPortEnterCritical+0x5c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	4a0e      	ldr	r2, [pc, #56]	@ (8007644 <vPortEnterCritical+0x5c>)
 800760a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800760c:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <vPortEnterCritical+0x5c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d110      	bne.n	8007636 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007614:	4b0c      	ldr	r3, [pc, #48]	@ (8007648 <vPortEnterCritical+0x60>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <vPortEnterCritical+0x4e>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	603b      	str	r3, [r7, #0]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <vPortEnterCritical+0x4a>
	}
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000010 	.word	0x20000010
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007652:	4b12      	ldr	r3, [pc, #72]	@ (800769c <vPortExitCritical+0x50>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <vPortExitCritical+0x26>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	607b      	str	r3, [r7, #4]
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	e7fd      	b.n	800766e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007672:	4b0a      	ldr	r3, [pc, #40]	@ (800769c <vPortExitCritical+0x50>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3b01      	subs	r3, #1
 8007678:	4a08      	ldr	r2, [pc, #32]	@ (800769c <vPortExitCritical+0x50>)
 800767a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800767c:	4b07      	ldr	r3, [pc, #28]	@ (800769c <vPortExitCritical+0x50>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d105      	bne.n	8007690 <vPortExitCritical+0x44>
 8007684:	2300      	movs	r3, #0
 8007686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f383 8811 	msr	BASEPRI, r3
}
 800768e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	20000010 	.word	0x20000010

080076a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076a0:	f3ef 8009 	mrs	r0, PSP
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4b15      	ldr	r3, [pc, #84]	@ (8007700 <pxCurrentTCBConst>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	f01e 0f10 	tst.w	lr, #16
 80076b0:	bf08      	it	eq
 80076b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ba:	6010      	str	r0, [r2, #0]
 80076bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076c4:	f380 8811 	msr	BASEPRI, r0
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f7fe fea2 	bl	8006418 <vTaskSwitchContext>
 80076d4:	f04f 0000 	mov.w	r0, #0
 80076d8:	f380 8811 	msr	BASEPRI, r0
 80076dc:	bc09      	pop	{r0, r3}
 80076de:	6819      	ldr	r1, [r3, #0]
 80076e0:	6808      	ldr	r0, [r1, #0]
 80076e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e6:	f01e 0f10 	tst.w	lr, #16
 80076ea:	bf08      	it	eq
 80076ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076f0:	f380 8809 	msr	PSP, r0
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w

08007700 <pxCurrentTCBConst>:
 8007700:	20000a14 	.word	0x20000a14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop

08007708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	607b      	str	r3, [r7, #4]
}
 8007720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007722:	f7fe fdbf 	bl	80062a4 <xTaskIncrementTick>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800772c:	4b06      	ldr	r3, [pc, #24]	@ (8007748 <xPortSysTickHandler+0x40>)
 800772e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	2300      	movs	r3, #0
 8007736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	f383 8811 	msr	BASEPRI, r3
}
 800773e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <vPortSetupTimerInterrupt+0x34>)
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007756:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <vPortSetupTimerInterrupt+0x38>)
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800775c:	4b0a      	ldr	r3, [pc, #40]	@ (8007788 <vPortSetupTimerInterrupt+0x3c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a0a      	ldr	r2, [pc, #40]	@ (800778c <vPortSetupTimerInterrupt+0x40>)
 8007762:	fba2 2303 	umull	r2, r3, r2, r3
 8007766:	099b      	lsrs	r3, r3, #6
 8007768:	4a09      	ldr	r2, [pc, #36]	@ (8007790 <vPortSetupTimerInterrupt+0x44>)
 800776a:	3b01      	subs	r3, #1
 800776c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800776e:	4b04      	ldr	r3, [pc, #16]	@ (8007780 <vPortSetupTimerInterrupt+0x34>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	e000e010 	.word	0xe000e010
 8007784:	e000e018 	.word	0xe000e018
 8007788:	20000004 	.word	0x20000004
 800778c:	10624dd3 	.word	0x10624dd3
 8007790:	e000e014 	.word	0xe000e014

08007794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077a4 <vPortEnableVFP+0x10>
 8007798:	6801      	ldr	r1, [r0, #0]
 800779a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800779e:	6001      	str	r1, [r0, #0]
 80077a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077a2:	bf00      	nop
 80077a4:	e000ed88 	.word	0xe000ed88

080077a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077ae:	f3ef 8305 	mrs	r3, IPSR
 80077b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b0f      	cmp	r3, #15
 80077b8:	d915      	bls.n	80077e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077ba:	4a18      	ldr	r2, [pc, #96]	@ (800781c <vPortValidateInterruptPriority+0x74>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077c4:	4b16      	ldr	r3, [pc, #88]	@ (8007820 <vPortValidateInterruptPriority+0x78>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	7afa      	ldrb	r2, [r7, #11]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d20b      	bcs.n	80077e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	607b      	str	r3, [r7, #4]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <vPortValidateInterruptPriority+0x7c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80077ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <vPortValidateInterruptPriority+0x80>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d90b      	bls.n	800780e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	603b      	str	r3, [r7, #0]
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	e7fd      	b.n	800780a <vPortValidateInterruptPriority+0x62>
	}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	e000e3f0 	.word	0xe000e3f0
 8007820:	20001040 	.word	0x20001040
 8007824:	e000ed0c 	.word	0xe000ed0c
 8007828:	20001044 	.word	0x20001044

0800782c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007838:	f7fe fc78 	bl	800612c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800783c:	4b5c      	ldr	r3, [pc, #368]	@ (80079b0 <pvPortMalloc+0x184>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007844:	f000 f924 	bl	8007a90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007848:	4b5a      	ldr	r3, [pc, #360]	@ (80079b4 <pvPortMalloc+0x188>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4013      	ands	r3, r2
 8007850:	2b00      	cmp	r3, #0
 8007852:	f040 8095 	bne.w	8007980 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01e      	beq.n	800789a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800785c:	2208      	movs	r2, #8
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d015      	beq.n	800789a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f023 0307 	bic.w	r3, r3, #7
 8007874:	3308      	adds	r3, #8
 8007876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <pvPortMalloc+0x6e>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	617b      	str	r3, [r7, #20]
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d06f      	beq.n	8007980 <pvPortMalloc+0x154>
 80078a0:	4b45      	ldr	r3, [pc, #276]	@ (80079b8 <pvPortMalloc+0x18c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d86a      	bhi.n	8007980 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078aa:	4b44      	ldr	r3, [pc, #272]	@ (80079bc <pvPortMalloc+0x190>)
 80078ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078ae:	4b43      	ldr	r3, [pc, #268]	@ (80079bc <pvPortMalloc+0x190>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078b4:	e004      	b.n	80078c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d903      	bls.n	80078d2 <pvPortMalloc+0xa6>
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f1      	bne.n	80078b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078d2:	4b37      	ldr	r3, [pc, #220]	@ (80079b0 <pvPortMalloc+0x184>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078d8:	429a      	cmp	r2, r3
 80078da:	d051      	beq.n	8007980 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2208      	movs	r2, #8
 80078e2:	4413      	add	r3, r2
 80078e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	2308      	movs	r3, #8
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d920      	bls.n	8007940 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <pvPortMalloc+0xfc>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	613b      	str	r3, [r7, #16]
}
 8007922:	bf00      	nop
 8007924:	bf00      	nop
 8007926:	e7fd      	b.n	8007924 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800793a:	69b8      	ldr	r0, [r7, #24]
 800793c:	f000 f90a 	bl	8007b54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007940:	4b1d      	ldr	r3, [pc, #116]	@ (80079b8 <pvPortMalloc+0x18c>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	4a1b      	ldr	r2, [pc, #108]	@ (80079b8 <pvPortMalloc+0x18c>)
 800794c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800794e:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <pvPortMalloc+0x18c>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	4b1b      	ldr	r3, [pc, #108]	@ (80079c0 <pvPortMalloc+0x194>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d203      	bcs.n	8007962 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800795a:	4b17      	ldr	r3, [pc, #92]	@ (80079b8 <pvPortMalloc+0x18c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a18      	ldr	r2, [pc, #96]	@ (80079c0 <pvPortMalloc+0x194>)
 8007960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	4b13      	ldr	r3, [pc, #76]	@ (80079b4 <pvPortMalloc+0x188>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	431a      	orrs	r2, r3
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007976:	4b13      	ldr	r3, [pc, #76]	@ (80079c4 <pvPortMalloc+0x198>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	4a11      	ldr	r2, [pc, #68]	@ (80079c4 <pvPortMalloc+0x198>)
 800797e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007980:	f7fe fbe2 	bl	8006148 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <pvPortMalloc+0x17a>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	e7fd      	b.n	80079a2 <pvPortMalloc+0x176>
	return pvReturn;
 80079a6:	69fb      	ldr	r3, [r7, #28]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3728      	adds	r7, #40	@ 0x28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20004c50 	.word	0x20004c50
 80079b4:	20004c64 	.word	0x20004c64
 80079b8:	20004c54 	.word	0x20004c54
 80079bc:	20004c48 	.word	0x20004c48
 80079c0:	20004c58 	.word	0x20004c58
 80079c4:	20004c5c 	.word	0x20004c5c

080079c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d04f      	beq.n	8007a7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079da:	2308      	movs	r3, #8
 80079dc:	425b      	negs	r3, r3
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4413      	add	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b25      	ldr	r3, [pc, #148]	@ (8007a84 <vPortFree+0xbc>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10b      	bne.n	8007a0e <vPortFree+0x46>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	e7fd      	b.n	8007a0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <vPortFree+0x66>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	60bb      	str	r3, [r7, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	4b14      	ldr	r3, [pc, #80]	@ (8007a84 <vPortFree+0xbc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01e      	beq.n	8007a7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11a      	bne.n	8007a7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4b0e      	ldr	r3, [pc, #56]	@ (8007a84 <vPortFree+0xbc>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	401a      	ands	r2, r3
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a54:	f7fe fb6a 	bl	800612c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <vPortFree+0xc0>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4413      	add	r3, r2
 8007a62:	4a09      	ldr	r2, [pc, #36]	@ (8007a88 <vPortFree+0xc0>)
 8007a64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a66:	6938      	ldr	r0, [r7, #16]
 8007a68:	f000 f874 	bl	8007b54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a6c:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <vPortFree+0xc4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	4a06      	ldr	r2, [pc, #24]	@ (8007a8c <vPortFree+0xc4>)
 8007a74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a76:	f7fe fb67 	bl	8006148 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a7a:	bf00      	nop
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20004c64 	.word	0x20004c64
 8007a88:	20004c54 	.word	0x20004c54
 8007a8c:	20004c60 	.word	0x20004c60

08007a90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007a9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a9c:	4b27      	ldr	r3, [pc, #156]	@ (8007b3c <prvHeapInit+0xac>)
 8007a9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3307      	adds	r3, #7
 8007aae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0307 	bic.w	r3, r3, #7
 8007ab6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	4a1f      	ldr	r2, [pc, #124]	@ (8007b3c <prvHeapInit+0xac>)
 8007ac0:	4413      	add	r3, r2
 8007ac2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b40 <prvHeapInit+0xb0>)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ace:	4b1c      	ldr	r3, [pc, #112]	@ (8007b40 <prvHeapInit+0xb0>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	4413      	add	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007adc:	2208      	movs	r2, #8
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0307 	bic.w	r3, r3, #7
 8007aea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4a15      	ldr	r2, [pc, #84]	@ (8007b44 <prvHeapInit+0xb4>)
 8007af0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007af2:	4b14      	ldr	r3, [pc, #80]	@ (8007b44 <prvHeapInit+0xb4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007afa:	4b12      	ldr	r3, [pc, #72]	@ (8007b44 <prvHeapInit+0xb4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	1ad2      	subs	r2, r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b10:	4b0c      	ldr	r3, [pc, #48]	@ (8007b44 <prvHeapInit+0xb4>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b48 <prvHeapInit+0xb8>)
 8007b1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4a09      	ldr	r2, [pc, #36]	@ (8007b4c <prvHeapInit+0xbc>)
 8007b26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b28:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <prvHeapInit+0xc0>)
 8007b2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b2e:	601a      	str	r2, [r3, #0]
}
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	20001048 	.word	0x20001048
 8007b40:	20004c48 	.word	0x20004c48
 8007b44:	20004c50 	.word	0x20004c50
 8007b48:	20004c58 	.word	0x20004c58
 8007b4c:	20004c54 	.word	0x20004c54
 8007b50:	20004c64 	.word	0x20004c64

08007b54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b5c:	4b28      	ldr	r3, [pc, #160]	@ (8007c00 <prvInsertBlockIntoFreeList+0xac>)
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e002      	b.n	8007b68 <prvInsertBlockIntoFreeList+0x14>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d8f7      	bhi.n	8007b62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d108      	bne.n	8007b96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	441a      	add	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d118      	bne.n	8007bdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4b15      	ldr	r3, [pc, #84]	@ (8007c04 <prvInsertBlockIntoFreeList+0xb0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d00d      	beq.n	8007bd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e008      	b.n	8007be4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007c04 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e003      	b.n	8007be4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d002      	beq.n	8007bf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20004c48 	.word	0x20004c48
 8007c04:	20004c50 	.word	0x20004c50

08007c08 <memcmp>:
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	3901      	subs	r1, #1
 8007c0c:	4402      	add	r2, r0
 8007c0e:	4290      	cmp	r0, r2
 8007c10:	d101      	bne.n	8007c16 <memcmp+0xe>
 8007c12:	2000      	movs	r0, #0
 8007c14:	e005      	b.n	8007c22 <memcmp+0x1a>
 8007c16:	7803      	ldrb	r3, [r0, #0]
 8007c18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	d001      	beq.n	8007c24 <memcmp+0x1c>
 8007c20:	1b18      	subs	r0, r3, r4
 8007c22:	bd10      	pop	{r4, pc}
 8007c24:	3001      	adds	r0, #1
 8007c26:	e7f2      	b.n	8007c0e <memcmp+0x6>

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <_reclaim_reent>:
 8007c38:	4b29      	ldr	r3, [pc, #164]	@ (8007ce0 <_reclaim_reent+0xa8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4283      	cmp	r3, r0
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	4604      	mov	r4, r0
 8007c42:	d04b      	beq.n	8007cdc <_reclaim_reent+0xa4>
 8007c44:	69c3      	ldr	r3, [r0, #28]
 8007c46:	b1ab      	cbz	r3, 8007c74 <_reclaim_reent+0x3c>
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	b16b      	cbz	r3, 8007c68 <_reclaim_reent+0x30>
 8007c4c:	2500      	movs	r5, #0
 8007c4e:	69e3      	ldr	r3, [r4, #28]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	5959      	ldr	r1, [r3, r5]
 8007c54:	2900      	cmp	r1, #0
 8007c56:	d13b      	bne.n	8007cd0 <_reclaim_reent+0x98>
 8007c58:	3504      	adds	r5, #4
 8007c5a:	2d80      	cmp	r5, #128	@ 0x80
 8007c5c:	d1f7      	bne.n	8007c4e <_reclaim_reent+0x16>
 8007c5e:	69e3      	ldr	r3, [r4, #28]
 8007c60:	4620      	mov	r0, r4
 8007c62:	68d9      	ldr	r1, [r3, #12]
 8007c64:	f000 f872 	bl	8007d4c <_free_r>
 8007c68:	69e3      	ldr	r3, [r4, #28]
 8007c6a:	6819      	ldr	r1, [r3, #0]
 8007c6c:	b111      	cbz	r1, 8007c74 <_reclaim_reent+0x3c>
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 f86c 	bl	8007d4c <_free_r>
 8007c74:	6961      	ldr	r1, [r4, #20]
 8007c76:	b111      	cbz	r1, 8007c7e <_reclaim_reent+0x46>
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 f867 	bl	8007d4c <_free_r>
 8007c7e:	69e1      	ldr	r1, [r4, #28]
 8007c80:	b111      	cbz	r1, 8007c88 <_reclaim_reent+0x50>
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f862 	bl	8007d4c <_free_r>
 8007c88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007c8a:	b111      	cbz	r1, 8007c92 <_reclaim_reent+0x5a>
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 f85d 	bl	8007d4c <_free_r>
 8007c92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c94:	b111      	cbz	r1, 8007c9c <_reclaim_reent+0x64>
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 f858 	bl	8007d4c <_free_r>
 8007c9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c9e:	b111      	cbz	r1, 8007ca6 <_reclaim_reent+0x6e>
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 f853 	bl	8007d4c <_free_r>
 8007ca6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ca8:	b111      	cbz	r1, 8007cb0 <_reclaim_reent+0x78>
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 f84e 	bl	8007d4c <_free_r>
 8007cb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007cb2:	b111      	cbz	r1, 8007cba <_reclaim_reent+0x82>
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f000 f849 	bl	8007d4c <_free_r>
 8007cba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007cbc:	b111      	cbz	r1, 8007cc4 <_reclaim_reent+0x8c>
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 f844 	bl	8007d4c <_free_r>
 8007cc4:	6a23      	ldr	r3, [r4, #32]
 8007cc6:	b14b      	cbz	r3, 8007cdc <_reclaim_reent+0xa4>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cce:	4718      	bx	r3
 8007cd0:	680e      	ldr	r6, [r1, #0]
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f83a 	bl	8007d4c <_free_r>
 8007cd8:	4631      	mov	r1, r6
 8007cda:	e7bb      	b.n	8007c54 <_reclaim_reent+0x1c>
 8007cdc:	bd70      	pop	{r4, r5, r6, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000014 	.word	0x20000014

08007ce4 <__libc_init_array>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8007d1c <__libc_init_array+0x38>)
 8007ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8007d20 <__libc_init_array+0x3c>)
 8007cea:	1b64      	subs	r4, r4, r5
 8007cec:	10a4      	asrs	r4, r4, #2
 8007cee:	2600      	movs	r6, #0
 8007cf0:	42a6      	cmp	r6, r4
 8007cf2:	d109      	bne.n	8007d08 <__libc_init_array+0x24>
 8007cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8007d24 <__libc_init_array+0x40>)
 8007cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8007d28 <__libc_init_array+0x44>)
 8007cf8:	f000 f87e 	bl	8007df8 <_init>
 8007cfc:	1b64      	subs	r4, r4, r5
 8007cfe:	10a4      	asrs	r4, r4, #2
 8007d00:	2600      	movs	r6, #0
 8007d02:	42a6      	cmp	r6, r4
 8007d04:	d105      	bne.n	8007d12 <__libc_init_array+0x2e>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0c:	4798      	blx	r3
 8007d0e:	3601      	adds	r6, #1
 8007d10:	e7ee      	b.n	8007cf0 <__libc_init_array+0xc>
 8007d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d16:	4798      	blx	r3
 8007d18:	3601      	adds	r6, #1
 8007d1a:	e7f2      	b.n	8007d02 <__libc_init_array+0x1e>
 8007d1c:	08007f4c 	.word	0x08007f4c
 8007d20:	08007f4c 	.word	0x08007f4c
 8007d24:	08007f4c 	.word	0x08007f4c
 8007d28:	08007f50 	.word	0x08007f50

08007d2c <__retarget_lock_acquire_recursive>:
 8007d2c:	4770      	bx	lr

08007d2e <__retarget_lock_release_recursive>:
 8007d2e:	4770      	bx	lr

08007d30 <memcpy>:
 8007d30:	440a      	add	r2, r1
 8007d32:	4291      	cmp	r1, r2
 8007d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d38:	d100      	bne.n	8007d3c <memcpy+0xc>
 8007d3a:	4770      	bx	lr
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d46:	4291      	cmp	r1, r2
 8007d48:	d1f9      	bne.n	8007d3e <memcpy+0xe>
 8007d4a:	bd10      	pop	{r4, pc}

08007d4c <_free_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4605      	mov	r5, r0
 8007d50:	2900      	cmp	r1, #0
 8007d52:	d041      	beq.n	8007dd8 <_free_r+0x8c>
 8007d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d58:	1f0c      	subs	r4, r1, #4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfb8      	it	lt
 8007d5e:	18e4      	addlt	r4, r4, r3
 8007d60:	f000 f83e 	bl	8007de0 <__malloc_lock>
 8007d64:	4a1d      	ldr	r2, [pc, #116]	@ (8007ddc <_free_r+0x90>)
 8007d66:	6813      	ldr	r3, [r2, #0]
 8007d68:	b933      	cbnz	r3, 8007d78 <_free_r+0x2c>
 8007d6a:	6063      	str	r3, [r4, #4]
 8007d6c:	6014      	str	r4, [r2, #0]
 8007d6e:	4628      	mov	r0, r5
 8007d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d74:	f000 b83a 	b.w	8007dec <__malloc_unlock>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d908      	bls.n	8007d8e <_free_r+0x42>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	1821      	adds	r1, r4, r0
 8007d80:	428b      	cmp	r3, r1
 8007d82:	bf01      	itttt	eq
 8007d84:	6819      	ldreq	r1, [r3, #0]
 8007d86:	685b      	ldreq	r3, [r3, #4]
 8007d88:	1809      	addeq	r1, r1, r0
 8007d8a:	6021      	streq	r1, [r4, #0]
 8007d8c:	e7ed      	b.n	8007d6a <_free_r+0x1e>
 8007d8e:	461a      	mov	r2, r3
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	b10b      	cbz	r3, 8007d98 <_free_r+0x4c>
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d9fa      	bls.n	8007d8e <_free_r+0x42>
 8007d98:	6811      	ldr	r1, [r2, #0]
 8007d9a:	1850      	adds	r0, r2, r1
 8007d9c:	42a0      	cmp	r0, r4
 8007d9e:	d10b      	bne.n	8007db8 <_free_r+0x6c>
 8007da0:	6820      	ldr	r0, [r4, #0]
 8007da2:	4401      	add	r1, r0
 8007da4:	1850      	adds	r0, r2, r1
 8007da6:	4283      	cmp	r3, r0
 8007da8:	6011      	str	r1, [r2, #0]
 8007daa:	d1e0      	bne.n	8007d6e <_free_r+0x22>
 8007dac:	6818      	ldr	r0, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	6053      	str	r3, [r2, #4]
 8007db2:	4408      	add	r0, r1
 8007db4:	6010      	str	r0, [r2, #0]
 8007db6:	e7da      	b.n	8007d6e <_free_r+0x22>
 8007db8:	d902      	bls.n	8007dc0 <_free_r+0x74>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	e7d6      	b.n	8007d6e <_free_r+0x22>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	1821      	adds	r1, r4, r0
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	bf04      	itt	eq
 8007dc8:	6819      	ldreq	r1, [r3, #0]
 8007dca:	685b      	ldreq	r3, [r3, #4]
 8007dcc:	6063      	str	r3, [r4, #4]
 8007dce:	bf04      	itt	eq
 8007dd0:	1809      	addeq	r1, r1, r0
 8007dd2:	6021      	streq	r1, [r4, #0]
 8007dd4:	6054      	str	r4, [r2, #4]
 8007dd6:	e7ca      	b.n	8007d6e <_free_r+0x22>
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop
 8007ddc:	20004da4 	.word	0x20004da4

08007de0 <__malloc_lock>:
 8007de0:	4801      	ldr	r0, [pc, #4]	@ (8007de8 <__malloc_lock+0x8>)
 8007de2:	f7ff bfa3 	b.w	8007d2c <__retarget_lock_acquire_recursive>
 8007de6:	bf00      	nop
 8007de8:	20004da0 	.word	0x20004da0

08007dec <__malloc_unlock>:
 8007dec:	4801      	ldr	r0, [pc, #4]	@ (8007df4 <__malloc_unlock+0x8>)
 8007dee:	f7ff bf9e 	b.w	8007d2e <__retarget_lock_release_recursive>
 8007df2:	bf00      	nop
 8007df4:	20004da0 	.word	0x20004da0

08007df8 <_init>:
 8007df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfa:	bf00      	nop
 8007dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfe:	bc08      	pop	{r3}
 8007e00:	469e      	mov	lr, r3
 8007e02:	4770      	bx	lr

08007e04 <_fini>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	bf00      	nop
 8007e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0a:	bc08      	pop	{r3}
 8007e0c:	469e      	mov	lr, r3
 8007e0e:	4770      	bx	lr


Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007580  08007580  00008580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007678  08007678  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007678  08007678  00008678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007680  08007680  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007680  08007680  00008680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007684  08007684  00008684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007688  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c9c  20000060  080076e8  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cfc  080076e8  00009cfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019819  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003794  00000000  00000000  000228a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00026040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001041  00000000  00000000  00027518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174d6  00000000  00000000  00028559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178d2  00000000  00000000  0003fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ad7  00000000  00000000  00057301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eedd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b54  00000000  00000000  000eee1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f4970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007568 	.word	0x08007568

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007568 	.word	0x08007568

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	@ 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2iz>:
 80007ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007b4:	d215      	bcs.n	80007e2 <__aeabi_d2iz+0x36>
 80007b6:	d511      	bpl.n	80007dc <__aeabi_d2iz+0x30>
 80007b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d912      	bls.n	80007e8 <__aeabi_d2iz+0x3c>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007d2:	fa23 f002 	lsr.w	r0, r3, r2
 80007d6:	bf18      	it	ne
 80007d8:	4240      	negne	r0, r0
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d105      	bne.n	80007f4 <__aeabi_d2iz+0x48>
 80007e8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007ec:	bf08      	it	eq
 80007ee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007f2:	4770      	bx	lr
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96a 	b.w	8000ae8 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	460c      	mov	r4, r1
 8000834:	2b00      	cmp	r3, #0
 8000836:	d14e      	bne.n	80008d6 <__udivmoddi4+0xaa>
 8000838:	4694      	mov	ip, r2
 800083a:	458c      	cmp	ip, r1
 800083c:	4686      	mov	lr, r0
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	d962      	bls.n	800090a <__udivmoddi4+0xde>
 8000844:	b14a      	cbz	r2, 800085a <__udivmoddi4+0x2e>
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	4091      	lsls	r1, r2
 800084c:	fa20 f303 	lsr.w	r3, r0, r3
 8000850:	fa0c fc02 	lsl.w	ip, ip, r2
 8000854:	4319      	orrs	r1, r3
 8000856:	fa00 fe02 	lsl.w	lr, r0, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f f68c 	uxth.w	r6, ip
 8000862:	fbb1 f4f7 	udiv	r4, r1, r7
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb07 1114 	mls	r1, r7, r4, r1
 800086e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000872:	fb04 f106 	mul.w	r1, r4, r6
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000882:	f080 8112 	bcs.w	8000aaa <__udivmoddi4+0x27e>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 810f 	bls.w	8000aaa <__udivmoddi4+0x27e>
 800088c:	3c02      	subs	r4, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	fa1f f38e 	uxth.w	r3, lr
 8000896:	fbb1 f0f7 	udiv	r0, r1, r7
 800089a:	fb07 1110 	mls	r1, r7, r0, r1
 800089e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a2:	fb00 f606 	mul.w	r6, r0, r6
 80008a6:	429e      	cmp	r6, r3
 80008a8:	d90a      	bls.n	80008c0 <__udivmoddi4+0x94>
 80008aa:	eb1c 0303 	adds.w	r3, ip, r3
 80008ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b2:	f080 80fc 	bcs.w	8000aae <__udivmoddi4+0x282>
 80008b6:	429e      	cmp	r6, r3
 80008b8:	f240 80f9 	bls.w	8000aae <__udivmoddi4+0x282>
 80008bc:	4463      	add	r3, ip
 80008be:	3802      	subs	r0, #2
 80008c0:	1b9b      	subs	r3, r3, r6
 80008c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008c6:	2100      	movs	r1, #0
 80008c8:	b11d      	cbz	r5, 80008d2 <__udivmoddi4+0xa6>
 80008ca:	40d3      	lsrs	r3, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	e9c5 3200 	strd	r3, r2, [r5]
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d905      	bls.n	80008e6 <__udivmoddi4+0xba>
 80008da:	b10d      	cbz	r5, 80008e0 <__udivmoddi4+0xb4>
 80008dc:	e9c5 0100 	strd	r0, r1, [r5]
 80008e0:	2100      	movs	r1, #0
 80008e2:	4608      	mov	r0, r1
 80008e4:	e7f5      	b.n	80008d2 <__udivmoddi4+0xa6>
 80008e6:	fab3 f183 	clz	r1, r3
 80008ea:	2900      	cmp	r1, #0
 80008ec:	d146      	bne.n	800097c <__udivmoddi4+0x150>
 80008ee:	42a3      	cmp	r3, r4
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xcc>
 80008f2:	4290      	cmp	r0, r2
 80008f4:	f0c0 80f0 	bcc.w	8000ad8 <__udivmoddi4+0x2ac>
 80008f8:	1a86      	subs	r6, r0, r2
 80008fa:	eb64 0303 	sbc.w	r3, r4, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	2d00      	cmp	r5, #0
 8000902:	d0e6      	beq.n	80008d2 <__udivmoddi4+0xa6>
 8000904:	e9c5 6300 	strd	r6, r3, [r5]
 8000908:	e7e3      	b.n	80008d2 <__udivmoddi4+0xa6>
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 8090 	bne.w	8000a30 <__udivmoddi4+0x204>
 8000910:	eba1 040c 	sub.w	r4, r1, ip
 8000914:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000918:	fa1f f78c 	uxth.w	r7, ip
 800091c:	2101      	movs	r1, #1
 800091e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000922:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000926:	fb08 4416 	mls	r4, r8, r6, r4
 800092a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800092e:	fb07 f006 	mul.w	r0, r7, r6
 8000932:	4298      	cmp	r0, r3
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x11c>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f106 34ff 	add.w	r4, r6, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x11a>
 8000940:	4298      	cmp	r0, r3
 8000942:	f200 80cd 	bhi.w	8000ae0 <__udivmoddi4+0x2b4>
 8000946:	4626      	mov	r6, r4
 8000948:	1a1c      	subs	r4, r3, r0
 800094a:	fa1f f38e 	uxth.w	r3, lr
 800094e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000952:	fb08 4410 	mls	r4, r8, r0, r4
 8000956:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800095a:	fb00 f707 	mul.w	r7, r0, r7
 800095e:	429f      	cmp	r7, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x148>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 34ff 	add.w	r4, r0, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x146>
 800096c:	429f      	cmp	r7, r3
 800096e:	f200 80b0 	bhi.w	8000ad2 <__udivmoddi4+0x2a6>
 8000972:	4620      	mov	r0, r4
 8000974:	1bdb      	subs	r3, r3, r7
 8000976:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097a:	e7a5      	b.n	80008c8 <__udivmoddi4+0x9c>
 800097c:	f1c1 0620 	rsb	r6, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 f706 	lsr.w	r7, r2, r6
 8000986:	431f      	orrs	r7, r3
 8000988:	fa20 fc06 	lsr.w	ip, r0, r6
 800098c:	fa04 f301 	lsl.w	r3, r4, r1
 8000990:	ea43 030c 	orr.w	r3, r3, ip
 8000994:	40f4      	lsrs	r4, r6
 8000996:	fa00 f801 	lsl.w	r8, r0, r1
 800099a:	0c38      	lsrs	r0, r7, #16
 800099c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009a0:	fbb4 fef0 	udiv	lr, r4, r0
 80009a4:	fa1f fc87 	uxth.w	ip, r7
 80009a8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009b0:	fb0e f90c 	mul.w	r9, lr, ip
 80009b4:	45a1      	cmp	r9, r4
 80009b6:	fa02 f201 	lsl.w	r2, r2, r1
 80009ba:	d90a      	bls.n	80009d2 <__udivmoddi4+0x1a6>
 80009bc:	193c      	adds	r4, r7, r4
 80009be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009c2:	f080 8084 	bcs.w	8000ace <__udivmoddi4+0x2a2>
 80009c6:	45a1      	cmp	r9, r4
 80009c8:	f240 8081 	bls.w	8000ace <__udivmoddi4+0x2a2>
 80009cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	eba4 0409 	sub.w	r4, r4, r9
 80009d6:	fa1f f983 	uxth.w	r9, r3
 80009da:	fbb4 f3f0 	udiv	r3, r4, r0
 80009de:	fb00 4413 	mls	r4, r0, r3, r4
 80009e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009ea:	45a4      	cmp	ip, r4
 80009ec:	d907      	bls.n	80009fe <__udivmoddi4+0x1d2>
 80009ee:	193c      	adds	r4, r7, r4
 80009f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009f4:	d267      	bcs.n	8000ac6 <__udivmoddi4+0x29a>
 80009f6:	45a4      	cmp	ip, r4
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0x29a>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	443c      	add	r4, r7
 80009fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a02:	fba0 9302 	umull	r9, r3, r0, r2
 8000a06:	eba4 040c 	sub.w	r4, r4, ip
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	46ce      	mov	lr, r9
 8000a0e:	469c      	mov	ip, r3
 8000a10:	d351      	bcc.n	8000ab6 <__udivmoddi4+0x28a>
 8000a12:	d04e      	beq.n	8000ab2 <__udivmoddi4+0x286>
 8000a14:	b155      	cbz	r5, 8000a2c <__udivmoddi4+0x200>
 8000a16:	ebb8 030e 	subs.w	r3, r8, lr
 8000a1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a22:	40cb      	lsrs	r3, r1
 8000a24:	431e      	orrs	r6, r3
 8000a26:	40cc      	lsrs	r4, r1
 8000a28:	e9c5 6400 	strd	r6, r4, [r5]
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e750      	b.n	80008d2 <__udivmoddi4+0xa6>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f103 	lsr.w	r1, r0, r3
 8000a38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a40:	4094      	lsls	r4, r2
 8000a42:	430c      	orrs	r4, r1
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a4c:	fa1f f78c 	uxth.w	r7, ip
 8000a50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a54:	fb08 3110 	mls	r1, r8, r0, r3
 8000a58:	0c23      	lsrs	r3, r4, #16
 8000a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5e:	fb00 f107 	mul.w	r1, r0, r7
 8000a62:	4299      	cmp	r1, r3
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x24c>
 8000a66:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a6e:	d22c      	bcs.n	8000aca <__udivmoddi4+0x29e>
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d92a      	bls.n	8000aca <__udivmoddi4+0x29e>
 8000a74:	3802      	subs	r0, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a80:	fb08 3311 	mls	r3, r8, r1, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb01 f307 	mul.w	r3, r1, r7
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x276>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a98:	d213      	bcs.n	8000ac2 <__udivmoddi4+0x296>
 8000a9a:	42a3      	cmp	r3, r4
 8000a9c:	d911      	bls.n	8000ac2 <__udivmoddi4+0x296>
 8000a9e:	3902      	subs	r1, #2
 8000aa0:	4464      	add	r4, ip
 8000aa2:	1ae4      	subs	r4, r4, r3
 8000aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000aa8:	e739      	b.n	800091e <__udivmoddi4+0xf2>
 8000aaa:	4604      	mov	r4, r0
 8000aac:	e6f0      	b.n	8000890 <__udivmoddi4+0x64>
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e706      	b.n	80008c0 <__udivmoddi4+0x94>
 8000ab2:	45c8      	cmp	r8, r9
 8000ab4:	d2ae      	bcs.n	8000a14 <__udivmoddi4+0x1e8>
 8000ab6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7a8      	b.n	8000a14 <__udivmoddi4+0x1e8>
 8000ac2:	4631      	mov	r1, r6
 8000ac4:	e7ed      	b.n	8000aa2 <__udivmoddi4+0x276>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e799      	b.n	80009fe <__udivmoddi4+0x1d2>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e7d4      	b.n	8000a78 <__udivmoddi4+0x24c>
 8000ace:	46d6      	mov	lr, sl
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1a6>
 8000ad2:	4463      	add	r3, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	e74d      	b.n	8000974 <__udivmoddi4+0x148>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	4623      	mov	r3, r4
 8000adc:	4608      	mov	r0, r1
 8000ade:	e70f      	b.n	8000900 <__udivmoddi4+0xd4>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	e730      	b.n	8000948 <__udivmoddi4+0x11c>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_idiv0>:
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <Parse_Steering_Data>:
extern UART_HandleTypeDef huart2;

uint8_t uart_rx_buffer[BUFFER_SIZE];

void Parse_Steering_Data(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    steering_data.header = uart_rx_buffer[0];
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <Parse_Steering_Data+0x5c>)
 8000af6:	701a      	strb	r2, [r3, #0]
    steering_data.steering = (uart_rx_buffer[1] << 8) | uart_rx_buffer[2];
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <Parse_Steering_Data+0x5c>)
 8000b0e:	805a      	strh	r2, [r3, #2]
    steering_data.pedal_gas = uart_rx_buffer[3];
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000b12:	78da      	ldrb	r2, [r3, #3]
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <Parse_Steering_Data+0x5c>)
 8000b16:	711a      	strb	r2, [r3, #4]
    steering_data.pedal_brake = uart_rx_buffer[4];
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000b1a:	791a      	ldrb	r2, [r3, #4]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <Parse_Steering_Data+0x5c>)
 8000b1e:	715a      	strb	r2, [r3, #5]
    steering_data.clutch = uart_rx_buffer[5];
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000b22:	795a      	ldrb	r2, [r3, #5]
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <Parse_Steering_Data+0x5c>)
 8000b26:	719a      	strb	r2, [r3, #6]
    steering_data.buttons = uart_rx_buffer[6];
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000b2a:	799a      	ldrb	r2, [r3, #6]
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <Parse_Steering_Data+0x5c>)
 8000b2e:	71da      	strb	r2, [r3, #7]
    steering_data.crc = uart_rx_buffer[7];
 8000b30:	4b04      	ldr	r3, [pc, #16]	@ (8000b44 <Parse_Steering_Data+0x58>)
 8000b32:	79da      	ldrb	r2, [r3, #7]
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <Parse_Steering_Data+0x5c>)
 8000b36:	721a      	strb	r2, [r3, #8]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000088 	.word	0x20000088
 8000b48:	2000007c 	.word	0x2000007c

08000b4c <UART_Receive_Header_IT>:

void UART_Receive_Header_IT(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    // Start receiving the header byte in interrupt mode
    HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 8000b50:	2201      	movs	r2, #1
 8000b52:	4903      	ldr	r1, [pc, #12]	@ (8000b60 <UART_Receive_Header_IT+0x14>)
 8000b54:	4803      	ldr	r0, [pc, #12]	@ (8000b64 <UART_Receive_Header_IT+0x18>)
 8000b56:	f002 fdfb 	bl	8003750 <HAL_UART_Receive_IT>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000088 	.word	0x20000088
 8000b64:	20000128 	.word	0x20000128

08000b68 <UART_Receive_Data_IT>:

void UART_Receive_Data_IT(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    // Start receiving the rest of the frame in interrupt mode
    HAL_UART_Receive_IT(&huart2, &uart_rx_buffer[1], BUFFER_SIZE - 1);
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	4903      	ldr	r1, [pc, #12]	@ (8000b7c <UART_Receive_Data_IT+0x14>)
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <UART_Receive_Data_IT+0x18>)
 8000b72:	f002 fded 	bl	8003750 <HAL_UART_Receive_IT>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000089 	.word	0x20000089
 8000b80:	20000128 	.word	0x20000128

08000b84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x4c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d117      	bne.n	8000bc6 <HAL_UART_RxCpltCallback+0x42>
    {
        static uint8_t header_received = 0;

        if (!header_received)
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x50>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_UART_RxCpltCallback+0x34>
        {
            if (uart_rx_buffer[0] == VALID_HEADER)
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_UART_RxCpltCallback+0x54>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b55      	cmp	r3, #85	@ 0x55
 8000ba4:	d105      	bne.n	8000bb2 <HAL_UART_RxCpltCallback+0x2e>
            {
                // Valid header received, start receiving the rest of the data
                header_received = 1;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x50>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
                UART_Receive_Data_IT();
 8000bac:	f7ff ffdc 	bl	8000b68 <UART_Receive_Data_IT>
            Parse_Steering_Data();
            header_received = 0;
            UART_Receive_Header_IT();
        }
    }
}
 8000bb0:	e009      	b.n	8000bc6 <HAL_UART_RxCpltCallback+0x42>
                UART_Receive_Header_IT();
 8000bb2:	f7ff ffcb 	bl	8000b4c <UART_Receive_Header_IT>
}
 8000bb6:	e006      	b.n	8000bc6 <HAL_UART_RxCpltCallback+0x42>
            Parse_Steering_Data();
 8000bb8:	f7ff ff98 	bl	8000aec <Parse_Steering_Data>
            header_received = 0;
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
            UART_Receive_Header_IT();
 8000bc2:	f7ff ffc3 	bl	8000b4c <UART_Receive_Header_IT>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	20000090 	.word	0x20000090
 8000bd8:	20000088 	.word	0x20000088

08000bdc <Communication_Init>:

void Communication_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    // Initialize UART reception in interrupt mode
    UART_Receive_Header_IT();
 8000be0:	f7ff ffb4 	bl	8000b4c <UART_Receive_Header_IT>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <Communication>:

    HAL_UART_Transmit(&huart2, tx_buffer, BUFFER_SIZE, HAL_MAX_DELAY);
}*/

void Communication(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	Communication_Init();
 8000bec:	f7ff fff6 	bl	8000bdc <Communication_Init>
    while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Communication+0x8>

08000bf4 <getSteeringPosition>:
extern TIM_HandleTypeDef htim3;
// Global variables to keep track of the encoder state
volatile int32_t position = 0;

void getSteeringPosition(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bf8:	213c      	movs	r1, #60	@ 0x3c
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <getSteeringPosition+0x24>)
 8000bfc:	f001 ffde 	bl	8002bbc <HAL_TIM_Encoder_Start>
    while (1)
    {
    	position = (int32_t)(int16_t)TIM3->CNT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <getSteeringPosition+0x28>)
 8000c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <getSteeringPosition+0x2c>)
 8000c0a:	601a      	str	r2, [r3, #0]
        osDelay(10); // Delay to simulate periodic checking (adjust as necessary)
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f003 fde3 	bl	80047d8 <osDelay>
    	position = (int32_t)(int16_t)TIM3->CNT;
 8000c12:	bf00      	nop
 8000c14:	e7f4      	b.n	8000c00 <getSteeringPosition+0xc>
 8000c16:	bf00      	nop
 8000c18:	200000e0 	.word	0x200000e0
 8000c1c:	40000400 	.word	0x40000400
 8000c20:	20000094 	.word	0x20000094

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f000 fd64 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f844 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f000 f9c8 	bl	8000fc4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c34:	f000 f8a0 	bl	8000d78 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000c38:	f000 f99a 	bl	8000f70 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c3c:	f000 f944 	bl	8000ec8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  calibre_steering();
 8000c40:	f000 fa06 	bl	8001050 <calibre_steering>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c44:	f003 fcec 	bl	8004620 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Steering_Data_Mutex */
  Steering_Data_MutexHandle = osMutexNew(&Steering_Data_Mutex_attributes);
 8000c48:	4810      	ldr	r0, [pc, #64]	@ (8000c8c <main+0x68>)
 8000c4a:	f003 fde0 	bl	800480e <osMutexNew>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a0f      	ldr	r2, [pc, #60]	@ (8000c90 <main+0x6c>)
 8000c52:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c54:	4a0f      	ldr	r2, [pc, #60]	@ (8000c94 <main+0x70>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	480f      	ldr	r0, [pc, #60]	@ (8000c98 <main+0x74>)
 8000c5a:	f003 fd2b 	bl	80046b4 <osThreadNew>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <main+0x78>)
 8000c62:	6013      	str	r3, [r2, #0]

  /* creation of Communication_T */
  Communication_THandle = osThreadNew(Communication, NULL, &Communication_T_attributes);
 8000c64:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <main+0x7c>)
 8000c66:	2100      	movs	r1, #0
 8000c68:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <main+0x80>)
 8000c6a:	f003 fd23 	bl	80046b4 <osThreadNew>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <main+0x84>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* creation of ControllingTask */
  //ControllingTaskHandle = osThreadNew(Controlling, NULL, &ControllingTask_attributes);

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(getSteeringPosition, NULL, &ADC_Task_attributes);
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <main+0x88>)
 8000c76:	2100      	movs	r1, #0
 8000c78:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <main+0x8c>)
 8000c7a:	f003 fd1b 	bl	80046b4 <osThreadNew>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <main+0x90>)
 8000c82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c84:	f003 fcf0 	bl	8004668 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <main+0x64>
 8000c8c:	08007650 	.word	0x08007650
 8000c90:	2000017c 	.word	0x2000017c
 8000c94:	080075e4 	.word	0x080075e4
 8000c98:	080012a9 	.word	0x080012a9
 8000c9c:	20000170 	.word	0x20000170
 8000ca0:	08007608 	.word	0x08007608
 8000ca4:	08000be9 	.word	0x08000be9
 8000ca8:	20000174 	.word	0x20000174
 8000cac:	0800762c 	.word	0x0800762c
 8000cb0:	08000bf5 	.word	0x08000bf5
 8000cb4:	20000178 	.word	0x20000178

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b094      	sub	sp, #80	@ 0x50
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	2230      	movs	r2, #48	@ 0x30
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f006 fb66 	bl	8007398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b23      	ldr	r3, [pc, #140]	@ (8000d70 <SystemClock_Config+0xb8>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	4a22      	ldr	r2, [pc, #136]	@ (8000d70 <SystemClock_Config+0xb8>)
 8000ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cec:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <SystemClock_Config+0xb8>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <SystemClock_Config+0xbc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d04:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <SystemClock_Config+0xbc>)
 8000d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <SystemClock_Config+0xbc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d20:	2310      	movs	r3, #16
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 f859 	bl	8001de4 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d38:	f000 facd 	bl	80012d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fabb 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d64:	f000 fab7 	bl	80012d6 <Error_Handler>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3750      	adds	r7, #80	@ 0x50
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b092      	sub	sp, #72	@ 0x48
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]
 8000d9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2220      	movs	r2, #32
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 faf8 	bl	8007398 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da8:	4b45      	ldr	r3, [pc, #276]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000daa:	4a46      	ldr	r2, [pc, #280]	@ (8000ec4 <MX_TIM1_Init+0x14c>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000dae:	4b44      	ldr	r3, [pc, #272]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b42      	ldr	r3, [pc, #264]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dba:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dd4:	483a      	ldr	r0, [pc, #232]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000dd6:	f001 fd4b 	bl	8002870 <HAL_TIM_PWM_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000de0:	f000 fa79 	bl	80012d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000df0:	4619      	mov	r1, r3
 8000df2:	4833      	ldr	r0, [pc, #204]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000df4:	f002 fb88 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000dfe:	f000 fa6a 	bl	80012d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e02:	2360      	movs	r3, #96	@ 0x60
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e22:	2200      	movs	r2, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	4826      	ldr	r0, [pc, #152]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000e28:	f002 f846 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000e32:	f000 fa50 	bl	80012d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4820      	ldr	r0, [pc, #128]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000e40:	f002 f83a 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e4a:	f000 fa44 	bl	80012d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	2208      	movs	r2, #8
 8000e54:	4619      	mov	r1, r3
 8000e56:	481a      	ldr	r0, [pc, #104]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000e58:	f002 f82e 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000e62:	f000 fa38 	bl	80012d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4814      	ldr	r0, [pc, #80]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000e70:	f002 f822 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000e7a:	f000 fa2c 	bl	80012d6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4807      	ldr	r0, [pc, #28]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000ea2:	f002 fb9f 	bl	80035e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000eac:	f000 fa13 	bl	80012d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eb0:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <MX_TIM1_Init+0x148>)
 8000eb2:	f000 faad 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8000eb6:	bf00      	nop
 8000eb8:	3748      	adds	r7, #72	@ 0x48
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000098 	.word	0x20000098
 8000ec4:	40010000 	.word	0x40010000

08000ec8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2224      	movs	r2, #36	@ 0x24
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f006 fa5e 	bl	8007398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000ee6:	4a21      	ldr	r2, [pc, #132]	@ (8000f6c <MX_TIM3_Init+0xa4>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000ef8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000efc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f04:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000f06:	2280      	movs	r2, #128	@ 0x80
 8000f08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f12:	2301      	movs	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f22:	2301      	movs	r3, #1
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000f36:	f001 fd9b 	bl	8002a70 <HAL_TIM_Encoder_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f40:	f000 f9c9 	bl	80012d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_TIM3_Init+0xa0>)
 8000f52:	f002 fad9 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f5c:	f000 f9bb 	bl	80012d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3730      	adds	r7, #48	@ 0x30
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000e0 	.word	0x200000e0
 8000f6c:	40000400 	.word	0x40000400

08000f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <MX_USART2_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f002 fb82 	bl	80036b0 <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f990 	bl	80012d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000128 	.word	0x20000128
 8000fc0:	40004400 	.word	0x40004400

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_GPIO_Init+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a18      	ldr	r2, [pc, #96]	@ (8001044 <MX_GPIO_Init+0x80>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_GPIO_Init+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_GPIO_Init+0x80>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <MX_GPIO_Init+0x80>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_GPIO_Init+0x80>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <MX_GPIO_Init+0x84>)
 800101a:	f000 fec9 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800101e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_GPIO_Init+0x84>)
 8001038:	f000 fd36 	bl	8001aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400
 800104c:	00000000 	.word	0x00000000

08001050 <calibre_steering>:

/* USER CODE BEGIN 4 */
void calibre_steering(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	@ 0x38
 8001054:	af00      	add	r7, sp, #0
	int32_t current = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t prev = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t counter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	TIM_OC_InitTypeDef sConfigOC;
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	488a      	ldr	r0, [pc, #552]	@ (8001290 <calibre_steering+0x240>)
 8001068:	f001 fda8 	bl	8002bbc <HAL_TIM_Encoder_Start>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106c:	2360      	movs	r3, #96	@ 0x60
 800106e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2208      	movs	r2, #8
 8001080:	4619      	mov	r1, r3
 8001082:	4884      	ldr	r0, [pc, #528]	@ (8001294 <calibre_steering+0x244>)
 8001084:	f001 ff18 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
	while(counter <= 5)
 8001088:	e036      	b.n	80010f8 <calibre_steering+0xa8>
	{
		current = (int32_t)(int16_t)TIM3->CNT;
 800108a:	4b83      	ldr	r3, [pc, #524]	@ (8001298 <calibre_steering+0x248>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	b21b      	sxth	r3, r3
 8001090:	637b      	str	r3, [r7, #52]	@ 0x34
		prev = current;
 8001092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800109c:	487f      	ldr	r0, [pc, #508]	@ (800129c <calibre_steering+0x24c>)
 800109e:	f000 fe87 	bl	8001db0 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 35000;
 80010a2:	f648 03b8 	movw	r3, #35000	@ 0x88b8
 80010a6:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2208      	movs	r2, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	4879      	ldr	r0, [pc, #484]	@ (8001294 <calibre_steering+0x244>)
 80010b0:	f001 ff02 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80010b4:	2108      	movs	r1, #8
 80010b6:	4877      	ldr	r0, [pc, #476]	@ (8001294 <calibre_steering+0x244>)
 80010b8:	f001 fc2a 	bl	8002910 <HAL_TIM_PWM_Start>
		current = (int32_t)(int16_t)TIM3->CNT;
 80010bc:	4b76      	ldr	r3, [pc, #472]	@ (8001298 <calibre_steering+0x248>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
		if( current == prev || current == prev+1 || current == prev-1)
 80010c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d009      	beq.n	80010e0 <calibre_steering+0x90>
 80010cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ce:	3301      	adds	r3, #1
 80010d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d004      	beq.n	80010e0 <calibre_steering+0x90>
 80010d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d8:	3b01      	subs	r3, #1
 80010da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010dc:	429a      	cmp	r2, r3
 80010de:	d105      	bne.n	80010ec <calibre_steering+0x9c>
		{
			counter++;
 80010e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010e4:	3301      	adds	r3, #1
 80010e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80010ea:	e002      	b.n	80010f2 <calibre_steering+0xa2>
		}
		else
		{
			counter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		}
		HAL_Delay(100);
 80010f2:	2064      	movs	r0, #100	@ 0x64
 80010f4:	f000 fb40 	bl	8001778 <HAL_Delay>
	while(counter <= 5)
 80010f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d9c4      	bls.n	800108a <calibre_steering+0x3a>
	}
	sConfigOC.Pulse = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2208      	movs	r2, #8
 8001108:	4619      	mov	r1, r3
 800110a:	4862      	ldr	r0, [pc, #392]	@ (8001294 <calibre_steering+0x244>)
 800110c:	f001 fed4 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001110:	2108      	movs	r1, #8
 8001112:	4860      	ldr	r0, [pc, #384]	@ (8001294 <calibre_steering+0x244>)
 8001114:	f001 fbfc 	bl	8002910 <HAL_TIM_PWM_Start>

	Max_Steering_Right = current;
 8001118:	4a61      	ldr	r2, [pc, #388]	@ (80012a0 <calibre_steering+0x250>)
 800111a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111c:	6013      	str	r3, [r2, #0]

	HAL_Delay(500);
 800111e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001122:	f000 fb29 	bl	8001778 <HAL_Delay>

	counter = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	while(counter <= 5)
 800112c:	e036      	b.n	800119c <calibre_steering+0x14c>
	{
		current = (int32_t)(int16_t)TIM3->CNT;
 800112e:	4b5a      	ldr	r3, [pc, #360]	@ (8001298 <calibre_steering+0x248>)
 8001130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001132:	b21b      	sxth	r3, r3
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
		prev = current;
 8001136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_LEFT);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001140:	4856      	ldr	r0, [pc, #344]	@ (800129c <calibre_steering+0x24c>)
 8001142:	f000 fe35 	bl	8001db0 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 35000;
 8001146:	f648 03b8 	movw	r3, #35000	@ 0x88b8
 800114a:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2208      	movs	r2, #8
 8001150:	4619      	mov	r1, r3
 8001152:	4850      	ldr	r0, [pc, #320]	@ (8001294 <calibre_steering+0x244>)
 8001154:	f001 feb0 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001158:	2108      	movs	r1, #8
 800115a:	484e      	ldr	r0, [pc, #312]	@ (8001294 <calibre_steering+0x244>)
 800115c:	f001 fbd8 	bl	8002910 <HAL_TIM_PWM_Start>
		current = (int32_t)(int16_t)TIM3->CNT;
 8001160:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <calibre_steering+0x248>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	b21b      	sxth	r3, r3
 8001166:	637b      	str	r3, [r7, #52]	@ 0x34
		if( current == prev || current == prev+1 || current == prev-1)
 8001168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800116a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116c:	429a      	cmp	r2, r3
 800116e:	d009      	beq.n	8001184 <calibre_steering+0x134>
 8001170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001172:	3301      	adds	r3, #1
 8001174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001176:	429a      	cmp	r2, r3
 8001178:	d004      	beq.n	8001184 <calibre_steering+0x134>
 800117a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117c:	3b01      	subs	r3, #1
 800117e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001180:	429a      	cmp	r2, r3
 8001182:	d105      	bne.n	8001190 <calibre_steering+0x140>
		{
			counter++;
 8001184:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001188:	3301      	adds	r3, #1
 800118a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800118e:	e002      	b.n	8001196 <calibre_steering+0x146>
		}
		else
		{
			counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		}
		HAL_Delay(100);
 8001196:	2064      	movs	r0, #100	@ 0x64
 8001198:	f000 faee 	bl	8001778 <HAL_Delay>
	while(counter <= 5)
 800119c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011a0:	2b05      	cmp	r3, #5
 80011a2:	d9c4      	bls.n	800112e <calibre_steering+0xde>
	}
	sConfigOC.Pulse = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2208      	movs	r2, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	4839      	ldr	r0, [pc, #228]	@ (8001294 <calibre_steering+0x244>)
 80011b0:	f001 fe82 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011b4:	2108      	movs	r1, #8
 80011b6:	4837      	ldr	r0, [pc, #220]	@ (8001294 <calibre_steering+0x244>)
 80011b8:	f001 fbaa 	bl	8002910 <HAL_TIM_PWM_Start>

	Max_Steering_Left = current;
 80011bc:	4a39      	ldr	r2, [pc, #228]	@ (80012a4 <calibre_steering+0x254>)
 80011be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c0:	6013      	str	r3, [r2, #0]
	HAL_Delay(500);
 80011c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c6:	f000 fad7 	bl	8001778 <HAL_Delay>
//	HAL_Delay(500);
//	sConfigOC.Pulse = 0;
//	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

	int32_t middle = ((Max_Steering_Left + Max_Steering_Right) / 2);
 80011ca:	4b36      	ldr	r3, [pc, #216]	@ (80012a4 <calibre_steering+0x254>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <calibre_steering+0x250>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	0fda      	lsrs	r2, r3, #31
 80011d6:	4413      	add	r3, r2
 80011d8:	105b      	asrs	r3, r3, #1
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t max_steering_left_range = Max_Steering_Left * 0.6;
 80011dc:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <calibre_steering+0x254>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fa79 	bl	80006d8 <__aeabi_i2d>
 80011e6:	a328      	add	r3, pc, #160	@ (adr r3, 8001288 <calibre_steering+0x238>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7fe fff8 	bl	80001e0 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fad8 	bl	80007ac <__aeabi_d2iz>
 80011fc:	4603      	mov	r3, r0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t max_steering_right_range = Max_Steering_Right * 0.6;
 8001200:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <calibre_steering+0x250>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fa67 	bl	80006d8 <__aeabi_i2d>
 800120a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001288 <calibre_steering+0x238>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7fe ffe6 	bl	80001e0 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fac6 	bl	80007ac <__aeabi_d2iz>
 8001220:	4603      	mov	r3, r0
 8001222:	623b      	str	r3, [r7, #32]
	while( current >= middle)
 8001224:	e01a      	b.n	800125c <calibre_steering+0x20c>
	{
		current = (int32_t)(int16_t)TIM3->CNT;
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <calibre_steering+0x248>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122a:	b21b      	sxth	r3, r3
 800122c:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001234:	4819      	ldr	r0, [pc, #100]	@ (800129c <calibre_steering+0x24c>)
 8001236:	f000 fdbb 	bl	8001db0 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 35000;
 800123a:	f648 03b8 	movw	r3, #35000	@ 0x88b8
 800123e:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2208      	movs	r2, #8
 8001244:	4619      	mov	r1, r3
 8001246:	4813      	ldr	r0, [pc, #76]	@ (8001294 <calibre_steering+0x244>)
 8001248:	f001 fe36 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800124c:	2108      	movs	r1, #8
 800124e:	4811      	ldr	r0, [pc, #68]	@ (8001294 <calibre_steering+0x244>)
 8001250:	f001 fb5e 	bl	8002910 <HAL_TIM_PWM_Start>
		current = (int32_t)(int16_t)TIM3->CNT;
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <calibre_steering+0x248>)
 8001256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001258:	b21b      	sxth	r3, r3
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
	while( current >= middle)
 800125c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800125e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001260:	429a      	cmp	r2, r3
 8001262:	dae0      	bge.n	8001226 <calibre_steering+0x1d6>
	}
	sConfigOC.Pulse = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2208      	movs	r2, #8
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	@ (8001294 <calibre_steering+0x244>)
 8001270:	f001 fe22 	bl	8002eb8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001274:	2108      	movs	r1, #8
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <calibre_steering+0x244>)
 8001278:	f001 fb4a 	bl	8002910 <HAL_TIM_PWM_Start>
}
 800127c:	bf00      	nop
 800127e:	3738      	adds	r7, #56	@ 0x38
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	33333333 	.word	0x33333333
 800128c:	3fe33333 	.word	0x3fe33333
 8001290:	200000e0 	.word	0x200000e0
 8001294:	20000098 	.word	0x20000098
 8001298:	40000400 	.word	0x40000400
 800129c:	40020400 	.word	0x40020400
 80012a0:	20000180 	.word	0x20000180
 80012a4:	20000184 	.word	0x20000184

080012a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f003 fa91 	bl	80047d8 <osDelay>
 80012b6:	e7fb      	b.n	80012b0 <StartDefaultTask+0x8>

080012b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c8:	d101      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ca:	f000 fa35 	bl	8001738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012da:	b672      	cpsid	i
}
 80012dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012de:	bf00      	nop
 80012e0:	e7fd      	b.n	80012de <Error_Handler+0x8>
	...

080012e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_MspInit+0x54>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <HAL_MspInit+0x54>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_MspInit+0x54>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <HAL_MspInit+0x54>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <HAL_MspInit+0x54>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_MspInit+0x54>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	210f      	movs	r1, #15
 8001326:	f06f 0001 	mvn.w	r0, #1
 800132a:	f000 fb01 	bl	8001930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_TIM_PWM_MspInit+0x3c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10d      	bne.n	800136a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_TIM_PWM_MspInit+0x40>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a09      	ldr	r2, [pc, #36]	@ (800137c <HAL_TIM_PWM_MspInit+0x40>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_TIM_PWM_MspInit+0x40>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40010000 	.word	0x40010000
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_TIM_Encoder_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12b      	bne.n	80013fa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x88>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x88>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x88>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x88>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <HAL_TIM_Encoder_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013da:	23c0      	movs	r3, #192	@ 0xc0
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ea:	2302      	movs	r3, #2
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <HAL_TIM_Encoder_MspInit+0x8c>)
 80013f6:	f000 fb57 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40000400 	.word	0x40000400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <HAL_TIM_MspPostInit+0x68>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d11e      	bne.n	8001470 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_TIM_MspPostInit+0x6c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800144e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <HAL_TIM_MspPostInit+0x70>)
 800146c:	f000 fb1c 	bl	8001aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010000 	.word	0x40010000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <HAL_UART_MspInit+0x94>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d133      	bne.n	800150e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <HAL_UART_MspInit+0x98>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <HAL_UART_MspInit+0x98>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_UART_MspInit+0x98>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <HAL_UART_MspInit+0x98>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a14      	ldr	r2, [pc, #80]	@ (800151c <HAL_UART_MspInit+0x98>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_UART_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ee:	2307      	movs	r3, #7
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4809      	ldr	r0, [pc, #36]	@ (8001520 <HAL_UART_MspInit+0x9c>)
 80014fa:	f000 fad5 	bl	8001aa8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2105      	movs	r1, #5
 8001502:	2026      	movs	r0, #38	@ 0x26
 8001504:	f000 fa14 	bl	8001930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001508:	2026      	movs	r0, #38	@ 0x26
 800150a:	f000 fa2d 	bl	8001968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40004400 	.word	0x40004400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000

08001524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	@ 0x38
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b34      	ldr	r3, [pc, #208]	@ (800160c <HAL_InitTick+0xe8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	4a33      	ldr	r2, [pc, #204]	@ (800160c <HAL_InitTick+0xe8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6413      	str	r3, [r2, #64]	@ 0x40
 8001544:	4b31      	ldr	r3, [pc, #196]	@ (800160c <HAL_InitTick+0xe8>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001550:	f107 0210 	add.w	r2, r7, #16
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f89a 	bl	8002694 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800156a:	f001 f86b 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800156e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001570:	e004      	b.n	800157c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001572:	f001 f867 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8001576:	4603      	mov	r3, r0
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800157c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800157e:	4a24      	ldr	r2, [pc, #144]	@ (8001610 <HAL_InitTick+0xec>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	0c9b      	lsrs	r3, r3, #18
 8001586:	3b01      	subs	r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800158a:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <HAL_InitTick+0xf0>)
 800158c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001590:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001592:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <HAL_InitTick+0xf0>)
 8001594:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001598:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800159a:	4a1e      	ldr	r2, [pc, #120]	@ (8001614 <HAL_InitTick+0xf0>)
 800159c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800159e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <HAL_InitTick+0xf0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <HAL_InitTick+0xf0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <HAL_InitTick+0xf0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80015b2:	4818      	ldr	r0, [pc, #96]	@ (8001614 <HAL_InitTick+0xf0>)
 80015b4:	f001 f8a0 	bl	80026f8 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11b      	bne.n	80015fe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80015c6:	4813      	ldr	r0, [pc, #76]	@ (8001614 <HAL_InitTick+0xf0>)
 80015c8:	f001 f8f0 	bl	80027ac <HAL_TIM_Base_Start_IT>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d111      	bne.n	80015fe <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015da:	201c      	movs	r0, #28
 80015dc:	f000 f9c4 	bl	8001968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d808      	bhi.n	80015f8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80015e6:	2200      	movs	r2, #0
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	201c      	movs	r0, #28
 80015ec:	f000 f9a0 	bl	8001930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f0:	4a09      	ldr	r2, [pc, #36]	@ (8001618 <HAL_InitTick+0xf4>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e002      	b.n	80015fe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001602:	4618      	mov	r0, r3
 8001604:	3738      	adds	r7, #56	@ 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	431bde83 	.word	0x431bde83
 8001614:	20000188 	.word	0x20000188
 8001618:	20000004 	.word	0x20000004

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <NMI_Handler+0x4>

08001624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <MemManage_Handler+0x4>

08001634 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <UsageFault_Handler+0x4>

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <TIM2_IRQHandler+0x10>)
 800165a:	f001 fb3d 	bl	8002cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000188 	.word	0x20000188

08001668 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <USART2_IRQHandler+0x10>)
 800166e:	f002 f895 	bl	800379c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000128 	.word	0x20000128

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016a4:	f7ff ffea 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	@ (80016ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f005 fec1 	bl	8007454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d2:	f7ff faa7 	bl	8000c24 <main>
  bx  lr    
 80016d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80016e4:	08007688 	.word	0x08007688
  ldr r2, =_sbss
 80016e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80016ec:	20004cfc 	.word	0x20004cfc

080016f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <HAL_Init+0x40>)
 80016fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_Init+0x40>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800170e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001710:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_Init+0x40>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171c:	2003      	movs	r0, #3
 800171e:	f000 f8fc 	bl	800191a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001722:	200f      	movs	r0, #15
 8001724:	f7ff fefe 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001728:	f7ff fddc 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023c00 	.word	0x40023c00

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008
 800175c:	200001d0 	.word	0x200001d0

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200001d0 	.word	0x200001d0

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff ffee 	bl	8001760 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_Delay+0x44>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffde 	bl	8001760 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	@ (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	@ (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	@ 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff4c 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001942:	f7ff ff61 	bl	8001808 <__NVIC_GetPriorityGrouping>
 8001946:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	6978      	ldr	r0, [r7, #20]
 800194e:	f7ff ffb1 	bl	80018b4 <NVIC_EncodePriority>
 8001952:	4602      	mov	r2, r0
 8001954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff80 	bl	8001860 <__NVIC_SetPriority>
}
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff54 	bl	8001824 <__NVIC_EnableIRQ>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001992:	f7ff fee5 	bl	8001760 <HAL_GetTick>
 8001996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e052      	b.n	8001a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0216 	bic.w	r2, r2, #22
 80019c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <HAL_DMA_Abort+0x62>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0208 	bic.w	r2, r2, #8
 80019f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a06:	e013      	b.n	8001a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a08:	f7ff feaa 	bl	8001760 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	d90c      	bls.n	8001a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2203      	movs	r2, #3
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e015      	b.n	8001a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e4      	bne.n	8001a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a42:	223f      	movs	r2, #63	@ 0x3f
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d004      	beq.n	8001a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2280      	movs	r2, #128	@ 0x80
 8001a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00c      	b.n	8001a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2205      	movs	r2, #5
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e159      	b.n	8001d78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8148 	bne.w	8001d72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d005      	beq.n	8001afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d130      	bne.n	8001b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2203      	movs	r2, #3
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d017      	beq.n	8001b98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d123      	bne.n	8001bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	08da      	lsrs	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3208      	adds	r2, #8
 8001bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	220f      	movs	r2, #15
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	69b9      	ldr	r1, [r7, #24]
 8001be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a2 	beq.w	8001d72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b57      	ldr	r3, [pc, #348]	@ (8001d90 <HAL_GPIO_Init+0x2e8>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a56      	ldr	r2, [pc, #344]	@ (8001d90 <HAL_GPIO_Init+0x2e8>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b54      	ldr	r3, [pc, #336]	@ (8001d90 <HAL_GPIO_Init+0x2e8>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4a:	4a52      	ldr	r2, [pc, #328]	@ (8001d94 <HAL_GPIO_Init+0x2ec>)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a49      	ldr	r2, [pc, #292]	@ (8001d98 <HAL_GPIO_Init+0x2f0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x202>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a48      	ldr	r2, [pc, #288]	@ (8001d9c <HAL_GPIO_Init+0x2f4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x1fe>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a47      	ldr	r2, [pc, #284]	@ (8001da0 <HAL_GPIO_Init+0x2f8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x1fa>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a46      	ldr	r2, [pc, #280]	@ (8001da4 <HAL_GPIO_Init+0x2fc>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x1f6>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a45      	ldr	r2, [pc, #276]	@ (8001da8 <HAL_GPIO_Init+0x300>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x1f2>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x204>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x204>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x204>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x204>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x204>
 8001caa:	2300      	movs	r3, #0
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	@ (8001d94 <HAL_GPIO_Init+0x2ec>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b38      	ldr	r3, [pc, #224]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a2f      	ldr	r2, [pc, #188]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a24      	ldr	r2, [pc, #144]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1e:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d42:	4a1a      	ldr	r2, [pc, #104]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8001dac <HAL_GPIO_Init+0x304>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3301      	adds	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	f67f aea2 	bls.w	8001ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	bf00      	nop
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020400 	.word	0x40020400
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dcc:	e003      	b.n	8001dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e267      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d075      	beq.n	8001eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e02:	4b88      	ldr	r3, [pc, #544]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d00c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b85      	ldr	r3, [pc, #532]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d112      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	4b7e      	ldr	r3, [pc, #504]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d05b      	beq.n	8001eec <HAL_RCC_OscConfig+0x108>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d157      	bne.n	8001eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e242      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x74>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x98>
 8001e62:	4b70      	ldr	r3, [pc, #448]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6f      	ldr	r2, [pc, #444]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6c      	ldr	r2, [pc, #432]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e7c:	4b69      	ldr	r3, [pc, #420]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a68      	ldr	r2, [pc, #416]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b66      	ldr	r3, [pc, #408]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a65      	ldr	r2, [pc, #404]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fc60 	bl	8001760 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fc5c 	bl	8001760 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e207      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xc0>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fc4c 	bl	8001760 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fc48 	bl	8001760 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1f3      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b51      	ldr	r3, [pc, #324]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0xe8>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d063      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001efa:	4b4a      	ldr	r3, [pc, #296]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b44      	ldr	r3, [pc, #272]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1c7      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4937      	ldr	r1, [pc, #220]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e03a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff fc01 	bl	8001760 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f62:	f7ff fbfd 	bl	8001760 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1a8      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4925      	ldr	r1, [pc, #148]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fbe0 	bl	8001760 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fbdc 	bl	8001760 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e187      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d036      	beq.n	800203c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_RCC_OscConfig+0x248>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fbc0 	bl	8001760 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fbbc 	bl	8001760 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e167      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x200>
 8002002:	e01b      	b.n	800203c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <HAL_RCC_OscConfig+0x248>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fba9 	bl	8001760 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	e00e      	b.n	8002030 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002012:	f7ff fba5 	bl	8001760 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d907      	bls.n	8002030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e150      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002024:	40023800 	.word	0x40023800
 8002028:	42470000 	.word	0x42470000
 800202c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ea      	bne.n	8002012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8097 	beq.w	8002178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b81      	ldr	r3, [pc, #516]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b7d      	ldr	r3, [pc, #500]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	4a7c      	ldr	r2, [pc, #496]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	@ 0x40
 800206a:	4b7a      	ldr	r3, [pc, #488]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b77      	ldr	r3, [pc, #476]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b74      	ldr	r3, [pc, #464]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a73      	ldr	r2, [pc, #460]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7ff fb65 	bl	8001760 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7ff fb61 	bl	8001760 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e10c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x2ea>
 80020c0:	4b64      	ldr	r3, [pc, #400]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c4:	4a63      	ldr	r2, [pc, #396]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x30c>
 80020d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020da:	4a5e      	ldr	r2, [pc, #376]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020f0:	4b58      	ldr	r3, [pc, #352]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f4:	4a57      	ldr	r2, [pc, #348]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fc:	4b55      	ldr	r3, [pc, #340]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002100:	4a54      	ldr	r2, [pc, #336]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d015      	beq.n	800213c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff fb26 	bl	8001760 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7ff fb22 	bl	8001760 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0cb      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0ee      	beq.n	8002118 <HAL_RCC_OscConfig+0x334>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7ff fb10 	bl	8001760 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7ff fb0c 	bl	8001760 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0b5      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	4b3e      	ldr	r3, [pc, #248]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ee      	bne.n	8002144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	4a38      	ldr	r2, [pc, #224]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80a1 	beq.w	80022c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002182:	4b34      	ldr	r3, [pc, #208]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	d05c      	beq.n	8002248 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d141      	bne.n	800221a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b31      	ldr	r3, [pc, #196]	@ (800225c <HAL_RCC_OscConfig+0x478>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fae0 	bl	8001760 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a4:	f7ff fadc 	bl	8001760 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e087      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	491b      	ldr	r1, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_RCC_OscConfig+0x478>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7ff fab5 	bl	8001760 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff fab1 	bl	8001760 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e05c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x416>
 8002218:	e054      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_RCC_OscConfig+0x478>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fa9e 	bl	8001760 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff fa9a 	bl	8001760 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e045      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x444>
 8002246:	e03d      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e038      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_RCC_OscConfig+0x4ec>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d028      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d121      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d11a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002298:	4293      	cmp	r3, r2
 800229a:	d111      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0cc      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b68      	ldr	r3, [pc, #416]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d90c      	bls.n	8002310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b65      	ldr	r3, [pc, #404]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a52      	ldr	r2, [pc, #328]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800234a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b3f      	ldr	r3, [pc, #252]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e067      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b37      	ldr	r3, [pc, #220]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4934      	ldr	r1, [pc, #208]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7ff f9cc 	bl	8001760 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7ff f9c8 	bl	8001760 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e04f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20c      	bcs.n	800241c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b22      	ldr	r3, [pc, #136]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f852 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00
 8002490:	40023800 	.word	0x40023800
 8002494:	08007660 	.word	0x08007660
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b090      	sub	sp, #64	@ 0x40
 80024a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ac:	2300      	movs	r3, #0
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x40>
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	f200 80a1 	bhi.w	800260c <HAL_RCC_GetSysClockFreq+0x16c>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x3a>
 80024d2:	e09b      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x184>)
 80024d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80024d8:	e09b      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024da:	4b53      	ldr	r3, [pc, #332]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x188>)
 80024dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024de:	e098      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d028      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	2200      	movs	r2, #0
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	627a      	str	r2, [r7, #36]	@ 0x24
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002508:	2100      	movs	r1, #0
 800250a:	4b47      	ldr	r3, [pc, #284]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x188>)
 800250c:	fb03 f201 	mul.w	r2, r3, r1
 8002510:	2300      	movs	r3, #0
 8002512:	fb00 f303 	mul.w	r3, r0, r3
 8002516:	4413      	add	r3, r2
 8002518:	4a43      	ldr	r2, [pc, #268]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x188>)
 800251a:	fba0 1202 	umull	r1, r2, r0, r2
 800251e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002520:	460a      	mov	r2, r1
 8002522:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002526:	4413      	add	r3, r2
 8002528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252c:	2200      	movs	r2, #0
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	61fa      	str	r2, [r7, #28]
 8002532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002536:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800253a:	f7fe f95f 	bl	80007fc <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4613      	mov	r3, r2
 8002544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002546:	e053      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002548:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	2200      	movs	r2, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	617a      	str	r2, [r7, #20]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800255a:	f04f 0b00 	mov.w	fp, #0
 800255e:	4652      	mov	r2, sl
 8002560:	465b      	mov	r3, fp
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002570:	0150      	lsls	r0, r2, #5
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	ebb2 080a 	subs.w	r8, r2, sl
 800257a:	eb63 090b 	sbc.w	r9, r3, fp
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800258a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800258e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002592:	ebb2 0408 	subs.w	r4, r2, r8
 8002596:	eb63 0509 	sbc.w	r5, r3, r9
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	00eb      	lsls	r3, r5, #3
 80025a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a8:	00e2      	lsls	r2, r4, #3
 80025aa:	4614      	mov	r4, r2
 80025ac:	461d      	mov	r5, r3
 80025ae:	eb14 030a 	adds.w	r3, r4, sl
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	eb45 030b 	adc.w	r3, r5, fp
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c6:	4629      	mov	r1, r5
 80025c8:	028b      	lsls	r3, r1, #10
 80025ca:	4621      	mov	r1, r4
 80025cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d0:	4621      	mov	r1, r4
 80025d2:	028a      	lsls	r2, r1, #10
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	2200      	movs	r2, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	60fa      	str	r2, [r7, #12]
 80025e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025e4:	f7fe f90a 	bl	80007fc <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4613      	mov	r3, r2
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002600:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800260a:	e002      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x184>)
 800260e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002614:	4618      	mov	r0, r3
 8002616:	3740      	adds	r7, #64	@ 0x40
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	00f42400 	.word	0x00f42400
 8002628:	017d7840 	.word	0x017d7840

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a9b      	lsrs	r3, r3, #10
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	@ (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	08007670 	.word	0x08007670

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffdc 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08007670 	.word	0x08007670

08002694 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	220f      	movs	r2, #15
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026a4:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_RCC_GetClockConfig+0x5c>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0203 	and.w	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026b0:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <HAL_RCC_GetClockConfig+0x5c>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_RCC_GetClockConfig+0x5c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <HAL_RCC_GetClockConfig+0x5c>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026d6:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <HAL_RCC_GetClockConfig+0x60>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0207 	and.w	r2, r3, #7
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40023c00 	.word	0x40023c00

080026f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e041      	b.n	800278e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f839 	bl	8002796 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 fca8 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e044      	b.n	800284e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	@ (800285c <HAL_TIM_Base_Start_IT+0xb0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d018      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x6c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ee:	d013      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x6c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <HAL_TIM_Base_Start_IT+0xb4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00e      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x6c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a19      	ldr	r2, [pc, #100]	@ (8002864 <HAL_TIM_Base_Start_IT+0xb8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x6c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <HAL_TIM_Base_Start_IT+0xbc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x6c>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a16      	ldr	r2, [pc, #88]	@ (800286c <HAL_TIM_Base_Start_IT+0xc0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d111      	bne.n	800283c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b06      	cmp	r3, #6
 8002828:	d010      	beq.n	800284c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283a:	e007      	b.n	800284c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40010000 	.word	0x40010000
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800
 8002868:	40000c00 	.word	0x40000c00
 800286c:	40014000 	.word	0x40014000

08002870 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e041      	b.n	8002906 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe fd50 	bl	800133c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f000 fbec 	bl	800308c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d109      	bne.n	8002934 <HAL_TIM_PWM_Start+0x24>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e022      	b.n	800297a <HAL_TIM_PWM_Start+0x6a>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d109      	bne.n	800294e <HAL_TIM_PWM_Start+0x3e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e015      	b.n	800297a <HAL_TIM_PWM_Start+0x6a>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d109      	bne.n	8002968 <HAL_TIM_PWM_Start+0x58>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e008      	b.n	800297a <HAL_TIM_PWM_Start+0x6a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e068      	b.n	8002a54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PWM_Start+0x82>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002990:	e013      	b.n	80029ba <HAL_TIM_PWM_Start+0xaa>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b04      	cmp	r3, #4
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start+0x92>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029a0:	e00b      	b.n	80029ba <HAL_TIM_PWM_Start+0xaa>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_PWM_Start+0xa2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029b0:	e003      	b.n	80029ba <HAL_TIM_PWM_Start+0xaa>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fd7a 	bl	80034bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_TIM_PWM_Start+0x14c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d107      	bne.n	80029e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <HAL_TIM_PWM_Start+0x14c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d018      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x10e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f4:	d013      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x10e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_TIM_PWM_Start+0x150>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00e      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x10e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <HAL_TIM_PWM_Start+0x154>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d009      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x10e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	@ (8002a68 <HAL_TIM_PWM_Start+0x158>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_TIM_PWM_Start+0x10e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a14      	ldr	r2, [pc, #80]	@ (8002a6c <HAL_TIM_PWM_Start+0x15c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d111      	bne.n	8002a42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b06      	cmp	r3, #6
 8002a2e:	d010      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a40:	e007      	b.n	8002a52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40014000 	.word	0x40014000

08002a70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e097      	b.n	8002bb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fe fc71 	bl	8001380 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ab4:	f023 0307 	bic.w	r3, r3, #7
 8002ab8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f000 fae1 	bl	800308c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	4313      	orrs	r3, r2
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002b10:	f023 030c 	bic.w	r3, r3, #12
 8002b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	011a      	lsls	r2, r3, #4
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	031b      	lsls	r3, r3, #12
 8002b40:	4313      	orrs	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	4313      	orrs	r3, r2
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bcc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bdc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002be4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d110      	bne.n	8002c0e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002bf2:	7b7b      	ldrb	r3, [r7, #13]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d001      	beq.n	8002bfc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e069      	b.n	8002cd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c0c:	e031      	b.n	8002c72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d110      	bne.n	8002c36 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c14:	7bbb      	ldrb	r3, [r7, #14]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d102      	bne.n	8002c20 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c1a:	7b3b      	ldrb	r3, [r7, #12]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d001      	beq.n	8002c24 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e055      	b.n	8002cd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c34:	e01d      	b.n	8002c72 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c42:	7b7b      	ldrb	r3, [r7, #13]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c48:	7b3b      	ldrb	r3, [r7, #12]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e03e      	b.n	8002cd0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_TIM_Encoder_Start+0xc4>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d008      	beq.n	8002c90 <HAL_TIM_Encoder_Start+0xd4>
 8002c7e:	e00f      	b.n	8002ca0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fc17 	bl	80034bc <TIM_CCxChannelCmd>
      break;
 8002c8e:	e016      	b.n	8002cbe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	2104      	movs	r1, #4
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fc0f 	bl	80034bc <TIM_CCxChannelCmd>
      break;
 8002c9e:	e00e      	b.n	8002cbe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fc07 	bl	80034bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fc00 	bl	80034bc <TIM_CCxChannelCmd>
      break;
 8002cbc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d020      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01b      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0202 	mvn.w	r2, #2
 8002d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f994 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002d28:	e005      	b.n	8002d36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f986 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f997 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d020      	beq.n	8002d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01b      	beq.n	8002d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0204 	mvn.w	r2, #4
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f96e 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f960 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f971 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d020      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01b      	beq.n	8002dd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0208 	mvn.w	r2, #8
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2204      	movs	r2, #4
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f948 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f93a 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f94b 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d020      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01b      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f06f 0210 	mvn.w	r2, #16
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2208      	movs	r2, #8
 8002df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f922 	bl	8003050 <HAL_TIM_IC_CaptureCallback>
 8002e0c:	e005      	b.n	8002e1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f914 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f925 	bl	8003064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0201 	mvn.w	r2, #1
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe fa3a 	bl	80012b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fc1a 	bl	800369c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00c      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f8f6 	bl	8003078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0220 	mvn.w	r2, #32
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fbec 	bl	8003688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0ae      	b.n	8003034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	f200 809f 	bhi.w	8003024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	08003025 	.word	0x08003025
 8002ef4:	08003025 	.word	0x08003025
 8002ef8:	08003025 	.word	0x08003025
 8002efc:	08002f61 	.word	0x08002f61
 8002f00:	08003025 	.word	0x08003025
 8002f04:	08003025 	.word	0x08003025
 8002f08:	08003025 	.word	0x08003025
 8002f0c:	08002fa3 	.word	0x08002fa3
 8002f10:	08003025 	.word	0x08003025
 8002f14:	08003025 	.word	0x08003025
 8002f18:	08003025 	.word	0x08003025
 8002f1c:	08002fe3 	.word	0x08002fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f93c 	bl	80031a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0208 	orr.w	r2, r2, #8
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	619a      	str	r2, [r3, #24]
      break;
 8002f5e:	e064      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f982 	bl	8003270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	619a      	str	r2, [r3, #24]
      break;
 8002fa0:	e043      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f9cd 	bl	8003348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0208 	orr.w	r2, r2, #8
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0204 	bic.w	r2, r2, #4
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	61da      	str	r2, [r3, #28]
      break;
 8002fe0:	e023      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fa17 	bl	800341c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	021a      	lsls	r2, r3, #8
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	61da      	str	r2, [r3, #28]
      break;
 8003022:	e002      	b.n	800302a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
      break;
 8003028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3a      	ldr	r2, [pc, #232]	@ (8003188 <TIM_Base_SetConfig+0xfc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00f      	beq.n	80030c4 <TIM_Base_SetConfig+0x38>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030aa:	d00b      	beq.n	80030c4 <TIM_Base_SetConfig+0x38>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a37      	ldr	r2, [pc, #220]	@ (800318c <TIM_Base_SetConfig+0x100>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d007      	beq.n	80030c4 <TIM_Base_SetConfig+0x38>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a36      	ldr	r2, [pc, #216]	@ (8003190 <TIM_Base_SetConfig+0x104>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d003      	beq.n	80030c4 <TIM_Base_SetConfig+0x38>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a35      	ldr	r2, [pc, #212]	@ (8003194 <TIM_Base_SetConfig+0x108>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d108      	bne.n	80030d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003188 <TIM_Base_SetConfig+0xfc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01b      	beq.n	8003116 <TIM_Base_SetConfig+0x8a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e4:	d017      	beq.n	8003116 <TIM_Base_SetConfig+0x8a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a28      	ldr	r2, [pc, #160]	@ (800318c <TIM_Base_SetConfig+0x100>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a27      	ldr	r2, [pc, #156]	@ (8003190 <TIM_Base_SetConfig+0x104>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00f      	beq.n	8003116 <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a26      	ldr	r2, [pc, #152]	@ (8003194 <TIM_Base_SetConfig+0x108>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00b      	beq.n	8003116 <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a25      	ldr	r2, [pc, #148]	@ (8003198 <TIM_Base_SetConfig+0x10c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d007      	beq.n	8003116 <TIM_Base_SetConfig+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a24      	ldr	r2, [pc, #144]	@ (800319c <TIM_Base_SetConfig+0x110>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d003      	beq.n	8003116 <TIM_Base_SetConfig+0x8a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a23      	ldr	r2, [pc, #140]	@ (80031a0 <TIM_Base_SetConfig+0x114>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d108      	bne.n	8003128 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800311c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a0e      	ldr	r2, [pc, #56]	@ (8003188 <TIM_Base_SetConfig+0xfc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d103      	bne.n	800315c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f023 0201 	bic.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	611a      	str	r2, [r3, #16]
  }
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40010000 	.word	0x40010000
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800
 8003194:	40000c00 	.word	0x40000c00
 8003198:	40014000 	.word	0x40014000
 800319c:	40014400 	.word	0x40014400
 80031a0:	40014800 	.word	0x40014800

080031a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f023 0201 	bic.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 0302 	bic.w	r3, r3, #2
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <TIM_OC1_SetConfig+0xc8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10c      	bne.n	800321a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0308 	bic.w	r3, r3, #8
 8003206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a13      	ldr	r2, [pc, #76]	@ (800326c <TIM_OC1_SetConfig+0xc8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d111      	bne.n	8003246 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40010000 	.word	0x40010000

08003270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 0210 	bic.w	r2, r3, #16
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0320 	bic.w	r3, r3, #32
 80032ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003344 <TIM_OC2_SetConfig+0xd4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10d      	bne.n	80032ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a15      	ldr	r2, [pc, #84]	@ (8003344 <TIM_OC2_SetConfig+0xd4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d113      	bne.n	800331c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000

08003348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <TIM_OC3_SetConfig+0xd0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10d      	bne.n	80033c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a14      	ldr	r2, [pc, #80]	@ (8003418 <TIM_OC3_SetConfig+0xd0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d113      	bne.n	80033f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	621a      	str	r2, [r3, #32]
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	40010000 	.word	0x40010000

0800341c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	031b      	lsls	r3, r3, #12
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <TIM_OC4_SetConfig+0x9c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d109      	bne.n	8003490 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000

080034bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2201      	movs	r2, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	43db      	mvns	r3, r3
 80034de:	401a      	ands	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800351c:	2302      	movs	r3, #2
 800351e:	e050      	b.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1c      	ldr	r2, [pc, #112]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d018      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356c:	d013      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a18      	ldr	r2, [pc, #96]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a16      	ldr	r2, [pc, #88]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a13      	ldr	r2, [pc, #76]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10c      	bne.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800359c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40014000 	.word	0x40014000

080035e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e03d      	b.n	800367c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e042      	b.n	8003748 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd fed4 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	@ 0x24
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fcdb 	bl	80040b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	4613      	mov	r3, r2
 800375c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	d112      	bne.n	8003790 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Receive_IT+0x26>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e00b      	b.n	8003792 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	461a      	mov	r2, r3
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 faba 	bl	8003d00 <UART_Start_Receive_IT>
 800378c:	4603      	mov	r3, r0
 800378e:	e000      	b.n	8003792 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b0ba      	sub	sp, #232	@ 0xe8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_UART_IRQHandler+0x66>
 80037ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fb99 	bl	8003f32 <UART_Receive_IT>
      return;
 8003800:	e25b      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80de 	beq.w	80039c8 <HAL_UART_IRQHandler+0x22c>
 800380c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80d1 	beq.w	80039c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_UART_IRQHandler+0xae>
 8003832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_UART_IRQHandler+0xd2>
 8003856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f043 0202 	orr.w	r2, r3, #2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_UART_IRQHandler+0xf6>
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d011      	beq.n	80038c2 <HAL_UART_IRQHandler+0x126>
 800389e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f043 0208 	orr.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 81f2 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_UART_IRQHandler+0x14e>
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb24 	bl	8003f32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <HAL_UART_IRQHandler+0x17a>
 800390e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04f      	beq.n	80039b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa2c 	bl	8003d74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003926:	2b40      	cmp	r3, #64	@ 0x40
 8003928:	d141      	bne.n	80039ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3314      	adds	r3, #20
 8003930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003940:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003956:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800395a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800396e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1d9      	bne.n	800392a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d013      	beq.n	80039a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003982:	4a7e      	ldr	r2, [pc, #504]	@ (8003b7c <HAL_UART_IRQHandler+0x3e0>)
 8003984:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f86a 	bl	8001a64 <HAL_DMA_Abort_IT>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d016      	beq.n	80039c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039a0:	4610      	mov	r0, r2
 80039a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	e00e      	b.n	80039c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f994 	bl	8003cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	e00a      	b.n	80039c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f990 	bl	8003cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b4:	e006      	b.n	80039c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f98c 	bl	8003cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039c2:	e175      	b.n	8003cb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	bf00      	nop
    return;
 80039c6:	e173      	b.n	8003cb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 814f 	bne.w	8003c70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8148 	beq.w	8003c70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8141 	beq.w	8003c70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	f040 80b6 	bne.w	8003b80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8145 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a32:	429a      	cmp	r2, r3
 8003a34:	f080 813e 	bcs.w	8003cb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4a:	f000 8088 	beq.w	8003b5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1d9      	bne.n	8003a4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003abe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e1      	bne.n	8003a9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003afa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003afc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e3      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2e:	f023 0310 	bic.w	r3, r3, #16
 8003b32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e3      	bne.n	8003b1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fd ff13 	bl	8001984 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8b7 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b7a:	e09b      	b.n	8003cb4 <HAL_UART_IRQHandler+0x518>
 8003b7c:	08003e3b 	.word	0x08003e3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 808e 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8089 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bca:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	623b      	str	r3, [r7, #32]
   return(result);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c02:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e3      	bne.n	8003bde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c48:	61fa      	str	r2, [r7, #28]
 8003c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	617b      	str	r3, [r7, #20]
   return(result);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e3      	bne.n	8003c24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f83d 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c6e:	e023      	b.n	8003cb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <HAL_UART_IRQHandler+0x4f4>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f8ea 	bl	8003e62 <UART_Transmit_IT>
    return;
 8003c8e:	e014      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <HAL_UART_IRQHandler+0x51e>
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f92a 	bl	8003f02 <UART_EndTransmit_IT>
    return;
 8003cae:	e004      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
    return;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
      return;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
      return;
 8003cb8:	bf00      	nop
  }
}
 8003cba:	37e8      	adds	r7, #232	@ 0xe8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2222      	movs	r2, #34	@ 0x22
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d44:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0220 	orr.w	r2, r2, #32
 8003d64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b095      	sub	sp, #84	@ 0x54
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003da2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3314      	adds	r3, #20
 8003dce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d119      	bne.n	8003e20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f023 0310 	bic.w	r3, r3, #16
 8003e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e0c:	61ba      	str	r2, [r7, #24]
 8003e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6979      	ldr	r1, [r7, #20]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e2e:	bf00      	nop
 8003e30:	3754      	adds	r7, #84	@ 0x54
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff ff3d 	bl	8003cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b21      	cmp	r3, #33	@ 0x21
 8003e74:	d13e      	bne.n	8003ef4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7e:	d114      	bne.n	8003eaa <UART_Transmit_IT+0x48>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d110      	bne.n	8003eaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	621a      	str	r2, [r3, #32]
 8003ea8:	e008      	b.n	8003ebc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	1c59      	adds	r1, r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6211      	str	r1, [r2, #32]
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10f      	bne.n	8003ef0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ede:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fecc 	bl	8003cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b08c      	sub	sp, #48	@ 0x30
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b22      	cmp	r3, #34	@ 0x22
 8003f44:	f040 80ae 	bne.w	80040a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f50:	d117      	bne.n	8003f82 <UART_Receive_IT+0x50>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d113      	bne.n	8003f82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7a:	1c9a      	adds	r2, r3, #2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f80:	e026      	b.n	8003fd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f94:	d007      	beq.n	8003fa6 <UART_Receive_IT+0x74>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <UART_Receive_IT+0x82>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e008      	b.n	8003fc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d15d      	bne.n	80040a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0220 	bic.w	r2, r2, #32
 8003ff2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	2b01      	cmp	r3, #1
 8004028:	d135      	bne.n	8004096 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	330c      	adds	r3, #12
 8004036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	613b      	str	r3, [r7, #16]
   return(result);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 0310 	bic.w	r3, r3, #16
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004050:	623a      	str	r2, [r7, #32]
 8004052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	69f9      	ldr	r1, [r7, #28]
 8004056:	6a3a      	ldr	r2, [r7, #32]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	61bb      	str	r3, [r7, #24]
   return(result);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e5      	bne.n	8004030 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b10      	cmp	r3, #16
 8004070:	d10a      	bne.n	8004088 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fe2a 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
 8004094:	e002      	b.n	800409c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fc fd74 	bl	8000b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e002      	b.n	80040a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3730      	adds	r7, #48	@ 0x30
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b4:	b0c0      	sub	sp, #256	@ 0x100
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	68d9      	ldr	r1, [r3, #12]
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	ea40 0301 	orr.w	r3, r0, r1
 80040d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	431a      	orrs	r2, r3
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004108:	f021 010c 	bic.w	r1, r1, #12
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004116:	430b      	orrs	r3, r1
 8004118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	6999      	ldr	r1, [r3, #24]
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	ea40 0301 	orr.w	r3, r0, r1
 8004136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b8f      	ldr	r3, [pc, #572]	@ (800437c <UART_SetConfig+0x2cc>)
 8004140:	429a      	cmp	r2, r3
 8004142:	d005      	beq.n	8004150 <UART_SetConfig+0xa0>
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <UART_SetConfig+0x2d0>)
 800414c:	429a      	cmp	r2, r3
 800414e:	d104      	bne.n	800415a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7fe fa8c 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 8004154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004158:	e003      	b.n	8004162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800415a:	f7fe fa73 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800415e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416c:	f040 810c 	bne.w	8004388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004174:	2200      	movs	r2, #0
 8004176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800417a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800417e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004182:	4622      	mov	r2, r4
 8004184:	462b      	mov	r3, r5
 8004186:	1891      	adds	r1, r2, r2
 8004188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800418a:	415b      	adcs	r3, r3
 800418c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800418e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004192:	4621      	mov	r1, r4
 8004194:	eb12 0801 	adds.w	r8, r2, r1
 8004198:	4629      	mov	r1, r5
 800419a:	eb43 0901 	adc.w	r9, r3, r1
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041b2:	4690      	mov	r8, r2
 80041b4:	4699      	mov	r9, r3
 80041b6:	4623      	mov	r3, r4
 80041b8:	eb18 0303 	adds.w	r3, r8, r3
 80041bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c0:	462b      	mov	r3, r5
 80041c2:	eb49 0303 	adc.w	r3, r9, r3
 80041c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041de:	460b      	mov	r3, r1
 80041e0:	18db      	adds	r3, r3, r3
 80041e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041e4:	4613      	mov	r3, r2
 80041e6:	eb42 0303 	adc.w	r3, r2, r3
 80041ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041f4:	f7fc fb02 	bl	80007fc <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b61      	ldr	r3, [pc, #388]	@ (8004384 <UART_SetConfig+0x2d4>)
 80041fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	011c      	lsls	r4, r3, #4
 8004206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	1891      	adds	r1, r2, r2
 800421e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004220:	415b      	adcs	r3, r3
 8004222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004228:	4641      	mov	r1, r8
 800422a:	eb12 0a01 	adds.w	sl, r2, r1
 800422e:	4649      	mov	r1, r9
 8004230:	eb43 0b01 	adc.w	fp, r3, r1
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004248:	4692      	mov	sl, r2
 800424a:	469b      	mov	fp, r3
 800424c:	4643      	mov	r3, r8
 800424e:	eb1a 0303 	adds.w	r3, sl, r3
 8004252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004256:	464b      	mov	r3, r9
 8004258:	eb4b 0303 	adc.w	r3, fp, r3
 800425c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800426c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004274:	460b      	mov	r3, r1
 8004276:	18db      	adds	r3, r3, r3
 8004278:	643b      	str	r3, [r7, #64]	@ 0x40
 800427a:	4613      	mov	r3, r2
 800427c:	eb42 0303 	adc.w	r3, r2, r3
 8004280:	647b      	str	r3, [r7, #68]	@ 0x44
 8004282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800428a:	f7fc fab7 	bl	80007fc <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4611      	mov	r1, r2
 8004294:	4b3b      	ldr	r3, [pc, #236]	@ (8004384 <UART_SetConfig+0x2d4>)
 8004296:	fba3 2301 	umull	r2, r3, r3, r1
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2264      	movs	r2, #100	@ 0x64
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	1acb      	subs	r3, r1, r3
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042aa:	4b36      	ldr	r3, [pc, #216]	@ (8004384 <UART_SetConfig+0x2d4>)
 80042ac:	fba3 2302 	umull	r2, r3, r3, r2
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042b8:	441c      	add	r4, r3
 80042ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	1891      	adds	r1, r2, r2
 80042d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042d4:	415b      	adcs	r3, r3
 80042d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042dc:	4641      	mov	r1, r8
 80042de:	1851      	adds	r1, r2, r1
 80042e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80042e2:	4649      	mov	r1, r9
 80042e4:	414b      	adcs	r3, r1
 80042e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042f4:	4659      	mov	r1, fp
 80042f6:	00cb      	lsls	r3, r1, #3
 80042f8:	4651      	mov	r1, sl
 80042fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fe:	4651      	mov	r1, sl
 8004300:	00ca      	lsls	r2, r1, #3
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	4603      	mov	r3, r0
 8004308:	4642      	mov	r2, r8
 800430a:	189b      	adds	r3, r3, r2
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004310:	464b      	mov	r3, r9
 8004312:	460a      	mov	r2, r1
 8004314:	eb42 0303 	adc.w	r3, r2, r3
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800432c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004330:	460b      	mov	r3, r1
 8004332:	18db      	adds	r3, r3, r3
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004336:	4613      	mov	r3, r2
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800433e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004346:	f7fc fa59 	bl	80007fc <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <UART_SetConfig+0x2d4>)
 8004350:	fba3 1302 	umull	r1, r3, r3, r2
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	2164      	movs	r1, #100	@ 0x64
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	3332      	adds	r3, #50	@ 0x32
 8004362:	4a08      	ldr	r2, [pc, #32]	@ (8004384 <UART_SetConfig+0x2d4>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	f003 0207 	and.w	r2, r3, #7
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4422      	add	r2, r4
 8004376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004378:	e106      	b.n	8004588 <UART_SetConfig+0x4d8>
 800437a:	bf00      	nop
 800437c:	40011000 	.word	0x40011000
 8004380:	40011400 	.word	0x40011400
 8004384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800438c:	2200      	movs	r2, #0
 800438e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800439a:	4642      	mov	r2, r8
 800439c:	464b      	mov	r3, r9
 800439e:	1891      	adds	r1, r2, r2
 80043a0:	6239      	str	r1, [r7, #32]
 80043a2:	415b      	adcs	r3, r3
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043aa:	4641      	mov	r1, r8
 80043ac:	1854      	adds	r4, r2, r1
 80043ae:	4649      	mov	r1, r9
 80043b0:	eb43 0501 	adc.w	r5, r3, r1
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	00eb      	lsls	r3, r5, #3
 80043be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c2:	00e2      	lsls	r2, r4, #3
 80043c4:	4614      	mov	r4, r2
 80043c6:	461d      	mov	r5, r3
 80043c8:	4643      	mov	r3, r8
 80043ca:	18e3      	adds	r3, r4, r3
 80043cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043d0:	464b      	mov	r3, r9
 80043d2:	eb45 0303 	adc.w	r3, r5, r3
 80043d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043f6:	4629      	mov	r1, r5
 80043f8:	008b      	lsls	r3, r1, #2
 80043fa:	4621      	mov	r1, r4
 80043fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004400:	4621      	mov	r1, r4
 8004402:	008a      	lsls	r2, r1, #2
 8004404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004408:	f7fc f9f8 	bl	80007fc <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4b60      	ldr	r3, [pc, #384]	@ (8004594 <UART_SetConfig+0x4e4>)
 8004412:	fba3 2302 	umull	r2, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	011c      	lsls	r4, r3, #4
 800441a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	1891      	adds	r1, r2, r2
 8004432:	61b9      	str	r1, [r7, #24]
 8004434:	415b      	adcs	r3, r3
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443c:	4641      	mov	r1, r8
 800443e:	1851      	adds	r1, r2, r1
 8004440:	6139      	str	r1, [r7, #16]
 8004442:	4649      	mov	r1, r9
 8004444:	414b      	adcs	r3, r1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004454:	4659      	mov	r1, fp
 8004456:	00cb      	lsls	r3, r1, #3
 8004458:	4651      	mov	r1, sl
 800445a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445e:	4651      	mov	r1, sl
 8004460:	00ca      	lsls	r2, r1, #3
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	4603      	mov	r3, r0
 8004468:	4642      	mov	r2, r8
 800446a:	189b      	adds	r3, r3, r2
 800446c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004470:	464b      	mov	r3, r9
 8004472:	460a      	mov	r2, r1
 8004474:	eb42 0303 	adc.w	r3, r2, r3
 8004478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004494:	4649      	mov	r1, r9
 8004496:	008b      	lsls	r3, r1, #2
 8004498:	4641      	mov	r1, r8
 800449a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800449e:	4641      	mov	r1, r8
 80044a0:	008a      	lsls	r2, r1, #2
 80044a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044a6:	f7fc f9a9 	bl	80007fc <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	4b38      	ldr	r3, [pc, #224]	@ (8004594 <UART_SetConfig+0x4e4>)
 80044b2:	fba3 2301 	umull	r2, r3, r3, r1
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2264      	movs	r2, #100	@ 0x64
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	1acb      	subs	r3, r1, r3
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	3332      	adds	r3, #50	@ 0x32
 80044c4:	4a33      	ldr	r2, [pc, #204]	@ (8004594 <UART_SetConfig+0x4e4>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d0:	441c      	add	r4, r3
 80044d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d6:	2200      	movs	r2, #0
 80044d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80044da:	677a      	str	r2, [r7, #116]	@ 0x74
 80044dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	415b      	adcs	r3, r3
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f0:	4641      	mov	r1, r8
 80044f2:	1851      	adds	r1, r2, r1
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	4649      	mov	r1, r9
 80044f8:	414b      	adcs	r3, r1
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004508:	4659      	mov	r1, fp
 800450a:	00cb      	lsls	r3, r1, #3
 800450c:	4651      	mov	r1, sl
 800450e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004512:	4651      	mov	r1, sl
 8004514:	00ca      	lsls	r2, r1, #3
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	4603      	mov	r3, r0
 800451c:	4642      	mov	r2, r8
 800451e:	189b      	adds	r3, r3, r2
 8004520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004522:	464b      	mov	r3, r9
 8004524:	460a      	mov	r2, r1
 8004526:	eb42 0303 	adc.w	r3, r2, r3
 800452a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	663b      	str	r3, [r7, #96]	@ 0x60
 8004536:	667a      	str	r2, [r7, #100]	@ 0x64
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004544:	4649      	mov	r1, r9
 8004546:	008b      	lsls	r3, r1, #2
 8004548:	4641      	mov	r1, r8
 800454a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800454e:	4641      	mov	r1, r8
 8004550:	008a      	lsls	r2, r1, #2
 8004552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004556:	f7fc f951 	bl	80007fc <__aeabi_uldivmod>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <UART_SetConfig+0x4e4>)
 8004560:	fba3 1302 	umull	r1, r3, r3, r2
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	2164      	movs	r1, #100	@ 0x64
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	3332      	adds	r3, #50	@ 0x32
 8004572:	4a08      	ldr	r2, [pc, #32]	@ (8004594 <UART_SetConfig+0x4e4>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	f003 020f 	and.w	r2, r3, #15
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4422      	add	r2, r4
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800458e:	46bd      	mov	sp, r7
 8004590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004594:	51eb851f 	.word	0x51eb851f

08004598 <__NVIC_SetPriority>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	db0a      	blt.n	80045c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	490c      	ldr	r1, [pc, #48]	@ (80045e4 <__NVIC_SetPriority+0x4c>)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	0112      	lsls	r2, r2, #4
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	440b      	add	r3, r1
 80045bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045c0:	e00a      	b.n	80045d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4908      	ldr	r1, [pc, #32]	@ (80045e8 <__NVIC_SetPriority+0x50>)
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3b04      	subs	r3, #4
 80045d0:	0112      	lsls	r2, r2, #4
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	440b      	add	r3, r1
 80045d6:	761a      	strb	r2, [r3, #24]
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000e100 	.word	0xe000e100
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045f0:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <SysTick_Handler+0x1c>)
 80045f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045f4:	f001 fe54 	bl	80062a0 <xTaskGetSchedulerState>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045fe:	f002 fc4b 	bl	8006e98 <xPortSysTickHandler>
  }
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	e000e010 	.word	0xe000e010

0800460c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004610:	2100      	movs	r1, #0
 8004612:	f06f 0004 	mvn.w	r0, #4
 8004616:	f7ff ffbf 	bl	8004598 <__NVIC_SetPriority>
#endif
}
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004626:	f3ef 8305 	mrs	r3, IPSR
 800462a:	603b      	str	r3, [r7, #0]
  return(result);
 800462c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004632:	f06f 0305 	mvn.w	r3, #5
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	e00c      	b.n	8004654 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800463a:	4b0a      	ldr	r3, [pc, #40]	@ (8004664 <osKernelInitialize+0x44>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004642:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <osKernelInitialize+0x44>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004648:	2300      	movs	r3, #0
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	e002      	b.n	8004654 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004654:	687b      	ldr	r3, [r7, #4]
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	200001d4 	.word	0x200001d4

08004668 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800466e:	f3ef 8305 	mrs	r3, IPSR
 8004672:	603b      	str	r3, [r7, #0]
  return(result);
 8004674:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <osKernelStart+0x1a>
    stat = osErrorISR;
 800467a:	f06f 0305 	mvn.w	r3, #5
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	e010      	b.n	80046a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004682:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <osKernelStart+0x48>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d109      	bne.n	800469e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800468a:	f7ff ffbf 	bl	800460c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800468e:	4b08      	ldr	r3, [pc, #32]	@ (80046b0 <osKernelStart+0x48>)
 8004690:	2202      	movs	r2, #2
 8004692:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004694:	f001 f9a0 	bl	80059d8 <vTaskStartScheduler>
      stat = osOK;
 8004698:	2300      	movs	r3, #0
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e002      	b.n	80046a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046a4:	687b      	ldr	r3, [r7, #4]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	200001d4 	.word	0x200001d4

080046b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08e      	sub	sp, #56	@ 0x38
 80046b8:	af04      	add	r7, sp, #16
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c4:	f3ef 8305 	mrs	r3, IPSR
 80046c8:	617b      	str	r3, [r7, #20]
  return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d17e      	bne.n	80047ce <osThreadNew+0x11a>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d07b      	beq.n	80047ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046d6:	2380      	movs	r3, #128	@ 0x80
 80046d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046da:	2318      	movs	r3, #24
 80046dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295
 80046e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d045      	beq.n	800477a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <osThreadNew+0x48>
        name = attr->name;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <osThreadNew+0x6e>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b38      	cmp	r3, #56	@ 0x38
 8004714:	d805      	bhi.n	8004722 <osThreadNew+0x6e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <osThreadNew+0x72>
        return (NULL);
 8004722:	2300      	movs	r3, #0
 8004724:	e054      	b.n	80047d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00e      	beq.n	800475c <osThreadNew+0xa8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2ba7      	cmp	r3, #167	@ 0xa7
 8004744:	d90a      	bls.n	800475c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800474a:	2b00      	cmp	r3, #0
 800474c:	d006      	beq.n	800475c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <osThreadNew+0xa8>
        mem = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e010      	b.n	800477e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10c      	bne.n	800477e <osThreadNew+0xca>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <osThreadNew+0xca>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <osThreadNew+0xca>
          mem = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e001      	b.n	800477e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d110      	bne.n	80047a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800478c:	9202      	str	r2, [sp, #8]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 ff28 	bl	80055f0 <xTaskCreateStatic>
 80047a0:	4603      	mov	r3, r0
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e013      	b.n	80047ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d110      	bne.n	80047ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	f107 0310 	add.w	r3, r7, #16
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 ff76 	bl	80056b0 <xTaskCreate>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d001      	beq.n	80047ce <osThreadNew+0x11a>
            hTask = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047ce:	693b      	ldr	r3, [r7, #16]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	@ 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e0:	f3ef 8305 	mrs	r3, IPSR
 80047e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <osDelay+0x1c>
    stat = osErrorISR;
 80047ec:	f06f 0305 	mvn.w	r3, #5
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e007      	b.n	8004804 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 f8b4 	bl	800596c <vTaskDelay>
    }
  }

  return (stat);
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800480e:	b580      	push	{r7, lr}
 8004810:	b088      	sub	sp, #32
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800481a:	f3ef 8305 	mrs	r3, IPSR
 800481e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004820:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004822:	2b00      	cmp	r3, #0
 8004824:	d174      	bne.n	8004910 <osMutexNew+0x102>
    if (attr != NULL) {
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <osMutexNew+0x26>
      type = attr->attr_bits;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e001      	b.n	8004838 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <osMutexNew+0x3a>
      rmtx = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e001      	b.n	800484c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d15c      	bne.n	8004910 <osMutexNew+0x102>
      mem = -1;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295
 800485a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d015      	beq.n	800488e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <osMutexNew+0x6a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004870:	d902      	bls.n	8004878 <osMutexNew+0x6a>
          mem = 1;
 8004872:	2301      	movs	r3, #1
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e00c      	b.n	8004892 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <osMutexNew+0x84>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <osMutexNew+0x84>
            mem = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	e001      	b.n	8004892 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d112      	bne.n	80048be <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	4619      	mov	r1, r3
 80048a4:	2004      	movs	r0, #4
 80048a6:	f000 fa98 	bl	8004dda <xQueueCreateMutexStatic>
 80048aa:	61f8      	str	r0, [r7, #28]
 80048ac:	e016      	b.n	80048dc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4619      	mov	r1, r3
 80048b4:	2001      	movs	r0, #1
 80048b6:	f000 fa90 	bl	8004dda <xQueueCreateMutexStatic>
 80048ba:	61f8      	str	r0, [r7, #28]
 80048bc:	e00e      	b.n	80048dc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80048ca:	2004      	movs	r0, #4
 80048cc:	f000 fa6d 	bl	8004daa <xQueueCreateMutex>
 80048d0:	61f8      	str	r0, [r7, #28]
 80048d2:	e003      	b.n	80048dc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80048d4:	2001      	movs	r0, #1
 80048d6:	f000 fa68 	bl	8004daa <xQueueCreateMutex>
 80048da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <osMutexNew+0xee>
        if (attr != NULL) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <osMutexNew+0xe2>
          name = attr->name;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e001      	b.n	80048f4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	69f8      	ldr	r0, [r7, #28]
 80048f8:	f000 fe1c 	bl	8005534 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <osMutexNew+0x102>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004910:	69fb      	ldr	r3, [r7, #28]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a07      	ldr	r2, [pc, #28]	@ (8004948 <vApplicationGetIdleTaskMemory+0x2c>)
 800492c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a06      	ldr	r2, [pc, #24]	@ (800494c <vApplicationGetIdleTaskMemory+0x30>)
 8004932:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2280      	movs	r2, #128	@ 0x80
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	200001d8 	.word	0x200001d8
 800494c:	20000280 	.word	0x20000280

08004950 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a07      	ldr	r2, [pc, #28]	@ (800497c <vApplicationGetTimerTaskMemory+0x2c>)
 8004960:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4a06      	ldr	r2, [pc, #24]	@ (8004980 <vApplicationGetTimerTaskMemory+0x30>)
 8004966:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000480 	.word	0x20000480
 8004980:	20000528 	.word	0x20000528

08004984 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f103 0208 	add.w	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f04f 32ff 	mov.w	r2, #4294967295
 800499c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f103 0208 	add.w	r2, r3, #8
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f103 0208 	add.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d103      	bne.n	8004a46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e00c      	b.n	8004a60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e002      	b.n	8004a54 <vListInsert+0x2e>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d2f6      	bcs.n	8004a4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6852      	ldr	r2, [r2, #4]
 8004ab8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d103      	bne.n	8004acc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	1e5a      	subs	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	e7fd      	b.n	8004b14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b18:	f002 f92e 	bl	8006d78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	441a      	add	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	441a      	add	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	22ff      	movs	r2, #255	@ 0xff
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	22ff      	movs	r2, #255	@ 0xff
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d114      	bne.n	8004b98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01a      	beq.n	8004bac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3310      	adds	r3, #16
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 f9ca 	bl	8005f14 <xTaskRemoveFromEventList>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d012      	beq.n	8004bac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <xQueueGenericReset+0xd0>)
 8004b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	e009      	b.n	8004bac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3310      	adds	r3, #16
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fef1 	bl	8004984 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3324      	adds	r3, #36	@ 0x24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff feec 	bl	8004984 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bac:	f002 f916 	bl	8006ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bb0:	2301      	movs	r3, #1
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	e000ed04 	.word	0xe000ed04

08004bc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08e      	sub	sp, #56	@ 0x38
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <xQueueGenericCreateStatic+0x56>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <xQueueGenericCreateStatic+0x5a>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <xQueueGenericCreateStatic+0x5c>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	623b      	str	r3, [r7, #32]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <xQueueGenericCreateStatic+0x84>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <xQueueGenericCreateStatic+0x88>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <xQueueGenericCreateStatic+0x8a>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61fb      	str	r3, [r7, #28]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c66:	2350      	movs	r3, #80	@ 0x50
 8004c68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b50      	cmp	r3, #80	@ 0x50
 8004c6e:	d00b      	beq.n	8004c88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	61bb      	str	r3, [r7, #24]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00d      	beq.n	8004cb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f840 	bl	8004d30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3730      	adds	r7, #48	@ 0x30
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b08a      	sub	sp, #40	@ 0x28
 8004cbe:	af02      	add	r7, sp, #8
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	613b      	str	r3, [r7, #16]
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	e7fd      	b.n	8004ce2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3350      	adds	r3, #80	@ 0x50
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f002 f961 	bl	8006fbc <pvPortMalloc>
 8004cfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	3350      	adds	r3, #80	@ 0x50
 8004d0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d14:	79fa      	ldrb	r2, [r7, #7]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f805 	bl	8004d30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d26:	69bb      	ldr	r3, [r7, #24]
	}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d5e:	2101      	movs	r1, #1
 8004d60:	69b8      	ldr	r0, [r7, #24]
 8004d62:	f7ff fec3 	bl	8004aec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00e      	beq.n	8004da2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d96:	2300      	movs	r3, #0
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f837 	bl	8004e10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	4603      	mov	r3, r0
 8004db2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004db4:	2301      	movs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6939      	ldr	r1, [r7, #16]
 8004dc2:	6978      	ldr	r0, [r7, #20]
 8004dc4:	f7ff ff79 	bl	8004cba <xQueueGenericCreate>
 8004dc8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ffd3 	bl	8004d76 <prvInitialiseMutex>

		return xNewQueue;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
	}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b088      	sub	sp, #32
 8004dde:	af02      	add	r7, sp, #8
 8004de0:	4603      	mov	r3, r0
 8004de2:	6039      	str	r1, [r7, #0]
 8004de4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004de6:	2301      	movs	r3, #1
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2200      	movs	r2, #0
 8004df6:	6939      	ldr	r1, [r7, #16]
 8004df8:	6978      	ldr	r0, [r7, #20]
 8004dfa:	f7ff fee1 	bl	8004bc0 <xQueueGenericCreateStatic>
 8004dfe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff ffb8 	bl	8004d76 <prvInitialiseMutex>

		return xNewQueue;
 8004e06:	68fb      	ldr	r3, [r7, #12]
	}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08e      	sub	sp, #56	@ 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <xQueueGenericSend+0x34>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <xQueueGenericSend+0x42>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <xQueueGenericSend+0x46>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericSend+0x48>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <xQueueGenericSend+0x64>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d103      	bne.n	8004e82 <xQueueGenericSend+0x72>
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <xQueueGenericSend+0x76>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <xQueueGenericSend+0x78>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xQueueGenericSend+0x94>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	623b      	str	r3, [r7, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ea4:	f001 f9fc 	bl	80062a0 <xTaskGetSchedulerState>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <xQueueGenericSend+0xa4>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <xQueueGenericSend+0xa8>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <xQueueGenericSend+0xaa>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10b      	bne.n	8004ed6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	61fb      	str	r3, [r7, #28]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ed6:	f001 ff4f 	bl	8006d78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d302      	bcc.n	8004eec <xQueueGenericSend+0xdc>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d129      	bne.n	8004f40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ef2:	f000 fa0f 	bl	8005314 <prvCopyDataToQueue>
 8004ef6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	3324      	adds	r3, #36	@ 0x24
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f805 	bl	8005f14 <xTaskRemoveFromEventList>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d013      	beq.n	8004f38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f10:	4b3f      	ldr	r3, [pc, #252]	@ (8005010 <xQueueGenericSend+0x200>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	e00a      	b.n	8004f38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f28:	4b39      	ldr	r3, [pc, #228]	@ (8005010 <xQueueGenericSend+0x200>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f38:	f001 ff50 	bl	8006ddc <vPortExitCritical>
				return pdPASS;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e063      	b.n	8005008 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f46:	f001 ff49 	bl	8006ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e05c      	b.n	8005008 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f54:	f107 0314 	add.w	r3, r7, #20
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f83f 	bl	8005fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f62:	f001 ff3b 	bl	8006ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f66:	f000 fda7 	bl	8005ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f6a:	f001 ff05 	bl	8006d78 <vPortEnterCritical>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d103      	bne.n	8004f84 <xQueueGenericSend+0x174>
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d103      	bne.n	8004f9a <xQueueGenericSend+0x18a>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f9a:	f001 ff1f 	bl	8006ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f9e:	1d3a      	adds	r2, r7, #4
 8004fa0:	f107 0314 	add.w	r3, r7, #20
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 f82e 	bl	8006008 <xTaskCheckForTimeOut>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d124      	bne.n	8004ffc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fb4:	f000 faa6 	bl	8005504 <prvIsQueueFull>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d018      	beq.n	8004ff0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	3310      	adds	r3, #16
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 ff52 	bl	8005e70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fce:	f000 fa31 	bl	8005434 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fd2:	f000 fd7f 	bl	8005ad4 <xTaskResumeAll>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f af7c 	bne.w	8004ed6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004fde:	4b0c      	ldr	r3, [pc, #48]	@ (8005010 <xQueueGenericSend+0x200>)
 8004fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	e772      	b.n	8004ed6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ff2:	f000 fa1f 	bl	8005434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ff6:	f000 fd6d 	bl	8005ad4 <xTaskResumeAll>
 8004ffa:	e76c      	b.n	8004ed6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ffe:	f000 fa19 	bl	8005434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005002:	f000 fd67 	bl	8005ad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005006:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005008:	4618      	mov	r0, r3
 800500a:	3738      	adds	r7, #56	@ 0x38
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b090      	sub	sp, #64	@ 0x40
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10b      	bne.n	8005044 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d103      	bne.n	8005052 <xQueueGenericSendFromISR+0x3e>
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <xQueueGenericSendFromISR+0x42>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueGenericSendFromISR+0x44>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	e7fd      	b.n	8005070 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d103      	bne.n	8005082 <xQueueGenericSendFromISR+0x6e>
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <xQueueGenericSendFromISR+0x72>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueGenericSendFromISR+0x74>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	623b      	str	r3, [r7, #32]
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050a4:	f001 ff48 	bl	8006f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050a8:	f3ef 8211 	mrs	r2, BASEPRI
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d302      	bcc.n	80050d6 <xQueueGenericSendFromISR+0xc2>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d12f      	bne.n	8005136 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050ec:	f000 f912 	bl	8005314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d112      	bne.n	8005120 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	3324      	adds	r3, #36	@ 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 ff04 	bl	8005f14 <xTaskRemoveFromEventList>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e007      	b.n	8005130 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005120:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005124:	3301      	adds	r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	b25a      	sxtb	r2, r3
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005130:	2301      	movs	r3, #1
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005134:	e001      	b.n	800513a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005144:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005148:	4618      	mov	r0, r3
 800514a:	3740      	adds	r7, #64	@ 0x40
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08c      	sub	sp, #48	@ 0x30
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <xQueueReceive+0x32>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	623b      	str	r3, [r7, #32]
}
 800517c:	bf00      	nop
 800517e:	bf00      	nop
 8005180:	e7fd      	b.n	800517e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <xQueueReceive+0x40>
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <xQueueReceive+0x44>
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <xQueueReceive+0x46>
 8005194:	2300      	movs	r3, #0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <xQueueReceive+0x62>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	61fb      	str	r3, [r7, #28]
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	e7fd      	b.n	80051ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b2:	f001 f875 	bl	80062a0 <xTaskGetSchedulerState>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <xQueueReceive+0x72>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueReceive+0x76>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueReceive+0x78>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <xQueueReceive+0x94>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61bb      	str	r3, [r7, #24]
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051e4:	f001 fdc8 	bl	8006d78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01f      	beq.n	8005234 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051f8:	f000 f8f6 	bl	80053e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	1e5a      	subs	r2, r3, #1
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	3310      	adds	r3, #16
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fe7f 	bl	8005f14 <xTaskRemoveFromEventList>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800521c:	4b3c      	ldr	r3, [pc, #240]	@ (8005310 <xQueueReceive+0x1c0>)
 800521e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800522c:	f001 fdd6 	bl	8006ddc <vPortExitCritical>
				return pdPASS;
 8005230:	2301      	movs	r3, #1
 8005232:	e069      	b.n	8005308 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800523a:	f001 fdcf 	bl	8006ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800523e:	2300      	movs	r3, #0
 8005240:	e062      	b.n	8005308 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fec5 	bl	8005fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005252:	2301      	movs	r3, #1
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005256:	f001 fdc1 	bl	8006ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800525a:	f000 fc2d 	bl	8005ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800525e:	f001 fd8b 	bl	8006d78 <vPortEnterCritical>
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005268:	b25b      	sxtb	r3, r3
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d103      	bne.n	8005278 <xQueueReceive+0x128>
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800527e:	b25b      	sxtb	r3, r3
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d103      	bne.n	800528e <xQueueReceive+0x13e>
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800528e:	f001 fda5 	bl	8006ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005292:	1d3a      	adds	r2, r7, #4
 8005294:	f107 0310 	add.w	r3, r7, #16
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f000 feb4 	bl	8006008 <xTaskCheckForTimeOut>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d123      	bne.n	80052ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052a8:	f000 f916 	bl	80054d8 <prvIsQueueEmpty>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d017      	beq.n	80052e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	3324      	adds	r3, #36	@ 0x24
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fdd8 	bl	8005e70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c2:	f000 f8b7 	bl	8005434 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052c6:	f000 fc05 	bl	8005ad4 <xTaskResumeAll>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d189      	bne.n	80051e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80052d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005310 <xQueueReceive+0x1c0>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	e780      	b.n	80051e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052e4:	f000 f8a6 	bl	8005434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052e8:	f000 fbf4 	bl	8005ad4 <xTaskResumeAll>
 80052ec:	e77a      	b.n	80051e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052f0:	f000 f8a0 	bl	8005434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052f4:	f000 fbee 	bl	8005ad4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052fa:	f000 f8ed 	bl	80054d8 <prvIsQueueEmpty>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	f43f af6f 	beq.w	80051e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005306:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005308:	4618      	mov	r0, r3
 800530a:	3730      	adds	r7, #48	@ 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005328:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10d      	bne.n	800534e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d14d      	bne.n	80053d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 ffcc 	bl	80062dc <xTaskPriorityDisinherit>
 8005344:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	e043      	b.n	80053d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d119      	bne.n	8005388 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6858      	ldr	r0, [r3, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535c:	461a      	mov	r2, r3
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	f002 f89e 	bl	80074a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	441a      	add	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d32b      	bcc.n	80053d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e026      	b.n	80053d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68d8      	ldr	r0, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005390:	461a      	mov	r2, r3
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	f002 f884 	bl	80074a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	425b      	negs	r3, r3
 80053a2:	441a      	add	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d207      	bcs.n	80053c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053bc:	425b      	negs	r3, r3
 80053be:	441a      	add	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d105      	bne.n	80053d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	441a      	add	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d303      	bcc.n	800541c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68d9      	ldr	r1, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	461a      	mov	r2, r3
 8005426:	6838      	ldr	r0, [r7, #0]
 8005428:	f002 f83a 	bl	80074a0 <memcpy>
	}
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800543c:	f001 fc9c 	bl	8006d78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005446:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005448:	e011      	b.n	800546e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d012      	beq.n	8005478 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3324      	adds	r3, #36	@ 0x24
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fd5c 	bl	8005f14 <xTaskRemoveFromEventList>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005462:	f000 fe35 	bl	80060d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	3b01      	subs	r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800546e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005472:	2b00      	cmp	r3, #0
 8005474:	dce9      	bgt.n	800544a <prvUnlockQueue+0x16>
 8005476:	e000      	b.n	800547a <prvUnlockQueue+0x46>
					break;
 8005478:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	22ff      	movs	r2, #255	@ 0xff
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005482:	f001 fcab 	bl	8006ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005486:	f001 fc77 	bl	8006d78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005490:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005492:	e011      	b.n	80054b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3310      	adds	r3, #16
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fd37 	bl	8005f14 <xTaskRemoveFromEventList>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054ac:	f000 fe10 	bl	80060d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054b0:	7bbb      	ldrb	r3, [r7, #14]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	dce9      	bgt.n	8005494 <prvUnlockQueue+0x60>
 80054c0:	e000      	b.n	80054c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	22ff      	movs	r2, #255	@ 0xff
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80054cc:	f001 fc86 	bl	8006ddc <vPortExitCritical>
}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054e0:	f001 fc4a 	bl	8006d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e001      	b.n	80054f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054f6:	f001 fc71 	bl	8006ddc <vPortExitCritical>

	return xReturn;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800550c:	f001 fc34 	bl	8006d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	429a      	cmp	r2, r3
 800551a:	d102      	bne.n	8005522 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800551c:	2301      	movs	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e001      	b.n	8005526 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005526:	f001 fc59 	bl	8006ddc <vPortExitCritical>

	return xReturn;
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e014      	b.n	800556e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005544:	4a0f      	ldr	r2, [pc, #60]	@ (8005584 <vQueueAddToRegistry+0x50>)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005550:	490c      	ldr	r1, [pc, #48]	@ (8005584 <vQueueAddToRegistry+0x50>)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800555a:	4a0a      	ldr	r2, [pc, #40]	@ (8005584 <vQueueAddToRegistry+0x50>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005566:	e006      	b.n	8005576 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b07      	cmp	r3, #7
 8005572:	d9e7      	bls.n	8005544 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005574:	bf00      	nop
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000928 	.word	0x20000928

08005588 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005598:	f001 fbee 	bl	8006d78 <vPortEnterCritical>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d103      	bne.n	80055b2 <vQueueWaitForMessageRestricted+0x2a>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <vQueueWaitForMessageRestricted+0x40>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055c8:	f001 fc08 	bl	8006ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	3324      	adds	r3, #36	@ 0x24
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fc6d 	bl	8005ebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055e2:	6978      	ldr	r0, [r7, #20]
 80055e4:	f7ff ff26 	bl	8005434 <prvUnlockQueue>
	}
 80055e8:	bf00      	nop
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	@ 0x38
 80055f4:	af04      	add	r7, sp, #16
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	623b      	str	r3, [r7, #32]
}
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800561c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	61fb      	str	r3, [r7, #28]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800563a:	23a8      	movs	r3, #168	@ 0xa8
 800563c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2ba8      	cmp	r3, #168	@ 0xa8
 8005642:	d00b      	beq.n	800565c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	61bb      	str	r3, [r7, #24]
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	e7fd      	b.n	8005658 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800565c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01e      	beq.n	80056a2 <xTaskCreateStatic+0xb2>
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01b      	beq.n	80056a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	2202      	movs	r2, #2
 8005678:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800567c:	2300      	movs	r3, #0
 800567e:	9303      	str	r3, [sp, #12]
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	9302      	str	r3, [sp, #8]
 8005684:	f107 0314 	add.w	r3, r7, #20
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f851 	bl	800573c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800569a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800569c:	f000 f8f6 	bl	800588c <prvAddNewTaskToReadyList>
 80056a0:	e001      	b.n	80056a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056a6:	697b      	ldr	r3, [r7, #20]
	}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3728      	adds	r7, #40	@ 0x28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	@ 0x30
 80056b4:	af04      	add	r7, sp, #16
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fc79 	bl	8006fbc <pvPortMalloc>
 80056ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00e      	beq.n	80056f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056d2:	20a8      	movs	r0, #168	@ 0xa8
 80056d4:	f001 fc72 	bl	8006fbc <pvPortMalloc>
 80056d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80056e6:	e005      	b.n	80056f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056e8:	6978      	ldr	r0, [r7, #20]
 80056ea:	f001 fd35 	bl	8007158 <vPortFree>
 80056ee:	e001      	b.n	80056f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d017      	beq.n	800572a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	2300      	movs	r3, #0
 8005706:	9303      	str	r3, [sp, #12]
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	9302      	str	r3, [sp, #8]
 800570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f80f 	bl	800573c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800571e:	69f8      	ldr	r0, [r7, #28]
 8005720:	f000 f8b4 	bl	800588c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005724:	2301      	movs	r3, #1
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	e002      	b.n	8005730 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005730:	69bb      	ldr	r3, [r7, #24]
	}
 8005732:	4618      	mov	r0, r3
 8005734:	3720      	adds	r7, #32
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	461a      	mov	r2, r3
 8005754:	21a5      	movs	r1, #165	@ 0xa5
 8005756:	f001 fe1f 	bl	8007398 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005764:	3b01      	subs	r3, #1
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	617b      	str	r3, [r7, #20]
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01f      	beq.n	80057dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	e012      	b.n	80057c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	7819      	ldrb	r1, [r3, #0]
 80057aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	3334      	adds	r3, #52	@ 0x34
 80057b2:	460a      	mov	r2, r1
 80057b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	d9e9      	bls.n	80057a2 <prvInitialiseNewTask+0x66>
 80057ce:	e000      	b.n	80057d2 <prvInitialiseNewTask+0x96>
			{
				break;
 80057d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057da:	e003      	b.n	80057e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e6:	2b37      	cmp	r3, #55	@ 0x37
 80057e8:	d901      	bls.n	80057ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057ea:	2337      	movs	r3, #55	@ 0x37
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fc:	2200      	movs	r2, #0
 80057fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff f8dd 	bl	80049c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	3318      	adds	r3, #24
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff f8d8 	bl	80049c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005818:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800581a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005828:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	2200      	movs	r2, #0
 800582e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	3354      	adds	r3, #84	@ 0x54
 800583e:	224c      	movs	r2, #76	@ 0x4c
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fda8 	bl	8007398 <memset>
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	4a0d      	ldr	r2, [pc, #52]	@ (8005880 <prvInitialiseNewTask+0x144>)
 800584c:	659a      	str	r2, [r3, #88]	@ 0x58
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	4a0c      	ldr	r2, [pc, #48]	@ (8005884 <prvInitialiseNewTask+0x148>)
 8005852:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	4a0c      	ldr	r2, [pc, #48]	@ (8005888 <prvInitialiseNewTask+0x14c>)
 8005858:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	69b8      	ldr	r0, [r7, #24]
 8005860:	f001 f95a 	bl	8006b18 <pxPortInitialiseStack>
 8005864:	4602      	mov	r2, r0
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800586a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005876:	bf00      	nop
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20004bbc 	.word	0x20004bbc
 8005884:	20004c24 	.word	0x20004c24
 8005888:	20004c8c 	.word	0x20004c8c

0800588c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005894:	f001 fa70 	bl	8006d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005898:	4b2d      	ldr	r3, [pc, #180]	@ (8005950 <prvAddNewTaskToReadyList+0xc4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3301      	adds	r3, #1
 800589e:	4a2c      	ldr	r2, [pc, #176]	@ (8005950 <prvAddNewTaskToReadyList+0xc4>)
 80058a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005954 <prvAddNewTaskToReadyList+0xc8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005954 <prvAddNewTaskToReadyList+0xc8>)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058b0:	4b27      	ldr	r3, [pc, #156]	@ (8005950 <prvAddNewTaskToReadyList+0xc4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d110      	bne.n	80058da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058b8:	f000 fc2e 	bl	8006118 <prvInitialiseTaskLists>
 80058bc:	e00d      	b.n	80058da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058be:	4b26      	ldr	r3, [pc, #152]	@ (8005958 <prvAddNewTaskToReadyList+0xcc>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058c6:	4b23      	ldr	r3, [pc, #140]	@ (8005954 <prvAddNewTaskToReadyList+0xc8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d802      	bhi.n	80058da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005954 <prvAddNewTaskToReadyList+0xc8>)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058da:	4b20      	ldr	r3, [pc, #128]	@ (800595c <prvAddNewTaskToReadyList+0xd0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3301      	adds	r3, #1
 80058e0:	4a1e      	ldr	r2, [pc, #120]	@ (800595c <prvAddNewTaskToReadyList+0xd0>)
 80058e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <prvAddNewTaskToReadyList+0xd0>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005960 <prvAddNewTaskToReadyList+0xd4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d903      	bls.n	8005900 <prvAddNewTaskToReadyList+0x74>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fc:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <prvAddNewTaskToReadyList+0xd4>)
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4a15      	ldr	r2, [pc, #84]	@ (8005964 <prvAddNewTaskToReadyList+0xd8>)
 800590e:	441a      	add	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f7ff f861 	bl	80049de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800591c:	f001 fa5e 	bl	8006ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005920:	4b0d      	ldr	r3, [pc, #52]	@ (8005958 <prvAddNewTaskToReadyList+0xcc>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00e      	beq.n	8005946 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005928:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <prvAddNewTaskToReadyList+0xc8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	429a      	cmp	r2, r3
 8005934:	d207      	bcs.n	8005946 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005936:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <prvAddNewTaskToReadyList+0xdc>)
 8005938:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000e3c 	.word	0x20000e3c
 8005954:	20000968 	.word	0x20000968
 8005958:	20000e48 	.word	0x20000e48
 800595c:	20000e58 	.word	0x20000e58
 8005960:	20000e44 	.word	0x20000e44
 8005964:	2000096c 	.word	0x2000096c
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d018      	beq.n	80059b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800597e:	4b14      	ldr	r3, [pc, #80]	@ (80059d0 <vTaskDelay+0x64>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <vTaskDelay+0x32>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60bb      	str	r3, [r7, #8]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800599e:	f000 f88b 	bl	8005ab8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059a2:	2100      	movs	r1, #0
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fd09 	bl	80063bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059aa:	f000 f893 	bl	8005ad4 <xTaskResumeAll>
 80059ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80059b6:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <vTaskDelay+0x68>)
 80059b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000e64 	.word	0x20000e64
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	@ 0x28
 80059dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059e6:	463a      	mov	r2, r7
 80059e8:	1d39      	adds	r1, r7, #4
 80059ea:	f107 0308 	add.w	r3, r7, #8
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe ff94 	bl	800491c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	9202      	str	r2, [sp, #8]
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	460a      	mov	r2, r1
 8005a06:	4924      	ldr	r1, [pc, #144]	@ (8005a98 <vTaskStartScheduler+0xc0>)
 8005a08:	4824      	ldr	r0, [pc, #144]	@ (8005a9c <vTaskStartScheduler+0xc4>)
 8005a0a:	f7ff fdf1 	bl	80055f0 <xTaskCreateStatic>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4a23      	ldr	r2, [pc, #140]	@ (8005aa0 <vTaskStartScheduler+0xc8>)
 8005a12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a14:	4b22      	ldr	r3, [pc, #136]	@ (8005aa0 <vTaskStartScheduler+0xc8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e001      	b.n	8005a26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d102      	bne.n	8005a32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a2c:	f000 fd1a 	bl	8006464 <xTimerCreateTimerTask>
 8005a30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d11b      	bne.n	8005a70 <vTaskStartScheduler+0x98>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	613b      	str	r3, [r7, #16]
}
 8005a4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a4c:	4b15      	ldr	r3, [pc, #84]	@ (8005aa4 <vTaskStartScheduler+0xcc>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3354      	adds	r3, #84	@ 0x54
 8005a52:	4a15      	ldr	r2, [pc, #84]	@ (8005aa8 <vTaskStartScheduler+0xd0>)
 8005a54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a56:	4b15      	ldr	r3, [pc, #84]	@ (8005aac <vTaskStartScheduler+0xd4>)
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a5e:	4b14      	ldr	r3, [pc, #80]	@ (8005ab0 <vTaskStartScheduler+0xd8>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a64:	4b13      	ldr	r3, [pc, #76]	@ (8005ab4 <vTaskStartScheduler+0xdc>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a6a:	f001 f8e1 	bl	8006c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a6e:	e00f      	b.n	8005a90 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d10b      	bne.n	8005a90 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	60fb      	str	r3, [r7, #12]
}
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	e7fd      	b.n	8005a8c <vTaskStartScheduler+0xb4>
}
 8005a90:	bf00      	nop
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	080075cc 	.word	0x080075cc
 8005a9c:	080060e9 	.word	0x080060e9
 8005aa0:	20000e60 	.word	0x20000e60
 8005aa4:	20000968 	.word	0x20000968
 8005aa8:	20000010 	.word	0x20000010
 8005aac:	20000e5c 	.word	0x20000e5c
 8005ab0:	20000e48 	.word	0x20000e48
 8005ab4:	20000e40 	.word	0x20000e40

08005ab8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005abc:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <vTaskSuspendAll+0x18>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a03      	ldr	r2, [pc, #12]	@ (8005ad0 <vTaskSuspendAll+0x18>)
 8005ac4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ac6:	bf00      	nop
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	20000e64 	.word	0x20000e64

08005ad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ae2:	4b42      	ldr	r3, [pc, #264]	@ (8005bec <xTaskResumeAll+0x118>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <xTaskResumeAll+0x2e>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	603b      	str	r3, [r7, #0]
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	e7fd      	b.n	8005afe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b02:	f001 f939 	bl	8006d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b06:	4b39      	ldr	r3, [pc, #228]	@ (8005bec <xTaskResumeAll+0x118>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	4a37      	ldr	r2, [pc, #220]	@ (8005bec <xTaskResumeAll+0x118>)
 8005b0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b10:	4b36      	ldr	r3, [pc, #216]	@ (8005bec <xTaskResumeAll+0x118>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d162      	bne.n	8005bde <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b18:	4b35      	ldr	r3, [pc, #212]	@ (8005bf0 <xTaskResumeAll+0x11c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d05e      	beq.n	8005bde <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b20:	e02f      	b.n	8005b82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b22:	4b34      	ldr	r3, [pc, #208]	@ (8005bf4 <xTaskResumeAll+0x120>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3318      	adds	r3, #24
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe ffb2 	bl	8004a98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe ffad 	bl	8004a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b42:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf8 <xTaskResumeAll+0x124>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d903      	bls.n	8005b52 <xTaskResumeAll+0x7e>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf8 <xTaskResumeAll+0x124>)
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4a27      	ldr	r2, [pc, #156]	@ (8005bfc <xTaskResumeAll+0x128>)
 8005b60:	441a      	add	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f7fe ff38 	bl	80049de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b72:	4b23      	ldr	r3, [pc, #140]	@ (8005c00 <xTaskResumeAll+0x12c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d302      	bcc.n	8005b82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b7c:	4b21      	ldr	r3, [pc, #132]	@ (8005c04 <xTaskResumeAll+0x130>)
 8005b7e:	2201      	movs	r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b82:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf4 <xTaskResumeAll+0x120>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1cb      	bne.n	8005b22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b90:	f000 fb66 	bl	8006260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b94:	4b1c      	ldr	r3, [pc, #112]	@ (8005c08 <xTaskResumeAll+0x134>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ba0:	f000 f846 	bl	8005c30 <xTaskIncrementTick>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005baa:	4b16      	ldr	r3, [pc, #88]	@ (8005c04 <xTaskResumeAll+0x130>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f1      	bne.n	8005ba0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005bbc:	4b12      	ldr	r3, [pc, #72]	@ (8005c08 <xTaskResumeAll+0x134>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <xTaskResumeAll+0x130>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bce:	4b0f      	ldr	r3, [pc, #60]	@ (8005c0c <xTaskResumeAll+0x138>)
 8005bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bde:	f001 f8fd 	bl	8006ddc <vPortExitCritical>

	return xAlreadyYielded;
 8005be2:	68bb      	ldr	r3, [r7, #8]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000e64 	.word	0x20000e64
 8005bf0:	20000e3c 	.word	0x20000e3c
 8005bf4:	20000dfc 	.word	0x20000dfc
 8005bf8:	20000e44 	.word	0x20000e44
 8005bfc:	2000096c 	.word	0x2000096c
 8005c00:	20000968 	.word	0x20000968
 8005c04:	20000e50 	.word	0x20000e50
 8005c08:	20000e4c 	.word	0x20000e4c
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c16:	4b05      	ldr	r3, [pc, #20]	@ (8005c2c <xTaskGetTickCount+0x1c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c1c:	687b      	ldr	r3, [r7, #4]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000e40 	.word	0x20000e40

08005c30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d78 <xTaskIncrementTick+0x148>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8090 	bne.w	8005d64 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c44:	4b4d      	ldr	r3, [pc, #308]	@ (8005d7c <xTaskIncrementTick+0x14c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8005d7c <xTaskIncrementTick+0x14c>)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d121      	bne.n	8005c9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c58:	4b49      	ldr	r3, [pc, #292]	@ (8005d80 <xTaskIncrementTick+0x150>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	603b      	str	r3, [r7, #0]
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <xTaskIncrementTick+0x46>
 8005c7a:	4b41      	ldr	r3, [pc, #260]	@ (8005d80 <xTaskIncrementTick+0x150>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	4b40      	ldr	r3, [pc, #256]	@ (8005d84 <xTaskIncrementTick+0x154>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a3e      	ldr	r2, [pc, #248]	@ (8005d80 <xTaskIncrementTick+0x150>)
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4a3e      	ldr	r2, [pc, #248]	@ (8005d84 <xTaskIncrementTick+0x154>)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d88 <xTaskIncrementTick+0x158>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	4a3c      	ldr	r2, [pc, #240]	@ (8005d88 <xTaskIncrementTick+0x158>)
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	f000 fae2 	bl	8006260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d8c <xTaskIncrementTick+0x15c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d349      	bcc.n	8005d3a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca6:	4b36      	ldr	r3, [pc, #216]	@ (8005d80 <xTaskIncrementTick+0x150>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb0:	4b36      	ldr	r3, [pc, #216]	@ (8005d8c <xTaskIncrementTick+0x15c>)
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb6:	601a      	str	r2, [r3, #0]
					break;
 8005cb8:	e03f      	b.n	8005d3a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cba:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <xTaskIncrementTick+0x150>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d203      	bcs.n	8005cda <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d8c <xTaskIncrementTick+0x15c>)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cd8:	e02f      	b.n	8005d3a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe feda 	bl	8004a98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	3318      	adds	r3, #24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe fed1 	bl	8004a98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfa:	4b25      	ldr	r3, [pc, #148]	@ (8005d90 <xTaskIncrementTick+0x160>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d903      	bls.n	8005d0a <xTaskIncrementTick+0xda>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	4a22      	ldr	r2, [pc, #136]	@ (8005d90 <xTaskIncrementTick+0x160>)
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <xTaskIncrementTick+0x164>)
 8005d18:	441a      	add	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7fe fe5c 	bl	80049de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d98 <xTaskIncrementTick+0x168>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3b8      	bcc.n	8005ca6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d38:	e7b5      	b.n	8005ca6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d3a:	4b17      	ldr	r3, [pc, #92]	@ (8005d98 <xTaskIncrementTick+0x168>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d40:	4914      	ldr	r1, [pc, #80]	@ (8005d94 <xTaskIncrementTick+0x164>)
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d901      	bls.n	8005d56 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d56:	4b11      	ldr	r3, [pc, #68]	@ (8005d9c <xTaskIncrementTick+0x16c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e004      	b.n	8005d6e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d64:	4b0e      	ldr	r3, [pc, #56]	@ (8005da0 <xTaskIncrementTick+0x170>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005da0 <xTaskIncrementTick+0x170>)
 8005d6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d6e:	697b      	ldr	r3, [r7, #20]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	20000e64 	.word	0x20000e64
 8005d7c:	20000e40 	.word	0x20000e40
 8005d80:	20000df4 	.word	0x20000df4
 8005d84:	20000df8 	.word	0x20000df8
 8005d88:	20000e54 	.word	0x20000e54
 8005d8c:	20000e5c 	.word	0x20000e5c
 8005d90:	20000e44 	.word	0x20000e44
 8005d94:	2000096c 	.word	0x2000096c
 8005d98:	20000968 	.word	0x20000968
 8005d9c:	20000e50 	.word	0x20000e50
 8005da0:	20000e4c 	.word	0x20000e4c

08005da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005daa:	4b2b      	ldr	r3, [pc, #172]	@ (8005e58 <vTaskSwitchContext+0xb4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005db2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e5c <vTaskSwitchContext+0xb8>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005db8:	e047      	b.n	8005e4a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005dba:	4b28      	ldr	r3, [pc, #160]	@ (8005e5c <vTaskSwitchContext+0xb8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc0:	4b27      	ldr	r3, [pc, #156]	@ (8005e60 <vTaskSwitchContext+0xbc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e011      	b.n	8005dec <vTaskSwitchContext+0x48>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10b      	bne.n	8005de6 <vTaskSwitchContext+0x42>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	607b      	str	r3, [r7, #4]
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	e7fd      	b.n	8005de2 <vTaskSwitchContext+0x3e>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	491d      	ldr	r1, [pc, #116]	@ (8005e64 <vTaskSwitchContext+0xc0>)
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	440b      	add	r3, r1
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0e3      	beq.n	8005dc8 <vTaskSwitchContext+0x24>
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4a16      	ldr	r2, [pc, #88]	@ (8005e64 <vTaskSwitchContext+0xc0>)
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60bb      	str	r3, [r7, #8]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	3308      	adds	r3, #8
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d104      	bne.n	8005e30 <vTaskSwitchContext+0x8c>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	4a0c      	ldr	r2, [pc, #48]	@ (8005e68 <vTaskSwitchContext+0xc4>)
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	4a09      	ldr	r2, [pc, #36]	@ (8005e60 <vTaskSwitchContext+0xbc>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e40:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <vTaskSwitchContext+0xc4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3354      	adds	r3, #84	@ 0x54
 8005e46:	4a09      	ldr	r2, [pc, #36]	@ (8005e6c <vTaskSwitchContext+0xc8>)
 8005e48:	6013      	str	r3, [r2, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20000e64 	.word	0x20000e64
 8005e5c:	20000e50 	.word	0x20000e50
 8005e60:	20000e44 	.word	0x20000e44
 8005e64:	2000096c 	.word	0x2000096c
 8005e68:	20000968 	.word	0x20000968
 8005e6c:	20000010 	.word	0x20000010

08005e70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e98:	4b07      	ldr	r3, [pc, #28]	@ (8005eb8 <vTaskPlaceOnEventList+0x48>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3318      	adds	r3, #24
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fe fdc0 	bl	8004a26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	6838      	ldr	r0, [r7, #0]
 8005eaa:	f000 fa87 	bl	80063bc <prvAddCurrentTaskToDelayedList>
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000968 	.word	0x20000968

08005ebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10b      	bne.n	8005ee6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	617b      	str	r3, [r7, #20]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8005f10 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3318      	adds	r3, #24
 8005eec:	4619      	mov	r1, r3
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f7fe fd75 	bl	80049de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005efa:	f04f 33ff 	mov.w	r3, #4294967295
 8005efe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	68b8      	ldr	r0, [r7, #8]
 8005f04:	f000 fa5a 	bl	80063bc <prvAddCurrentTaskToDelayedList>
	}
 8005f08:	bf00      	nop
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000968 	.word	0x20000968

08005f14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	60fb      	str	r3, [r7, #12]
}
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	e7fd      	b.n	8005f3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3318      	adds	r3, #24
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fda6 	bl	8004a98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc4 <xTaskRemoveFromEventList+0xb0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11d      	bne.n	8005f90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fd9d 	bl	8004a98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	4b19      	ldr	r3, [pc, #100]	@ (8005fc8 <xTaskRemoveFromEventList+0xb4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d903      	bls.n	8005f72 <xTaskRemoveFromEventList+0x5e>
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	4a16      	ldr	r2, [pc, #88]	@ (8005fc8 <xTaskRemoveFromEventList+0xb4>)
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4a13      	ldr	r2, [pc, #76]	@ (8005fcc <xTaskRemoveFromEventList+0xb8>)
 8005f80:	441a      	add	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	3304      	adds	r3, #4
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f7fe fd28 	bl	80049de <vListInsertEnd>
 8005f8e:	e005      	b.n	8005f9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	3318      	adds	r3, #24
 8005f94:	4619      	mov	r1, r3
 8005f96:	480e      	ldr	r0, [pc, #56]	@ (8005fd0 <xTaskRemoveFromEventList+0xbc>)
 8005f98:	f7fe fd21 	bl	80049de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8005fd4 <xTaskRemoveFromEventList+0xc0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d905      	bls.n	8005fb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fae:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <xTaskRemoveFromEventList+0xc4>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e001      	b.n	8005fba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fba:	697b      	ldr	r3, [r7, #20]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000e64 	.word	0x20000e64
 8005fc8:	20000e44 	.word	0x20000e44
 8005fcc:	2000096c 	.word	0x2000096c
 8005fd0:	20000dfc 	.word	0x20000dfc
 8005fd4:	20000968 	.word	0x20000968
 8005fd8:	20000e50 	.word	0x20000e50

08005fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <vTaskInternalSetTimeOutState+0x24>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fec:	4b05      	ldr	r3, [pc, #20]	@ (8006004 <vTaskInternalSetTimeOutState+0x28>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	605a      	str	r2, [r3, #4]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	20000e54 	.word	0x20000e54
 8006004:	20000e40 	.word	0x20000e40

08006008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	613b      	str	r3, [r7, #16]
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	60fb      	str	r3, [r7, #12]
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800604e:	f000 fe93 	bl	8006d78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006052:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <xTaskCheckForTimeOut+0xc0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d102      	bne.n	8006072 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	e023      	b.n	80060ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b15      	ldr	r3, [pc, #84]	@ (80060cc <xTaskCheckForTimeOut+0xc4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d007      	beq.n	800608e <xTaskCheckForTimeOut+0x86>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e015      	b.n	80060ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	429a      	cmp	r2, r3
 8006096:	d20b      	bcs.n	80060b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff ff99 	bl	8005fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	e004      	b.n	80060ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060ba:	f000 fe8f 	bl	8006ddc <vPortExitCritical>

	return xReturn;
 80060be:	69fb      	ldr	r3, [r7, #28]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20000e40 	.word	0x20000e40
 80060cc:	20000e54 	.word	0x20000e54

080060d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060d4:	4b03      	ldr	r3, [pc, #12]	@ (80060e4 <vTaskMissedYield+0x14>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
}
 80060da:	bf00      	nop
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	20000e50 	.word	0x20000e50

080060e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060f0:	f000 f852 	bl	8006198 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060f4:	4b06      	ldr	r3, [pc, #24]	@ (8006110 <prvIdleTask+0x28>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d9f9      	bls.n	80060f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060fc:	4b05      	ldr	r3, [pc, #20]	@ (8006114 <prvIdleTask+0x2c>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800610c:	e7f0      	b.n	80060f0 <prvIdleTask+0x8>
 800610e:	bf00      	nop
 8006110:	2000096c 	.word	0x2000096c
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800611e:	2300      	movs	r3, #0
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	e00c      	b.n	800613e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4a12      	ldr	r2, [pc, #72]	@ (8006178 <prvInitialiseTaskLists+0x60>)
 8006130:	4413      	add	r3, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe fc26 	bl	8004984 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3301      	adds	r3, #1
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b37      	cmp	r3, #55	@ 0x37
 8006142:	d9ef      	bls.n	8006124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006144:	480d      	ldr	r0, [pc, #52]	@ (800617c <prvInitialiseTaskLists+0x64>)
 8006146:	f7fe fc1d 	bl	8004984 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800614a:	480d      	ldr	r0, [pc, #52]	@ (8006180 <prvInitialiseTaskLists+0x68>)
 800614c:	f7fe fc1a 	bl	8004984 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006150:	480c      	ldr	r0, [pc, #48]	@ (8006184 <prvInitialiseTaskLists+0x6c>)
 8006152:	f7fe fc17 	bl	8004984 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006156:	480c      	ldr	r0, [pc, #48]	@ (8006188 <prvInitialiseTaskLists+0x70>)
 8006158:	f7fe fc14 	bl	8004984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800615c:	480b      	ldr	r0, [pc, #44]	@ (800618c <prvInitialiseTaskLists+0x74>)
 800615e:	f7fe fc11 	bl	8004984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006162:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <prvInitialiseTaskLists+0x78>)
 8006164:	4a05      	ldr	r2, [pc, #20]	@ (800617c <prvInitialiseTaskLists+0x64>)
 8006166:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006168:	4b0a      	ldr	r3, [pc, #40]	@ (8006194 <prvInitialiseTaskLists+0x7c>)
 800616a:	4a05      	ldr	r2, [pc, #20]	@ (8006180 <prvInitialiseTaskLists+0x68>)
 800616c:	601a      	str	r2, [r3, #0]
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	2000096c 	.word	0x2000096c
 800617c:	20000dcc 	.word	0x20000dcc
 8006180:	20000de0 	.word	0x20000de0
 8006184:	20000dfc 	.word	0x20000dfc
 8006188:	20000e10 	.word	0x20000e10
 800618c:	20000e28 	.word	0x20000e28
 8006190:	20000df4 	.word	0x20000df4
 8006194:	20000df8 	.word	0x20000df8

08006198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800619e:	e019      	b.n	80061d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061a0:	f000 fdea 	bl	8006d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a4:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <prvCheckTasksWaitingTermination+0x50>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe fc71 	bl	8004a98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <prvCheckTasksWaitingTermination+0x54>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	4a0b      	ldr	r2, [pc, #44]	@ (80061ec <prvCheckTasksWaitingTermination+0x54>)
 80061be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c0:	4b0b      	ldr	r3, [pc, #44]	@ (80061f0 <prvCheckTasksWaitingTermination+0x58>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4a0a      	ldr	r2, [pc, #40]	@ (80061f0 <prvCheckTasksWaitingTermination+0x58>)
 80061c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ca:	f000 fe07 	bl	8006ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f810 	bl	80061f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <prvCheckTasksWaitingTermination+0x58>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e1      	bne.n	80061a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000e10 	.word	0x20000e10
 80061ec:	20000e3c 	.word	0x20000e3c
 80061f0:	20000e24 	.word	0x20000e24

080061f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3354      	adds	r3, #84	@ 0x54
 8006200:	4618      	mov	r0, r3
 8006202:	f001 f8d1 	bl	80073a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800620c:	2b00      	cmp	r3, #0
 800620e:	d108      	bne.n	8006222 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006214:	4618      	mov	r0, r3
 8006216:	f000 ff9f 	bl	8007158 <vPortFree>
				vPortFree( pxTCB );
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 ff9c 	bl	8007158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006220:	e019      	b.n	8006256 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006228:	2b01      	cmp	r3, #1
 800622a:	d103      	bne.n	8006234 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 ff93 	bl	8007158 <vPortFree>
	}
 8006232:	e010      	b.n	8006256 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800623a:	2b02      	cmp	r3, #2
 800623c:	d00b      	beq.n	8006256 <prvDeleteTCB+0x62>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60fb      	str	r3, [r7, #12]
}
 8006250:	bf00      	nop
 8006252:	bf00      	nop
 8006254:	e7fd      	b.n	8006252 <prvDeleteTCB+0x5e>
	}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006266:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <prvResetNextTaskUnblockTime+0x38>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006270:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <prvResetNextTaskUnblockTime+0x3c>)
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006278:	e008      	b.n	800628c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800627a:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <prvResetNextTaskUnblockTime+0x38>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a04      	ldr	r2, [pc, #16]	@ (800629c <prvResetNextTaskUnblockTime+0x3c>)
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	20000df4 	.word	0x20000df4
 800629c:	20000e5c 	.word	0x20000e5c

080062a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <xTaskGetSchedulerState+0x34>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062ae:	2301      	movs	r3, #1
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	e008      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b4:	4b08      	ldr	r3, [pc, #32]	@ (80062d8 <xTaskGetSchedulerState+0x38>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062bc:	2302      	movs	r3, #2
 80062be:	607b      	str	r3, [r7, #4]
 80062c0:	e001      	b.n	80062c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062c6:	687b      	ldr	r3, [r7, #4]
	}
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	20000e48 	.word	0x20000e48
 80062d8:	20000e64 	.word	0x20000e64

080062dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d058      	beq.n	80063a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062f2:	4b2f      	ldr	r3, [pc, #188]	@ (80063b0 <xTaskPriorityDisinherit+0xd4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d00b      	beq.n	8006314 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60fb      	str	r3, [r7, #12]
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	e7fd      	b.n	8006310 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	60bb      	str	r3, [r7, #8]
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006338:	1e5a      	subs	r2, r3, #1
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006346:	429a      	cmp	r2, r3
 8006348:	d02c      	beq.n	80063a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634e:	2b00      	cmp	r3, #0
 8006350:	d128      	bne.n	80063a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3304      	adds	r3, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fb9e 	bl	8004a98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006374:	4b0f      	ldr	r3, [pc, #60]	@ (80063b4 <xTaskPriorityDisinherit+0xd8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	429a      	cmp	r2, r3
 800637a:	d903      	bls.n	8006384 <xTaskPriorityDisinherit+0xa8>
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	4a0c      	ldr	r2, [pc, #48]	@ (80063b4 <xTaskPriorityDisinherit+0xd8>)
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006388:	4613      	mov	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4a09      	ldr	r2, [pc, #36]	@ (80063b8 <xTaskPriorityDisinherit+0xdc>)
 8006392:	441a      	add	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3304      	adds	r3, #4
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7fe fb1f 	bl	80049de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063a4:	697b      	ldr	r3, [r7, #20]
	}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000968 	.word	0x20000968
 80063b4:	20000e44 	.word	0x20000e44
 80063b8:	2000096c 	.word	0x2000096c

080063bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063c6:	4b21      	ldr	r3, [pc, #132]	@ (800644c <prvAddCurrentTaskToDelayedList+0x90>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063cc:	4b20      	ldr	r3, [pc, #128]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x94>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fb60 	bl	8004a98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d10a      	bne.n	80063f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4819      	ldr	r0, [pc, #100]	@ (8006454 <prvAddCurrentTaskToDelayedList+0x98>)
 80063f0:	f7fe faf5 	bl	80049de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063f4:	e026      	b.n	8006444 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4413      	add	r3, r2
 80063fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063fe:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x94>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	429a      	cmp	r2, r3
 800640c:	d209      	bcs.n	8006422 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800640e:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b0f      	ldr	r3, [pc, #60]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x94>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f7fe fb03 	bl	8004a26 <vListInsert>
}
 8006420:	e010      	b.n	8006444 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006422:	4b0e      	ldr	r3, [pc, #56]	@ (800645c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <prvAddCurrentTaskToDelayedList+0x94>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f7fe faf9 	bl	8004a26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	d202      	bcs.n	8006444 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800643e:	4a08      	ldr	r2, [pc, #32]	@ (8006460 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	6013      	str	r3, [r2, #0]
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000e40 	.word	0x20000e40
 8006450:	20000968 	.word	0x20000968
 8006454:	20000e28 	.word	0x20000e28
 8006458:	20000df8 	.word	0x20000df8
 800645c:	20000df4 	.word	0x20000df4
 8006460:	20000e5c 	.word	0x20000e5c

08006464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08a      	sub	sp, #40	@ 0x28
 8006468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800646a:	2300      	movs	r3, #0
 800646c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800646e:	f000 fb13 	bl	8006a98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006472:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <xTimerCreateTimerTask+0x84>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d021      	beq.n	80064be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006482:	1d3a      	adds	r2, r7, #4
 8006484:	f107 0108 	add.w	r1, r7, #8
 8006488:	f107 030c 	add.w	r3, r7, #12
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe fa5f 	bl	8004950 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	9202      	str	r2, [sp, #8]
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	2302      	movs	r3, #2
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	2300      	movs	r3, #0
 80064a2:	460a      	mov	r2, r1
 80064a4:	4911      	ldr	r1, [pc, #68]	@ (80064ec <xTimerCreateTimerTask+0x88>)
 80064a6:	4812      	ldr	r0, [pc, #72]	@ (80064f0 <xTimerCreateTimerTask+0x8c>)
 80064a8:	f7ff f8a2 	bl	80055f0 <xTaskCreateStatic>
 80064ac:	4603      	mov	r3, r0
 80064ae:	4a11      	ldr	r2, [pc, #68]	@ (80064f4 <xTimerCreateTimerTask+0x90>)
 80064b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <xTimerCreateTimerTask+0x90>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064ba:	2301      	movs	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10b      	bne.n	80064dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	613b      	str	r3, [r7, #16]
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064dc:	697b      	ldr	r3, [r7, #20]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000e98 	.word	0x20000e98
 80064ec:	080075d4 	.word	0x080075d4
 80064f0:	08006631 	.word	0x08006631
 80064f4:	20000e9c 	.word	0x20000e9c

080064f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	@ 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <xTimerGenericCommand+0x30>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	623b      	str	r3, [r7, #32]
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006528:	4b19      	ldr	r3, [pc, #100]	@ (8006590 <xTimerGenericCommand+0x98>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d02a      	beq.n	8006586 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b05      	cmp	r3, #5
 8006540:	dc18      	bgt.n	8006574 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006542:	f7ff fead 	bl	80062a0 <xTaskGetSchedulerState>
 8006546:	4603      	mov	r3, r0
 8006548:	2b02      	cmp	r3, #2
 800654a:	d109      	bne.n	8006560 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800654c:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <xTimerGenericCommand+0x98>)
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	f107 0110 	add.w	r1, r7, #16
 8006554:	2300      	movs	r3, #0
 8006556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006558:	f7fe fc5a 	bl	8004e10 <xQueueGenericSend>
 800655c:	6278      	str	r0, [r7, #36]	@ 0x24
 800655e:	e012      	b.n	8006586 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006560:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <xTimerGenericCommand+0x98>)
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	f107 0110 	add.w	r1, r7, #16
 8006568:	2300      	movs	r3, #0
 800656a:	2200      	movs	r2, #0
 800656c:	f7fe fc50 	bl	8004e10 <xQueueGenericSend>
 8006570:	6278      	str	r0, [r7, #36]	@ 0x24
 8006572:	e008      	b.n	8006586 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006574:	4b06      	ldr	r3, [pc, #24]	@ (8006590 <xTimerGenericCommand+0x98>)
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	f107 0110 	add.w	r1, r7, #16
 800657c:	2300      	movs	r3, #0
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	f7fe fd48 	bl	8005014 <xQueueGenericSendFromISR>
 8006584:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006588:	4618      	mov	r0, r3
 800658a:	3728      	adds	r7, #40	@ 0x28
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000e98 	.word	0x20000e98

08006594 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af02      	add	r7, sp, #8
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800659e:	4b23      	ldr	r3, [pc, #140]	@ (800662c <prvProcessExpiredTimer+0x98>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fa73 	bl	8004a98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d023      	beq.n	8006608 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	699a      	ldr	r2, [r3, #24]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	18d1      	adds	r1, r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	6978      	ldr	r0, [r7, #20]
 80065ce:	f000 f8d5 	bl	800677c <prvInsertTimerInActiveList>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d020      	beq.n	800661a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065d8:	2300      	movs	r3, #0
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	2100      	movs	r1, #0
 80065e2:	6978      	ldr	r0, [r7, #20]
 80065e4:	f7ff ff88 	bl	80064f8 <xTimerGenericCommand>
 80065e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d114      	bne.n	800661a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	e7fd      	b.n	8006604 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800660e:	f023 0301 	bic.w	r3, r3, #1
 8006612:	b2da      	uxtb	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	4798      	blx	r3
}
 8006622:	bf00      	nop
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000e90 	.word	0x20000e90

08006630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006638:	f107 0308 	add.w	r3, r7, #8
 800663c:	4618      	mov	r0, r3
 800663e:	f000 f859 	bl	80066f4 <prvGetNextExpireTime>
 8006642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4619      	mov	r1, r3
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f805 	bl	8006658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800664e:	f000 f8d7 	bl	8006800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006652:	bf00      	nop
 8006654:	e7f0      	b.n	8006638 <prvTimerTask+0x8>
	...

08006658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006662:	f7ff fa29 	bl	8005ab8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006666:	f107 0308 	add.w	r3, r7, #8
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f866 	bl	800673c <prvSampleTimeNow>
 8006670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d130      	bne.n	80066da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <prvProcessTimerOrBlockTask+0x3c>
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	429a      	cmp	r2, r3
 8006684:	d806      	bhi.n	8006694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006686:	f7ff fa25 	bl	8005ad4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff ff81 	bl	8006594 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006692:	e024      	b.n	80066de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800669a:	4b13      	ldr	r3, [pc, #76]	@ (80066e8 <prvProcessTimerOrBlockTask+0x90>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <prvProcessTimerOrBlockTask+0x50>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <prvProcessTimerOrBlockTask+0x52>
 80066a8:	2300      	movs	r3, #0
 80066aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066ac:	4b0f      	ldr	r3, [pc, #60]	@ (80066ec <prvProcessTimerOrBlockTask+0x94>)
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f7fe ff65 	bl	8005588 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066be:	f7ff fa09 	bl	8005ad4 <xTaskResumeAll>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066c8:	4b09      	ldr	r3, [pc, #36]	@ (80066f0 <prvProcessTimerOrBlockTask+0x98>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
}
 80066d8:	e001      	b.n	80066de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066da:	f7ff f9fb 	bl	8005ad4 <xTaskResumeAll>
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000e94 	.word	0x20000e94
 80066ec:	20000e98 	.word	0x20000e98
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006738 <prvGetNextExpireTime+0x44>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <prvGetNextExpireTime+0x16>
 8006706:	2201      	movs	r2, #1
 8006708:	e000      	b.n	800670c <prvGetNextExpireTime+0x18>
 800670a:	2200      	movs	r2, #0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006718:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <prvGetNextExpireTime+0x44>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e001      	b.n	8006728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000e90 	.word	0x20000e90

0800673c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006744:	f7ff fa64 	bl	8005c10 <xTaskGetTickCount>
 8006748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800674a:	4b0b      	ldr	r3, [pc, #44]	@ (8006778 <prvSampleTimeNow+0x3c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	429a      	cmp	r2, r3
 8006752:	d205      	bcs.n	8006760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006754:	f000 f93a 	bl	80069cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e002      	b.n	8006766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006766:	4a04      	ldr	r2, [pc, #16]	@ (8006778 <prvSampleTimeNow+0x3c>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800676c:	68fb      	ldr	r3, [r7, #12]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000ea0 	.word	0x20000ea0

0800677c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d812      	bhi.n	80067c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d302      	bcc.n	80067b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067b0:	2301      	movs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e01b      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067b6:	4b10      	ldr	r3, [pc, #64]	@ (80067f8 <prvInsertTimerInActiveList+0x7c>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe f930 	bl	8004a26 <vListInsert>
 80067c6:	e012      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d206      	bcs.n	80067de <prvInsertTimerInActiveList+0x62>
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e007      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067de:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <prvInsertTimerInActiveList+0x80>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7fe f91c 	bl	8004a26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ee:	697b      	ldr	r3, [r7, #20]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000e94 	.word	0x20000e94
 80067fc:	20000e90 	.word	0x20000e90

08006800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08e      	sub	sp, #56	@ 0x38
 8006804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006806:	e0ce      	b.n	80069a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da19      	bge.n	8006842 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	3304      	adds	r3, #4
 8006812:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61fb      	str	r3, [r7, #28]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006838:	6850      	ldr	r0, [r2, #4]
 800683a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800683c:	6892      	ldr	r2, [r2, #8]
 800683e:	4611      	mov	r1, r2
 8006840:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f2c0 80ae 	blt.w	80069a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d004      	beq.n	8006860 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006858:	3304      	adds	r3, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe f91c 	bl	8004a98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006860:	463b      	mov	r3, r7
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff ff6a 	bl	800673c <prvSampleTimeNow>
 8006868:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b09      	cmp	r3, #9
 800686e:	f200 8097 	bhi.w	80069a0 <prvProcessReceivedCommands+0x1a0>
 8006872:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <prvProcessReceivedCommands+0x78>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	080068a1 	.word	0x080068a1
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068a1 	.word	0x080068a1
 8006884:	08006917 	.word	0x08006917
 8006888:	0800692b 	.word	0x0800692b
 800688c:	08006977 	.word	0x08006977
 8006890:	080068a1 	.word	0x080068a1
 8006894:	080068a1 	.word	0x080068a1
 8006898:	08006917 	.word	0x08006917
 800689c:	0800692b 	.word	0x0800692b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	18d1      	adds	r1, r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c0:	f7ff ff5c 	bl	800677c <prvInsertTimerInActiveList>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d06c      	beq.n	80069a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d061      	beq.n	80069a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	441a      	add	r2, r3
 80068e8:	2300      	movs	r3, #0
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	2300      	movs	r3, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068f2:	f7ff fe01 	bl	80064f8 <xTimerGenericCommand>
 80068f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d152      	bne.n	80069a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61bb      	str	r3, [r7, #24]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	b2da      	uxtb	r2, r3
 8006922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006924:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006928:	e03d      	b.n	80069a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	b2da      	uxtb	r2, r3
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	617b      	str	r3, [r7, #20]
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	e7fd      	b.n	800695e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006964:	699a      	ldr	r2, [r3, #24]
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	18d1      	adds	r1, r2, r3
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006970:	f7ff ff04 	bl	800677c <prvInsertTimerInActiveList>
					break;
 8006974:	e017      	b.n	80069a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d103      	bne.n	800698c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006986:	f000 fbe7 	bl	8007158 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800698a:	e00c      	b.n	80069a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800699e:	e002      	b.n	80069a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80069a0:	bf00      	nop
 80069a2:	e000      	b.n	80069a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80069a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069a6:	4b08      	ldr	r3, [pc, #32]	@ (80069c8 <prvProcessReceivedCommands+0x1c8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1d39      	adds	r1, r7, #4
 80069ac:	2200      	movs	r2, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fbce 	bl	8005150 <xQueueReceive>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f47f af26 	bne.w	8006808 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3730      	adds	r7, #48	@ 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000e98 	.word	0x20000e98

080069cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069d2:	e049      	b.n	8006a68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006a90 <prvSwitchTimerLists+0xc4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069de:	4b2c      	ldr	r3, [pc, #176]	@ (8006a90 <prvSwitchTimerLists+0xc4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe f853 	bl	8004a98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d02f      	beq.n	8006a68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4413      	add	r3, r2
 8006a10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d90e      	bls.n	8006a38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a26:	4b1a      	ldr	r3, [pc, #104]	@ (8006a90 <prvSwitchTimerLists+0xc4>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fd fff8 	bl	8004a26 <vListInsert>
 8006a36:	e017      	b.n	8006a68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	2100      	movs	r1, #0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff fd58 	bl	80064f8 <xTimerGenericCommand>
 8006a48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	603b      	str	r3, [r7, #0]
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a68:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <prvSwitchTimerLists+0xc4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1b0      	bne.n	80069d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a72:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <prvSwitchTimerLists+0xc4>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <prvSwitchTimerLists+0xc8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a04      	ldr	r2, [pc, #16]	@ (8006a90 <prvSwitchTimerLists+0xc4>)
 8006a7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a80:	4a04      	ldr	r2, [pc, #16]	@ (8006a94 <prvSwitchTimerLists+0xc8>)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6013      	str	r3, [r2, #0]
}
 8006a86:	bf00      	nop
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000e90 	.word	0x20000e90
 8006a94:	20000e94 	.word	0x20000e94

08006a98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a9e:	f000 f96b 	bl	8006d78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006aa2:	4b15      	ldr	r3, [pc, #84]	@ (8006af8 <prvCheckForValidListAndQueue+0x60>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d120      	bne.n	8006aec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006aaa:	4814      	ldr	r0, [pc, #80]	@ (8006afc <prvCheckForValidListAndQueue+0x64>)
 8006aac:	f7fd ff6a 	bl	8004984 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ab0:	4813      	ldr	r0, [pc, #76]	@ (8006b00 <prvCheckForValidListAndQueue+0x68>)
 8006ab2:	f7fd ff67 	bl	8004984 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ab6:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <prvCheckForValidListAndQueue+0x6c>)
 8006ab8:	4a10      	ldr	r2, [pc, #64]	@ (8006afc <prvCheckForValidListAndQueue+0x64>)
 8006aba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006abc:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <prvCheckForValidListAndQueue+0x70>)
 8006abe:	4a10      	ldr	r2, [pc, #64]	@ (8006b00 <prvCheckForValidListAndQueue+0x68>)
 8006ac0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4b11      	ldr	r3, [pc, #68]	@ (8006b0c <prvCheckForValidListAndQueue+0x74>)
 8006ac8:	4a11      	ldr	r2, [pc, #68]	@ (8006b10 <prvCheckForValidListAndQueue+0x78>)
 8006aca:	2110      	movs	r1, #16
 8006acc:	200a      	movs	r0, #10
 8006ace:	f7fe f877 	bl	8004bc0 <xQueueGenericCreateStatic>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4a08      	ldr	r2, [pc, #32]	@ (8006af8 <prvCheckForValidListAndQueue+0x60>)
 8006ad6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ad8:	4b07      	ldr	r3, [pc, #28]	@ (8006af8 <prvCheckForValidListAndQueue+0x60>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ae0:	4b05      	ldr	r3, [pc, #20]	@ (8006af8 <prvCheckForValidListAndQueue+0x60>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	490b      	ldr	r1, [pc, #44]	@ (8006b14 <prvCheckForValidListAndQueue+0x7c>)
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fe fd24 	bl	8005534 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aec:	f000 f976 	bl	8006ddc <vPortExitCritical>
}
 8006af0:	bf00      	nop
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000e98 	.word	0x20000e98
 8006afc:	20000e68 	.word	0x20000e68
 8006b00:	20000e7c 	.word	0x20000e7c
 8006b04:	20000e90 	.word	0x20000e90
 8006b08:	20000e94 	.word	0x20000e94
 8006b0c:	20000f44 	.word	0x20000f44
 8006b10:	20000ea4 	.word	0x20000ea4
 8006b14:	080075dc 	.word	0x080075dc

08006b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3b04      	subs	r3, #4
 8006b28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3b04      	subs	r3, #4
 8006b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0201 	bic.w	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3b04      	subs	r3, #4
 8006b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b48:	4a0c      	ldr	r2, [pc, #48]	@ (8006b7c <pxPortInitialiseStack+0x64>)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b14      	subs	r3, #20
 8006b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3b04      	subs	r3, #4
 8006b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f06f 0202 	mvn.w	r2, #2
 8006b66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3b20      	subs	r3, #32
 8006b6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	08006b81 	.word	0x08006b81

08006b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b8a:	4b13      	ldr	r3, [pc, #76]	@ (8006bd8 <prvTaskExitError+0x58>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d00b      	beq.n	8006bac <prvTaskExitError+0x2c>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60fb      	str	r3, [r7, #12]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <prvTaskExitError+0x28>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60bb      	str	r3, [r7, #8]
}
 8006bbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bc0:	bf00      	nop
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0fc      	beq.n	8006bc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	2000000c 	.word	0x2000000c
 8006bdc:	00000000 	.word	0x00000000

08006be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006be0:	4b07      	ldr	r3, [pc, #28]	@ (8006c00 <pxCurrentTCBConst2>)
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	6808      	ldr	r0, [r1, #0]
 8006be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	f380 8809 	msr	PSP, r0
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8811 	msr	BASEPRI, r0
 8006bfa:	4770      	bx	lr
 8006bfc:	f3af 8000 	nop.w

08006c00 <pxCurrentTCBConst2>:
 8006c00:	20000968 	.word	0x20000968
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop

08006c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c08:	4808      	ldr	r0, [pc, #32]	@ (8006c2c <prvPortStartFirstTask+0x24>)
 8006c0a:	6800      	ldr	r0, [r0, #0]
 8006c0c:	6800      	ldr	r0, [r0, #0]
 8006c0e:	f380 8808 	msr	MSP, r0
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8814 	msr	CONTROL, r0
 8006c1a:	b662      	cpsie	i
 8006c1c:	b661      	cpsie	f
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	df00      	svc	0
 8006c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed08 	.word	0xe000ed08

08006c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c36:	4b47      	ldr	r3, [pc, #284]	@ (8006d54 <xPortStartScheduler+0x124>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a47      	ldr	r2, [pc, #284]	@ (8006d58 <xPortStartScheduler+0x128>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10b      	bne.n	8006c58 <xPortStartScheduler+0x28>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	613b      	str	r3, [r7, #16]
}
 8006c52:	bf00      	nop
 8006c54:	bf00      	nop
 8006c56:	e7fd      	b.n	8006c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c58:	4b3e      	ldr	r3, [pc, #248]	@ (8006d54 <xPortStartScheduler+0x124>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d5c <xPortStartScheduler+0x12c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d10b      	bne.n	8006c7a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60fb      	str	r3, [r7, #12]
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c7a:	4b39      	ldr	r3, [pc, #228]	@ (8006d60 <xPortStartScheduler+0x130>)
 8006c7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	22ff      	movs	r2, #255	@ 0xff
 8006c8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	4b31      	ldr	r3, [pc, #196]	@ (8006d64 <xPortStartScheduler+0x134>)
 8006ca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ca2:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006ca4:	2207      	movs	r2, #7
 8006ca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ca8:	e009      	b.n	8006cbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006caa:	4b2f      	ldr	r3, [pc, #188]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc6:	2b80      	cmp	r3, #128	@ 0x80
 8006cc8:	d0ef      	beq.n	8006caa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cca:	4b27      	ldr	r3, [pc, #156]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1c3 0307 	rsb	r3, r3, #7
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d00b      	beq.n	8006cee <xPortStartScheduler+0xbe>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	60bb      	str	r3, [r7, #8]
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	e7fd      	b.n	8006cea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cee:	4b1e      	ldr	r3, [pc, #120]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d00:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <xPortStartScheduler+0x138>)
 8006d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d0c:	4b17      	ldr	r3, [pc, #92]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a16      	ldr	r2, [pc, #88]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d18:	4b14      	ldr	r3, [pc, #80]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a13      	ldr	r2, [pc, #76]	@ (8006d6c <xPortStartScheduler+0x13c>)
 8006d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d24:	f000 f8da 	bl	8006edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d28:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <xPortStartScheduler+0x140>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d2e:	f000 f8f9 	bl	8006f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d32:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <xPortStartScheduler+0x144>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a0f      	ldr	r2, [pc, #60]	@ (8006d74 <xPortStartScheduler+0x144>)
 8006d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d3e:	f7ff ff63 	bl	8006c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d42:	f7ff f82f 	bl	8005da4 <vTaskSwitchContext>
	prvTaskExitError();
 8006d46:	f7ff ff1b 	bl	8006b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	e000ed00 	.word	0xe000ed00
 8006d58:	410fc271 	.word	0x410fc271
 8006d5c:	410fc270 	.word	0x410fc270
 8006d60:	e000e400 	.word	0xe000e400
 8006d64:	20000f94 	.word	0x20000f94
 8006d68:	20000f98 	.word	0x20000f98
 8006d6c:	e000ed20 	.word	0xe000ed20
 8006d70:	2000000c 	.word	0x2000000c
 8006d74:	e000ef34 	.word	0xe000ef34

08006d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
}
 8006d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d92:	4b10      	ldr	r3, [pc, #64]	@ (8006dd4 <vPortEnterCritical+0x5c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3301      	adds	r3, #1
 8006d98:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd4 <vPortEnterCritical+0x5c>)
 8006d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <vPortEnterCritical+0x5c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d110      	bne.n	8006dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006da4:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <vPortEnterCritical+0x60>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	603b      	str	r3, [r7, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <vPortEnterCritical+0x4a>
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	2000000c 	.word	0x2000000c
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006de2:	4b12      	ldr	r3, [pc, #72]	@ (8006e2c <vPortExitCritical+0x50>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <vPortExitCritical+0x26>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	607b      	str	r3, [r7, #4]
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	e7fd      	b.n	8006dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e02:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <vPortExitCritical+0x50>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	4a08      	ldr	r2, [pc, #32]	@ (8006e2c <vPortExitCritical+0x50>)
 8006e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e0c:	4b07      	ldr	r3, [pc, #28]	@ (8006e2c <vPortExitCritical+0x50>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <vPortExitCritical+0x44>
 8006e14:	2300      	movs	r3, #0
 8006e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f383 8811 	msr	BASEPRI, r3
}
 8006e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	2000000c 	.word	0x2000000c

08006e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e30:	f3ef 8009 	mrs	r0, PSP
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <pxCurrentTCBConst>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	f01e 0f10 	tst.w	lr, #16
 8006e40:	bf08      	it	eq
 8006e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e54:	f380 8811 	msr	BASEPRI, r0
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f7fe ffa0 	bl	8005da4 <vTaskSwitchContext>
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f380 8811 	msr	BASEPRI, r0
 8006e6c:	bc09      	pop	{r0, r3}
 8006e6e:	6819      	ldr	r1, [r3, #0]
 8006e70:	6808      	ldr	r0, [r1, #0]
 8006e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e76:	f01e 0f10 	tst.w	lr, #16
 8006e7a:	bf08      	it	eq
 8006e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e80:	f380 8809 	msr	PSP, r0
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst>:
 8006e90:	20000968 	.word	0x20000968
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f7fe febd 	bl	8005c30 <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <xPortSysTickHandler+0x40>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f14 <vPortSetupTimerInterrupt+0x38>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <vPortSetupTimerInterrupt+0x3c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8006f1c <vPortSetupTimerInterrupt+0x40>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	4a09      	ldr	r2, [pc, #36]	@ (8006f20 <vPortSetupTimerInterrupt+0x44>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	4b04      	ldr	r3, [pc, #16]	@ (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	e000e010 	.word	0xe000e010
 8006f14:	e000e018 	.word	0xe000e018
 8006f18:	20000000 	.word	0x20000000
 8006f1c:	10624dd3 	.word	0x10624dd3
 8006f20:	e000e014 	.word	0xe000e014

08006f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f34 <vPortEnableVFP+0x10>
 8006f28:	6801      	ldr	r1, [r0, #0]
 8006f2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006f2e:	6001      	str	r1, [r0, #0]
 8006f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f32:	bf00      	nop
 8006f34:	e000ed88 	.word	0xe000ed88

08006f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f3e:	f3ef 8305 	mrs	r3, IPSR
 8006f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b0f      	cmp	r3, #15
 8006f48:	d915      	bls.n	8006f76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <vPortValidateInterruptPriority+0x74>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f54:	4b16      	ldr	r3, [pc, #88]	@ (8006fb0 <vPortValidateInterruptPriority+0x78>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	7afa      	ldrb	r2, [r7, #11]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d20b      	bcs.n	8006f76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	607b      	str	r3, [r7, #4]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f76:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <vPortValidateInterruptPriority+0x7c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <vPortValidateInterruptPriority+0x80>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d90b      	bls.n	8006f9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	603b      	str	r3, [r7, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vPortValidateInterruptPriority+0x62>
	}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	e000e3f0 	.word	0xe000e3f0
 8006fb0:	20000f94 	.word	0x20000f94
 8006fb4:	e000ed0c 	.word	0xe000ed0c
 8006fb8:	20000f98 	.word	0x20000f98

08006fbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	@ 0x28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fc8:	f7fe fd76 	bl	8005ab8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8007140 <pvPortMalloc+0x184>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fd4:	f000 f924 	bl	8007220 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8007144 <pvPortMalloc+0x188>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 8095 	bne.w	8007110 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01e      	beq.n	800702a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006fec:	2208      	movs	r2, #8
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d015      	beq.n	800702a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f023 0307 	bic.w	r3, r3, #7
 8007004:	3308      	adds	r3, #8
 8007006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <pvPortMalloc+0x6e>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	617b      	str	r3, [r7, #20]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d06f      	beq.n	8007110 <pvPortMalloc+0x154>
 8007030:	4b45      	ldr	r3, [pc, #276]	@ (8007148 <pvPortMalloc+0x18c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	429a      	cmp	r2, r3
 8007038:	d86a      	bhi.n	8007110 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800703a:	4b44      	ldr	r3, [pc, #272]	@ (800714c <pvPortMalloc+0x190>)
 800703c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800703e:	4b43      	ldr	r3, [pc, #268]	@ (800714c <pvPortMalloc+0x190>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007044:	e004      	b.n	8007050 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d903      	bls.n	8007062 <pvPortMalloc+0xa6>
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f1      	bne.n	8007046 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007062:	4b37      	ldr	r3, [pc, #220]	@ (8007140 <pvPortMalloc+0x184>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007068:	429a      	cmp	r2, r3
 800706a:	d051      	beq.n	8007110 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2208      	movs	r2, #8
 8007072:	4413      	add	r3, r2
 8007074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	1ad2      	subs	r2, r2, r3
 8007086:	2308      	movs	r3, #8
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	429a      	cmp	r2, r3
 800708c:	d920      	bls.n	80070d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800708e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <pvPortMalloc+0xfc>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	e7fd      	b.n	80070b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	1ad2      	subs	r2, r2, r3
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070ca:	69b8      	ldr	r0, [r7, #24]
 80070cc:	f000 f90a 	bl	80072e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <pvPortMalloc+0x18c>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	4a1b      	ldr	r2, [pc, #108]	@ (8007148 <pvPortMalloc+0x18c>)
 80070dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070de:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <pvPortMalloc+0x18c>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <pvPortMalloc+0x194>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d203      	bcs.n	80070f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070ea:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <pvPortMalloc+0x18c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a18      	ldr	r2, [pc, #96]	@ (8007150 <pvPortMalloc+0x194>)
 80070f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <pvPortMalloc+0x188>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007106:	4b13      	ldr	r3, [pc, #76]	@ (8007154 <pvPortMalloc+0x198>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	4a11      	ldr	r2, [pc, #68]	@ (8007154 <pvPortMalloc+0x198>)
 800710e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007110:	f7fe fce0 	bl	8005ad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <pvPortMalloc+0x17a>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	60fb      	str	r3, [r7, #12]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <pvPortMalloc+0x176>
	return pvReturn;
 8007136:	69fb      	ldr	r3, [r7, #28]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	@ 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20004ba4 	.word	0x20004ba4
 8007144:	20004bb8 	.word	0x20004bb8
 8007148:	20004ba8 	.word	0x20004ba8
 800714c:	20004b9c 	.word	0x20004b9c
 8007150:	20004bac 	.word	0x20004bac
 8007154:	20004bb0 	.word	0x20004bb0

08007158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d04f      	beq.n	800720a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800716a:	2308      	movs	r3, #8
 800716c:	425b      	negs	r3, r3
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4b25      	ldr	r3, [pc, #148]	@ (8007214 <vPortFree+0xbc>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4013      	ands	r3, r2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <vPortFree+0x46>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60fb      	str	r3, [r7, #12]
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <vPortFree+0x66>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60bb      	str	r3, [r7, #8]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	4b14      	ldr	r3, [pc, #80]	@ (8007214 <vPortFree+0xbc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01e      	beq.n	800720a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d11a      	bne.n	800720a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007214 <vPortFree+0xbc>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	43db      	mvns	r3, r3
 80071de:	401a      	ands	r2, r3
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071e4:	f7fe fc68 	bl	8005ab8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007218 <vPortFree+0xc0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4413      	add	r3, r2
 80071f2:	4a09      	ldr	r2, [pc, #36]	@ (8007218 <vPortFree+0xc0>)
 80071f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071f6:	6938      	ldr	r0, [r7, #16]
 80071f8:	f000 f874 	bl	80072e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071fc:	4b07      	ldr	r3, [pc, #28]	@ (800721c <vPortFree+0xc4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3301      	adds	r3, #1
 8007202:	4a06      	ldr	r2, [pc, #24]	@ (800721c <vPortFree+0xc4>)
 8007204:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007206:	f7fe fc65 	bl	8005ad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800720a:	bf00      	nop
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20004bb8 	.word	0x20004bb8
 8007218:	20004ba8 	.word	0x20004ba8
 800721c:	20004bb4 	.word	0x20004bb4

08007220 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007226:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800722a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800722c:	4b27      	ldr	r3, [pc, #156]	@ (80072cc <prvHeapInit+0xac>)
 800722e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00c      	beq.n	8007254 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3307      	adds	r3, #7
 800723e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	4a1f      	ldr	r2, [pc, #124]	@ (80072cc <prvHeapInit+0xac>)
 8007250:	4413      	add	r3, r2
 8007252:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007258:	4a1d      	ldr	r2, [pc, #116]	@ (80072d0 <prvHeapInit+0xb0>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800725e:	4b1c      	ldr	r3, [pc, #112]	@ (80072d0 <prvHeapInit+0xb0>)
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800726c:	2208      	movs	r2, #8
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <prvHeapInit+0xb4>)
 8007280:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007282:	4b14      	ldr	r3, [pc, #80]	@ (80072d4 <prvHeapInit+0xb4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2200      	movs	r2, #0
 8007288:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800728a:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <prvHeapInit+0xb4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	1ad2      	subs	r2, r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072a0:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <prvHeapInit+0xb4>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	4a0a      	ldr	r2, [pc, #40]	@ (80072d8 <prvHeapInit+0xb8>)
 80072ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4a09      	ldr	r2, [pc, #36]	@ (80072dc <prvHeapInit+0xbc>)
 80072b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072b8:	4b09      	ldr	r3, [pc, #36]	@ (80072e0 <prvHeapInit+0xc0>)
 80072ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072be:	601a      	str	r2, [r3, #0]
}
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	20000f9c 	.word	0x20000f9c
 80072d0:	20004b9c 	.word	0x20004b9c
 80072d4:	20004ba4 	.word	0x20004ba4
 80072d8:	20004bac 	.word	0x20004bac
 80072dc:	20004ba8 	.word	0x20004ba8
 80072e0:	20004bb8 	.word	0x20004bb8

080072e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072ec:	4b28      	ldr	r3, [pc, #160]	@ (8007390 <prvInsertBlockIntoFreeList+0xac>)
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e002      	b.n	80072f8 <prvInsertBlockIntoFreeList+0x14>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d8f7      	bhi.n	80072f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	4413      	add	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d108      	bne.n	8007326 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	441a      	add	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	441a      	add	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d118      	bne.n	800736c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b15      	ldr	r3, [pc, #84]	@ (8007394 <prvInsertBlockIntoFreeList+0xb0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d00d      	beq.n	8007362 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	441a      	add	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e008      	b.n	8007374 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007362:	4b0c      	ldr	r3, [pc, #48]	@ (8007394 <prvInsertBlockIntoFreeList+0xb0>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e003      	b.n	8007374 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	429a      	cmp	r2, r3
 800737a:	d002      	beq.n	8007382 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007382:	bf00      	nop
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20004b9c 	.word	0x20004b9c
 8007394:	20004ba4 	.word	0x20004ba4

08007398 <memset>:
 8007398:	4402      	add	r2, r0
 800739a:	4603      	mov	r3, r0
 800739c:	4293      	cmp	r3, r2
 800739e:	d100      	bne.n	80073a2 <memset+0xa>
 80073a0:	4770      	bx	lr
 80073a2:	f803 1b01 	strb.w	r1, [r3], #1
 80073a6:	e7f9      	b.n	800739c <memset+0x4>

080073a8 <_reclaim_reent>:
 80073a8:	4b29      	ldr	r3, [pc, #164]	@ (8007450 <_reclaim_reent+0xa8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4283      	cmp	r3, r0
 80073ae:	b570      	push	{r4, r5, r6, lr}
 80073b0:	4604      	mov	r4, r0
 80073b2:	d04b      	beq.n	800744c <_reclaim_reent+0xa4>
 80073b4:	69c3      	ldr	r3, [r0, #28]
 80073b6:	b1ab      	cbz	r3, 80073e4 <_reclaim_reent+0x3c>
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	b16b      	cbz	r3, 80073d8 <_reclaim_reent+0x30>
 80073bc:	2500      	movs	r5, #0
 80073be:	69e3      	ldr	r3, [r4, #28]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	5959      	ldr	r1, [r3, r5]
 80073c4:	2900      	cmp	r1, #0
 80073c6:	d13b      	bne.n	8007440 <_reclaim_reent+0x98>
 80073c8:	3504      	adds	r5, #4
 80073ca:	2d80      	cmp	r5, #128	@ 0x80
 80073cc:	d1f7      	bne.n	80073be <_reclaim_reent+0x16>
 80073ce:	69e3      	ldr	r3, [r4, #28]
 80073d0:	4620      	mov	r0, r4
 80073d2:	68d9      	ldr	r1, [r3, #12]
 80073d4:	f000 f872 	bl	80074bc <_free_r>
 80073d8:	69e3      	ldr	r3, [r4, #28]
 80073da:	6819      	ldr	r1, [r3, #0]
 80073dc:	b111      	cbz	r1, 80073e4 <_reclaim_reent+0x3c>
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 f86c 	bl	80074bc <_free_r>
 80073e4:	6961      	ldr	r1, [r4, #20]
 80073e6:	b111      	cbz	r1, 80073ee <_reclaim_reent+0x46>
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 f867 	bl	80074bc <_free_r>
 80073ee:	69e1      	ldr	r1, [r4, #28]
 80073f0:	b111      	cbz	r1, 80073f8 <_reclaim_reent+0x50>
 80073f2:	4620      	mov	r0, r4
 80073f4:	f000 f862 	bl	80074bc <_free_r>
 80073f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80073fa:	b111      	cbz	r1, 8007402 <_reclaim_reent+0x5a>
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 f85d 	bl	80074bc <_free_r>
 8007402:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007404:	b111      	cbz	r1, 800740c <_reclaim_reent+0x64>
 8007406:	4620      	mov	r0, r4
 8007408:	f000 f858 	bl	80074bc <_free_r>
 800740c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800740e:	b111      	cbz	r1, 8007416 <_reclaim_reent+0x6e>
 8007410:	4620      	mov	r0, r4
 8007412:	f000 f853 	bl	80074bc <_free_r>
 8007416:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007418:	b111      	cbz	r1, 8007420 <_reclaim_reent+0x78>
 800741a:	4620      	mov	r0, r4
 800741c:	f000 f84e 	bl	80074bc <_free_r>
 8007420:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007422:	b111      	cbz	r1, 800742a <_reclaim_reent+0x82>
 8007424:	4620      	mov	r0, r4
 8007426:	f000 f849 	bl	80074bc <_free_r>
 800742a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800742c:	b111      	cbz	r1, 8007434 <_reclaim_reent+0x8c>
 800742e:	4620      	mov	r0, r4
 8007430:	f000 f844 	bl	80074bc <_free_r>
 8007434:	6a23      	ldr	r3, [r4, #32]
 8007436:	b14b      	cbz	r3, 800744c <_reclaim_reent+0xa4>
 8007438:	4620      	mov	r0, r4
 800743a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800743e:	4718      	bx	r3
 8007440:	680e      	ldr	r6, [r1, #0]
 8007442:	4620      	mov	r0, r4
 8007444:	f000 f83a 	bl	80074bc <_free_r>
 8007448:	4631      	mov	r1, r6
 800744a:	e7bb      	b.n	80073c4 <_reclaim_reent+0x1c>
 800744c:	bd70      	pop	{r4, r5, r6, pc}
 800744e:	bf00      	nop
 8007450:	20000010 	.word	0x20000010

08007454 <__libc_init_array>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4d0d      	ldr	r5, [pc, #52]	@ (800748c <__libc_init_array+0x38>)
 8007458:	4c0d      	ldr	r4, [pc, #52]	@ (8007490 <__libc_init_array+0x3c>)
 800745a:	1b64      	subs	r4, r4, r5
 800745c:	10a4      	asrs	r4, r4, #2
 800745e:	2600      	movs	r6, #0
 8007460:	42a6      	cmp	r6, r4
 8007462:	d109      	bne.n	8007478 <__libc_init_array+0x24>
 8007464:	4d0b      	ldr	r5, [pc, #44]	@ (8007494 <__libc_init_array+0x40>)
 8007466:	4c0c      	ldr	r4, [pc, #48]	@ (8007498 <__libc_init_array+0x44>)
 8007468:	f000 f87e 	bl	8007568 <_init>
 800746c:	1b64      	subs	r4, r4, r5
 800746e:	10a4      	asrs	r4, r4, #2
 8007470:	2600      	movs	r6, #0
 8007472:	42a6      	cmp	r6, r4
 8007474:	d105      	bne.n	8007482 <__libc_init_array+0x2e>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	f855 3b04 	ldr.w	r3, [r5], #4
 800747c:	4798      	blx	r3
 800747e:	3601      	adds	r6, #1
 8007480:	e7ee      	b.n	8007460 <__libc_init_array+0xc>
 8007482:	f855 3b04 	ldr.w	r3, [r5], #4
 8007486:	4798      	blx	r3
 8007488:	3601      	adds	r6, #1
 800748a:	e7f2      	b.n	8007472 <__libc_init_array+0x1e>
 800748c:	08007680 	.word	0x08007680
 8007490:	08007680 	.word	0x08007680
 8007494:	08007680 	.word	0x08007680
 8007498:	08007684 	.word	0x08007684

0800749c <__retarget_lock_acquire_recursive>:
 800749c:	4770      	bx	lr

0800749e <__retarget_lock_release_recursive>:
 800749e:	4770      	bx	lr

080074a0 <memcpy>:
 80074a0:	440a      	add	r2, r1
 80074a2:	4291      	cmp	r1, r2
 80074a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80074a8:	d100      	bne.n	80074ac <memcpy+0xc>
 80074aa:	4770      	bx	lr
 80074ac:	b510      	push	{r4, lr}
 80074ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074b6:	4291      	cmp	r1, r2
 80074b8:	d1f9      	bne.n	80074ae <memcpy+0xe>
 80074ba:	bd10      	pop	{r4, pc}

080074bc <_free_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4605      	mov	r5, r0
 80074c0:	2900      	cmp	r1, #0
 80074c2:	d041      	beq.n	8007548 <_free_r+0x8c>
 80074c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c8:	1f0c      	subs	r4, r1, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfb8      	it	lt
 80074ce:	18e4      	addlt	r4, r4, r3
 80074d0:	f000 f83e 	bl	8007550 <__malloc_lock>
 80074d4:	4a1d      	ldr	r2, [pc, #116]	@ (800754c <_free_r+0x90>)
 80074d6:	6813      	ldr	r3, [r2, #0]
 80074d8:	b933      	cbnz	r3, 80074e8 <_free_r+0x2c>
 80074da:	6063      	str	r3, [r4, #4]
 80074dc:	6014      	str	r4, [r2, #0]
 80074de:	4628      	mov	r0, r5
 80074e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e4:	f000 b83a 	b.w	800755c <__malloc_unlock>
 80074e8:	42a3      	cmp	r3, r4
 80074ea:	d908      	bls.n	80074fe <_free_r+0x42>
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	1821      	adds	r1, r4, r0
 80074f0:	428b      	cmp	r3, r1
 80074f2:	bf01      	itttt	eq
 80074f4:	6819      	ldreq	r1, [r3, #0]
 80074f6:	685b      	ldreq	r3, [r3, #4]
 80074f8:	1809      	addeq	r1, r1, r0
 80074fa:	6021      	streq	r1, [r4, #0]
 80074fc:	e7ed      	b.n	80074da <_free_r+0x1e>
 80074fe:	461a      	mov	r2, r3
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	b10b      	cbz	r3, 8007508 <_free_r+0x4c>
 8007504:	42a3      	cmp	r3, r4
 8007506:	d9fa      	bls.n	80074fe <_free_r+0x42>
 8007508:	6811      	ldr	r1, [r2, #0]
 800750a:	1850      	adds	r0, r2, r1
 800750c:	42a0      	cmp	r0, r4
 800750e:	d10b      	bne.n	8007528 <_free_r+0x6c>
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	4401      	add	r1, r0
 8007514:	1850      	adds	r0, r2, r1
 8007516:	4283      	cmp	r3, r0
 8007518:	6011      	str	r1, [r2, #0]
 800751a:	d1e0      	bne.n	80074de <_free_r+0x22>
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	6053      	str	r3, [r2, #4]
 8007522:	4408      	add	r0, r1
 8007524:	6010      	str	r0, [r2, #0]
 8007526:	e7da      	b.n	80074de <_free_r+0x22>
 8007528:	d902      	bls.n	8007530 <_free_r+0x74>
 800752a:	230c      	movs	r3, #12
 800752c:	602b      	str	r3, [r5, #0]
 800752e:	e7d6      	b.n	80074de <_free_r+0x22>
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	1821      	adds	r1, r4, r0
 8007534:	428b      	cmp	r3, r1
 8007536:	bf04      	itt	eq
 8007538:	6819      	ldreq	r1, [r3, #0]
 800753a:	685b      	ldreq	r3, [r3, #4]
 800753c:	6063      	str	r3, [r4, #4]
 800753e:	bf04      	itt	eq
 8007540:	1809      	addeq	r1, r1, r0
 8007542:	6021      	streq	r1, [r4, #0]
 8007544:	6054      	str	r4, [r2, #4]
 8007546:	e7ca      	b.n	80074de <_free_r+0x22>
 8007548:	bd38      	pop	{r3, r4, r5, pc}
 800754a:	bf00      	nop
 800754c:	20004cf8 	.word	0x20004cf8

08007550 <__malloc_lock>:
 8007550:	4801      	ldr	r0, [pc, #4]	@ (8007558 <__malloc_lock+0x8>)
 8007552:	f7ff bfa3 	b.w	800749c <__retarget_lock_acquire_recursive>
 8007556:	bf00      	nop
 8007558:	20004cf4 	.word	0x20004cf4

0800755c <__malloc_unlock>:
 800755c:	4801      	ldr	r0, [pc, #4]	@ (8007564 <__malloc_unlock+0x8>)
 800755e:	f7ff bf9e 	b.w	800749e <__retarget_lock_release_recursive>
 8007562:	bf00      	nop
 8007564:	20004cf4 	.word	0x20004cf4

08007568 <_init>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr

08007574 <_fini>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

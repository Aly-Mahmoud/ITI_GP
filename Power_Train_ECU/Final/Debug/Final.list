
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007c50  08007c50  00008c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d74  08007d74  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d7c  08007d7c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d7c  08007d7c  00008d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d80  08007d80  00008d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007d84  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cf0  20000064  08007de8  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d54  08007de8  00009d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019237  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f4  00000000  00000000  000222cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  000259c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe4  00000000  00000000  00026e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001889f  00000000  00000000  00027e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170d3  00000000  00000000  000406b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098231  00000000  00000000  00057786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef9b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a24  00000000  00000000  000ef9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f5420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c38 	.word	0x08007c38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007c38 	.word	0x08007c38

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <Parse_Steering_Data>:

uint8_t uart_rx_buffer[BUFFER_SIZE];


void Parse_Steering_Data(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
    steering_data.steering = uart_rx_buffer[3];
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cb2:	78da      	ldrb	r2, [r3, #3]
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cb6:	705a      	strb	r2, [r3, #1]
    steering_data.pedal_gas = uart_rx_buffer[4];
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cba:	791a      	ldrb	r2, [r3, #4]
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cbe:	709a      	strb	r2, [r3, #2]
    steering_data.pedal_brake = uart_rx_buffer[5];
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cc2:	795a      	ldrb	r2, [r3, #5]
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cc6:	70da      	strb	r2, [r3, #3]
    steering_data.buttons = uart_rx_buffer[6];
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <Parse_Steering_Data+0x30>)
 8000cca:	799a      	ldrb	r2, [r3, #6]
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <Parse_Steering_Data+0x34>)
 8000cce:	711a      	strb	r2, [r3, #4]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	20000080 	.word	0x20000080

08000ce4 <calculate_crc>:
//	Parse_Steering_Data();
//	UART_Receive_Data_IT();
//}


uint8_t calculate_crc(uint8_t *data, size_t length) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; i++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	e009      	b.n	8000d0c <calculate_crc+0x28>
        crc += data[i];
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781a      	ldrb	r2, [r3, #0]
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	4413      	add	r3, r2
 8000d04:	73fb      	strb	r3, [r7, #15]
    for (size_t i = 0; i < length; i++) {
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3f1      	bcc.n	8000cf8 <calculate_crc+0x14>
    }
    return crc;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <check_crc>:

// Function to check the received data with CRC
uint8_t check_crc(uint8_t *data, size_t length) {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
    if (length < 2) {
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d801      	bhi.n	8000d36 <check_crc+0x14>
        // Data is too short to contain a CRC
        return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e014      	b.n	8000d60 <check_crc+0x3e>
    }

    // Extract the CRC from the last byte
    uint8_t received_crc = data[length - 1];
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	73fb      	strb	r3, [r7, #15]

    // Calculate the CRC over the data (excluding the last byte)
    uint8_t calculated_crc = calculate_crc(data, length - 1);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffcb 	bl	8000ce4 <calculate_crc>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73bb      	strb	r3, [r7, #14]

    // Compare the calculated CRC with the received CRC
    return (calculated_crc == received_crc);
 8000d52:	7bba      	ldrb	r2, [r7, #14]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	bf0c      	ite	eq
 8000d5a:	2301      	moveq	r3, #1
 8000d5c:	2300      	movne	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <Communication>:

void Communication(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef uart_status;
    uint8_t header[HEADER_SIZE] = {0}; // Initialize header to a known value
 8000d6e:	4b31      	ldr	r3, [pc, #196]	@ (8000e34 <Communication+0xcc>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	80bb      	strh	r3, [r7, #4]
 8000d74:	2300      	movs	r3, #0
 8000d76:	71bb      	strb	r3, [r7, #6]
    uint8_t expected_header[HEADER_SIZE] = VALID_HEADER;
 8000d78:	4a2f      	ldr	r2, [pc, #188]	@ (8000e38 <Communication+0xd0>)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	8019      	strh	r1, [r3, #0]
 8000d82:	3302      	adds	r3, #2
 8000d84:	0c12      	lsrs	r2, r2, #16
 8000d86:	701a      	strb	r2, [r3, #0]

    for (;;)
    {
		static uint8_t crc_check = 0;
		if (xSemaphoreTake(Semaphore1Handle, HAL_MAX_DELAY) == pdTRUE)
 8000d88:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <Communication+0xd4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	4618      	mov	r0, r3
 8000d92:	f004 fba1 	bl	80054d8 <xQueueSemaphoreTake>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d1f5      	bne.n	8000d88 <Communication+0x20>
			{
    	        {
    	            // Step 1: Receive the header bytes
    	            do
    	            {
    	                uart_status = HAL_UART_Receive(&huart2, header, HEADER_SIZE, HAL_MAX_DELAY);
 8000d9c:	1d39      	adds	r1, r7, #4
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2203      	movs	r2, #3
 8000da4:	4826      	ldr	r0, [pc, #152]	@ (8000e40 <Communication+0xd8>)
 8000da6:	f003 f8ed 	bl	8003f84 <HAL_UART_Receive>
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
    	            }
    	            while (memcmp(header, expected_header, HEADER_SIZE) != 0);
 8000dae:	4639      	mov	r1, r7
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2203      	movs	r2, #3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fe47 	bl	8007a48 <memcmp>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1ed      	bne.n	8000d9c <Communication+0x34>

    		            if (uart_status == HAL_OK && memcmp(header, expected_header, HEADER_SIZE) == 0)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d126      	bne.n	8000e14 <Communication+0xac>
 8000dc6:	4639      	mov	r1, r7
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2203      	movs	r2, #3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f006 fe3b 	bl	8007a48 <memcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d11d      	bne.n	8000e14 <Communication+0xac>
    		            {
    		                // Step 2: Receive the remaining bytes if the header is valid
    		                uart_status = HAL_UART_Receive(&huart2, uart_rx_buffer + HEADER_SIZE, BUFFER_SIZE, HAL_MAX_DELAY);
 8000dd8:	491a      	ldr	r1, [pc, #104]	@ (8000e44 <Communication+0xdc>)
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	2208      	movs	r2, #8
 8000de0:	4817      	ldr	r0, [pc, #92]	@ (8000e40 <Communication+0xd8>)
 8000de2:	f003 f8cf 	bl	8003f84 <HAL_UART_Receive>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]


    		                if (uart_status == HAL_OK)
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d111      	bne.n	8000e14 <Communication+0xac>
    		                {
    		                    // Copy the header to the buffer
    		                    memcpy(uart_rx_buffer, header, HEADER_SIZE);
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <Communication+0xe0>)
 8000df2:	1d3a      	adds	r2, r7, #4
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	4611      	mov	r1, r2
 8000df8:	8019      	strh	r1, [r3, #0]
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	0c12      	lsrs	r2, r2, #16
 8000dfe:	701a      	strb	r2, [r3, #0]
    		                    crc_check =   check_crc(uart_rx_buffer , BUFFER_SIZE);
 8000e00:	2108      	movs	r1, #8
 8000e02:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <Communication+0xe0>)
 8000e04:	f7ff ff8d 	bl	8000d22 <check_crc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <Communication+0xe4>)
 8000e0e:	701a      	strb	r2, [r3, #0]
    		                    // Process the received data
    		                    Parse_Steering_Data();
 8000e10:	f7ff ff4c 	bl	8000cac <Parse_Steering_Data>
    		                }
    		            }

    		        }

    	}while (crc_check == 0);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <Communication+0xe4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0bf      	beq.n	8000d9c <Communication+0x34>

    	crc_check = 0;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <Communication+0xe4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
    	xSemaphoreGive(Semaphore2Handle);
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <Communication+0xe8>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	2300      	movs	r3, #0
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f004 f8d2 	bl	8004fd4 <xQueueGenericSend>
    {
 8000e30:	e7aa      	b.n	8000d88 <Communication+0x20>
 8000e32:	bf00      	nop
 8000e34:	08007c50 	.word	0x08007c50
 8000e38:	08007c54 	.word	0x08007c54
 8000e3c:	200001d0 	.word	0x200001d0
 8000e40:	2000017c 	.word	0x2000017c
 8000e44:	2000008b 	.word	0x2000008b
 8000e48:	20000088 	.word	0x20000088
 8000e4c:	20000090 	.word	0x20000090
 8000e50:	200001d4 	.word	0x200001d4
 8000e54:	00000000 	.word	0x00000000

08000e58 <controllingSM>:
static int32_t map_value(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);
static void setSteeringAngle(void);
static void checkSteering(void);

void controllingSM(void)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af02      	add	r7, sp, #8

	/* Set the Direction of Motors to FWD */
	//setMotorDirection(DIR_FWD);

	//pwm_value_steering = map_value(steering_data.steering, MIN_STEERING_VALUE, MAX_STEERING_VALUE, 0, 100);
	uint32_t pedal_value = abs_diff(map_value(uart_rx_buffer[PEDAL_GAS_IDX],PEDAL_GAS_MIN,PEDAL_GAS_MAX,0,100)\
 8000e5e:	4bba      	ldr	r3, [pc, #744]	@ (8001148 <controllingSM+0x2f0>)
 8000e60:	791b      	ldrb	r3, [r3, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	2364      	movs	r3, #100	@ 0x64
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	2240      	movs	r2, #64	@ 0x40
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f000 fac1 	bl	80013f4 <map_value>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461c      	mov	r4, r3
						,map_value(uart_rx_buffer[PEDAL_BRAKE_IDX],PEDAL_BRAKE_MIN,PEDAL_BRAKE_MAX,0,100));
 8000e76:	4bb4      	ldr	r3, [pc, #720]	@ (8001148 <controllingSM+0x2f0>)
 8000e78:	795b      	ldrb	r3, [r3, #5]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2300      	movs	r3, #0
 8000e82:	2240      	movs	r2, #64	@ 0x40
 8000e84:	2100      	movs	r1, #0
 8000e86:	f000 fab5 	bl	80013f4 <map_value>
 8000e8a:	4603      	mov	r3, r0
	uint32_t pedal_value = abs_diff(map_value(uart_rx_buffer[PEDAL_GAS_IDX],PEDAL_GAS_MIN,PEDAL_GAS_MAX,0,100)\
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f000 fa66 	bl	8001360 <abs_diff>
 8000e94:	6078      	str	r0, [r7, #4]
	if(uart_rx_buffer[PEDAL_BRAKE_IDX] < 255 && uart_rx_buffer[PEDAL_GAS_IDX] == 0)
 8000e96:	4bac      	ldr	r3, [pc, #688]	@ (8001148 <controllingSM+0x2f0>)
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	2bff      	cmp	r3, #255	@ 0xff
 8000e9c:	d006      	beq.n	8000eac <controllingSM+0x54>
 8000e9e:	4baa      	ldr	r3, [pc, #680]	@ (8001148 <controllingSM+0x2f0>)
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <controllingSM+0x54>
	{
		pedal_value = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e005      	b.n	8000eb8 <controllingSM+0x60>
	}
	else if(uart_rx_buffer[PEDAL_BRAKE_IDX] == 255)
 8000eac:	4ba6      	ldr	r3, [pc, #664]	@ (8001148 <controllingSM+0x2f0>)
 8000eae:	795b      	ldrb	r3, [r3, #5]
 8000eb0:	2bff      	cmp	r3, #255	@ 0xff
 8000eb2:	d101      	bne.n	8000eb8 <controllingSM+0x60>
	{
		pedal_value = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);*/



	checkClutchValue();
 8000eb8:	f000 fa68 	bl	800138c <checkClutchValue>
	switch (clutch_value)
 8000ebc:	4ba3      	ldr	r3, [pc, #652]	@ (800114c <controllingSM+0x2f4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	f200 814f 	bhi.w	8001164 <controllingSM+0x30c>
 8000ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ecc <controllingSM+0x74>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000ee5 	.word	0x08000ee5
 8000ed0:	08000f59 	.word	0x08000f59
 8000ed4:	08000f6d 	.word	0x08000f6d
 8000ed8:	08000fe1 	.word	0x08000fe1
 8000edc:	08001055 	.word	0x08001055
 8000ee0:	080010c9 	.word	0x080010c9
	{
		case BACK:
			setMotorDirection(DIR_BACK);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f000 f9d1 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 75 * (pedal_value / 100.0);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff faba 	bl	8000464 <__aeabi_ui2d>
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b96      	ldr	r3, [pc, #600]	@ (8001150 <controllingSM+0x2f8>)
 8000ef6:	f7ff fc59 	bl	80007ac <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	a38f      	add	r3, pc, #572	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fb26 	bl	8000558 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fd32 	bl	800097c <__aeabi_d2uiz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b8d      	ldr	r3, [pc, #564]	@ (8001154 <controllingSM+0x2fc>)
 8000f1e:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 75 * (pedal_value / 100.0);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fa9f 	bl	8000464 <__aeabi_ui2d>
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b89      	ldr	r3, [pc, #548]	@ (8001150 <controllingSM+0x2f8>)
 8000f2c:	f7ff fc3e 	bl	80007ac <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	a381      	add	r3, pc, #516	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f7ff fb0b 	bl	8000558 <__aeabi_dmul>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fd17 	bl	800097c <__aeabi_d2uiz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b81      	ldr	r3, [pc, #516]	@ (8001158 <controllingSM+0x300>)
 8000f54:	701a      	strb	r2, [r3, #0]
			break;
 8000f56:	e106      	b.n	8001166 <controllingSM+0x30e>
		case STOP:
			setMotorDirection(DIR_FWD);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f997 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 0;
 8000f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001154 <controllingSM+0x2fc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 0;
 8000f64:	4b7c      	ldr	r3, [pc, #496]	@ (8001158 <controllingSM+0x300>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
			break;
 8000f6a:	e0fc      	b.n	8001166 <controllingSM+0x30e>
		case ONE:
			setMotorDirection(DIR_FWD);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f98d 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 25 * (pedal_value / 100.0);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fa76 	bl	8000464 <__aeabi_ui2d>
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	4b74      	ldr	r3, [pc, #464]	@ (8001150 <controllingSM+0x2f8>)
 8000f7e:	f7ff fc15 	bl	80007ac <__aeabi_ddiv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	4b73      	ldr	r3, [pc, #460]	@ (800115c <controllingSM+0x304>)
 8000f90:	f7ff fae2 	bl	8000558 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fcee 	bl	800097c <__aeabi_d2uiz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	@ (8001154 <controllingSM+0x2fc>)
 8000fa6:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 25 * (pedal_value / 100.0);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff fa5b 	bl	8000464 <__aeabi_ui2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <controllingSM+0x2f8>)
 8000fb4:	f7ff fbfa 	bl	80007ac <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	4b65      	ldr	r3, [pc, #404]	@ (800115c <controllingSM+0x304>)
 8000fc6:	f7ff fac7 	bl	8000558 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f7ff fcd3 	bl	800097c <__aeabi_d2uiz>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b5f      	ldr	r3, [pc, #380]	@ (8001158 <controllingSM+0x300>)
 8000fdc:	701a      	strb	r2, [r3, #0]
			break;
 8000fde:	e0c2      	b.n	8001166 <controllingSM+0x30e>
		case TWO:
			setMotorDirection(DIR_FWD);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f953 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 50 * (pedal_value / 100.0);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fa3c 	bl	8000464 <__aeabi_ui2d>
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b57      	ldr	r3, [pc, #348]	@ (8001150 <controllingSM+0x2f8>)
 8000ff2:	f7ff fbdb 	bl	80007ac <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <controllingSM+0x308>)
 8001004:	f7ff faa8 	bl	8000558 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fcb4 	bl	800097c <__aeabi_d2uiz>
 8001014:	4603      	mov	r3, r0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b4e      	ldr	r3, [pc, #312]	@ (8001154 <controllingSM+0x2fc>)
 800101a:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 50 * (pedal_value / 100.0);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fa21 	bl	8000464 <__aeabi_ui2d>
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b4a      	ldr	r3, [pc, #296]	@ (8001150 <controllingSM+0x2f8>)
 8001028:	f7ff fbc0 	bl	80007ac <__aeabi_ddiv>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <controllingSM+0x308>)
 800103a:	f7ff fa8d 	bl	8000558 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fc99 	bl	800097c <__aeabi_d2uiz>
 800104a:	4603      	mov	r3, r0
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b42      	ldr	r3, [pc, #264]	@ (8001158 <controllingSM+0x300>)
 8001050:	701a      	strb	r2, [r3, #0]
			break;
 8001052:	e088      	b.n	8001166 <controllingSM+0x30e>
		case THREE:
			setMotorDirection(DIR_FWD);
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f919 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 75 * (pedal_value / 100.0);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fa02 	bl	8000464 <__aeabi_ui2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <controllingSM+0x2f8>)
 8001066:	f7ff fba1 	bl	80007ac <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	a333      	add	r3, pc, #204	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fa6e 	bl	8000558 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fc7a 	bl	800097c <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <controllingSM+0x2fc>)
 800108e:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 75 * (pedal_value / 100.0);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff f9e7 	bl	8000464 <__aeabi_ui2d>
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b2d      	ldr	r3, [pc, #180]	@ (8001150 <controllingSM+0x2f8>)
 800109c:	f7ff fb86 	bl	80007ac <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	a325      	add	r3, pc, #148	@ (adr r3, 8001140 <controllingSM+0x2e8>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fa53 	bl	8000558 <__aeabi_dmul>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fc5f 	bl	800097c <__aeabi_d2uiz>
 80010be:	4603      	mov	r3, r0
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <controllingSM+0x300>)
 80010c4:	701a      	strb	r2, [r3, #0]
			break;
 80010c6:	e04e      	b.n	8001166 <controllingSM+0x30e>
		case FOUR:
			setMotorDirection(DIR_FWD);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f8df 	bl	800128c <setMotorDirection>
			pwm_value_Back_Right = 100 * (pedal_value / 100.0);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f9c8 	bl	8000464 <__aeabi_ui2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <controllingSM+0x2f8>)
 80010da:	f7ff fb67 	bl	80007ac <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <controllingSM+0x2f8>)
 80010ec:	f7ff fa34 	bl	8000558 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fc40 	bl	800097c <__aeabi_d2uiz>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <controllingSM+0x2fc>)
 8001102:	701a      	strb	r2, [r3, #0]
			pwm_value_Back_Left = 100 * (pedal_value / 100.0);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff f9ad 	bl	8000464 <__aeabi_ui2d>
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <controllingSM+0x2f8>)
 8001110:	f7ff fb4c 	bl	80007ac <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <controllingSM+0x2f8>)
 8001122:	f7ff fa19 	bl	8000558 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fc25 	bl	800097c <__aeabi_d2uiz>
 8001132:	4603      	mov	r3, r0
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <controllingSM+0x300>)
 8001138:	701a      	strb	r2, [r3, #0]
			break;
 800113a:	e014      	b.n	8001166 <controllingSM+0x30e>
 800113c:	f3af 8000 	nop.w
 8001140:	00000000 	.word	0x00000000
 8001144:	4052c000 	.word	0x4052c000
 8001148:	20000088 	.word	0x20000088
 800114c:	20000000 	.word	0x20000000
 8001150:	40590000 	.word	0x40590000
 8001154:	200000e8 	.word	0x200000e8
 8001158:	200000e9 	.word	0x200000e9
 800115c:	40390000 	.word	0x40390000
 8001160:	40490000 	.word	0x40490000
		default:
			/* Handle unexpected clutch values*/
			break;
 8001164:	bf00      	nop
	}

	/*0.5 for motor safety+*/
	sConfigOC[BACK_RIGHT_MOTOR].Pulse =  ((pwm_value_Back_Right / 100.0)* MAX_PWM_VALUE);
 8001166:	4b2a      	ldr	r3, [pc, #168]	@ (8001210 <controllingSM+0x3b8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f98a 	bl	8000484 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <controllingSM+0x3bc>)
 8001176:	f7ff fb19 	bl	80007ac <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a321      	add	r3, pc, #132	@ (adr r3, 8001208 <controllingSM+0x3b0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f9e6 	bl	8000558 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fbf2 	bl	800097c <__aeabi_d2uiz>
 8001198:	4603      	mov	r3, r0
 800119a:	4a1f      	ldr	r2, [pc, #124]	@ (8001218 <controllingSM+0x3c0>)
 800119c:	6053      	str	r3, [r2, #4]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_RIGHT_MOTOR], TIM_CHANNEL_1);
 800119e:	2200      	movs	r2, #0
 80011a0:	491d      	ldr	r1, [pc, #116]	@ (8001218 <controllingSM+0x3c0>)
 80011a2:	481e      	ldr	r0, [pc, #120]	@ (800121c <controllingSM+0x3c4>)
 80011a4:	f002 faa2 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>

	sConfigOC[BACK_LEFT_MOTOR].Pulse =  (((pwm_value_Back_Left / 100.0))* MAX_PWM_VALUE);
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <controllingSM+0x3c8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f969 	bl	8000484 <__aeabi_i2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <controllingSM+0x3bc>)
 80011b8:	f7ff faf8 	bl	80007ac <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	a310      	add	r3, pc, #64	@ (adr r3, 8001208 <controllingSM+0x3b0>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff f9c5 	bl	8000558 <__aeabi_dmul>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fbd1 	bl	800097c <__aeabi_d2uiz>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <controllingSM+0x3c0>)
 80011de:	6213      	str	r3, [r2, #32]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_LEFT_MOTOR], TIM_CHANNEL_2);
 80011e0:	2204      	movs	r2, #4
 80011e2:	4910      	ldr	r1, [pc, #64]	@ (8001224 <controllingSM+0x3cc>)
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <controllingSM+0x3c4>)
 80011e6:	f002 fa81 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ea:	2100      	movs	r1, #0
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <controllingSM+0x3c4>)
 80011ee:	f001 ffa9 	bl	8003144 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011f2:	2104      	movs	r1, #4
 80011f4:	4809      	ldr	r0, [pc, #36]	@ (800121c <controllingSM+0x3c4>)
 80011f6:	f001 ffa5 	bl	8003144 <HAL_TIM_PWM_Start>

}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	00000000 	.word	0x00000000
 800120c:	40efffe0 	.word	0x40efffe0
 8001210:	200000e8 	.word	0x200000e8
 8001214:	40590000 	.word	0x40590000
 8001218:	20000094 	.word	0x20000094
 800121c:	200000ec 	.word	0x200000ec
 8001220:	200000e9 	.word	0x200000e9
 8001224:	200000b0 	.word	0x200000b0

08001228 <Controlling>:


void Controlling(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
    pwm_init();
 800122c:	f000 f848 	bl	80012c0 <pwm_init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	4812      	ldr	r0, [pc, #72]	@ (800127c <Controlling+0x54>)
 8001234:	f001 ff86 	bl	8003144 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001238:	2104      	movs	r1, #4
 800123a:	4810      	ldr	r0, [pc, #64]	@ (800127c <Controlling+0x54>)
 800123c:	f001 ff82 	bl	8003144 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001240:	2108      	movs	r1, #8
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <Controlling+0x54>)
 8001244:	f001 ff7e 	bl	8003144 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001248:	213c      	movs	r1, #60	@ 0x3c
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <Controlling+0x58>)
 800124c:	f002 f8d0 	bl	80033f0 <HAL_TIM_Encoder_Start>

    while (1)
    {
    	if( xSemaphoreTake(Semaphore2Handle, HAL_MAX_DELAY) == pdTRUE)
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <Controlling+0x5c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	4618      	mov	r0, r3
 800125a:	f004 f93d 	bl	80054d8 <xQueueSemaphoreTake>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d1f5      	bne.n	8001250 <Controlling+0x28>
    	{
    		controllingSM();
 8001264:	f7ff fdf8 	bl	8000e58 <controllingSM>
    		checkSteering();
 8001268:	f000 f97c 	bl	8001564 <checkSteering>
            xSemaphoreGive(Semaphore1Handle);
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <Controlling+0x60>)
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	2300      	movs	r3, #0
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	f003 fead 	bl	8004fd4 <xQueueGenericSend>
    	if( xSemaphoreTake(Semaphore2Handle, HAL_MAX_DELAY) == pdTRUE)
 800127a:	e7e9      	b.n	8001250 <Controlling+0x28>
 800127c:	200000ec 	.word	0x200000ec
 8001280:	20000134 	.word	0x20000134
 8001284:	200001d4 	.word	0x200001d4
 8001288:	200001d0 	.word	0x200001d0

0800128c <setMotorDirection>:
    	}
    }
}

void setMotorDirection(uint8_t dir)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, BACK_LEFT_MOTOR_DIR_PIN, dir);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	461a      	mov	r2, r3
 800129a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129e:	4807      	ldr	r0, [pc, #28]	@ (80012bc <setMotorDirection+0x30>)
 80012a0:	f001 f9a0 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, BACK_RIGHT_MOTOR_DIR_PIN, dir);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ac:	4803      	ldr	r0, [pc, #12]	@ (80012bc <setMotorDirection+0x30>)
 80012ae:	f001 f999 	bl	80025e4 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020400 	.word	0x40020400

080012c0 <pwm_init>:

static void pwm_init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
    /* Configure PWM channels*/
	uint8_t i = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 3; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e029      	b.n	8001324 <pwm_init+0x64>
    {
        sConfigOC[i].OCMode = TIM_OCMODE_PWM1;
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	491f      	ldr	r1, [pc, #124]	@ (8001350 <pwm_init+0x90>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	2260      	movs	r2, #96	@ 0x60
 80012e0:	601a      	str	r2, [r3, #0]
        sConfigOC[i].Pulse = 0;
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	491a      	ldr	r1, [pc, #104]	@ (8001350 <pwm_init+0x90>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	3304      	adds	r3, #4
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
        sConfigOC[i].OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	79fa      	ldrb	r2, [r7, #7]
 80012f8:	4915      	ldr	r1, [pc, #84]	@ (8001350 <pwm_init+0x90>)
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3308      	adds	r3, #8
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
        sConfigOC[i].OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	4910      	ldr	r1, [pc, #64]	@ (8001350 <pwm_init+0x90>)
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	3310      	adds	r3, #16
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i++)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	3301      	adds	r3, #1
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d9d2      	bls.n	80012d0 <pwm_init+0x10>
    }
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_RIGHT_MOTOR], TIM_CHANNEL_1);
 800132a:	2200      	movs	r2, #0
 800132c:	4908      	ldr	r1, [pc, #32]	@ (8001350 <pwm_init+0x90>)
 800132e:	4809      	ldr	r0, [pc, #36]	@ (8001354 <pwm_init+0x94>)
 8001330:	f002 f9dc 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[BACK_LEFT_MOTOR], TIM_CHANNEL_2);
 8001334:	2204      	movs	r2, #4
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <pwm_init+0x98>)
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <pwm_init+0x94>)
 800133a:	f002 f9d7 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 800133e:	2208      	movs	r2, #8
 8001340:	4906      	ldr	r1, [pc, #24]	@ (800135c <pwm_init+0x9c>)
 8001342:	4804      	ldr	r0, [pc, #16]	@ (8001354 <pwm_init+0x94>)
 8001344:	f002 f9d2 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000094 	.word	0x20000094
 8001354:	200000ec 	.word	0x200000ec
 8001358:	200000b0 	.word	0x200000b0
 800135c:	200000cc 	.word	0x200000cc

08001360 <abs_diff>:

static uint32_t abs_diff(uint32_t a, uint32_t b)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
    return (a > b) ? (a - b) : (b - a);
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d903      	bls.n	800137a <abs_diff+0x1a>
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	e002      	b.n	8001380 <abs_diff+0x20>
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1ad3      	subs	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <checkClutchValue>:

static void checkClutchValue(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	if ((uart_rx_buffer[BUTTONS_IDX] & CLUTCH_INCREMENT_MASK) == 1)
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <checkClutchValue+0x60>)
 8001392:	799b      	ldrb	r3, [r3, #6]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00f      	beq.n	80013bc <checkClutchValue+0x30>
	{
		clutch_value++;
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <checkClutchValue+0x64>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <checkClutchValue+0x64>)
 80013a6:	701a      	strb	r2, [r3, #0]
		if(clutch_value > 5)
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <checkClutchValue+0x64>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d902      	bls.n	80013b6 <checkClutchValue+0x2a>
		{
			clutch_value = 5;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <checkClutchValue+0x64>)
 80013b2:	2205      	movs	r2, #5
 80013b4:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 80013b6:	2064      	movs	r0, #100	@ 0x64
 80013b8:	f000 fe8a 	bl	80020d0 <HAL_Delay>
	}
	if((uart_rx_buffer[BUTTONS_IDX] & CLUTCH_DECREMENT_MASK) >> 1 == 1)
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <checkClutchValue+0x60>)
 80013be:	799b      	ldrb	r3, [r3, #6]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00f      	beq.n	80013e8 <checkClutchValue+0x5c>
	{
		clutch_value--;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <checkClutchValue+0x64>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <checkClutchValue+0x64>)
 80013d2:	701a      	strb	r2, [r3, #0]
		if(clutch_value == 255)
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <checkClutchValue+0x64>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2bff      	cmp	r3, #255	@ 0xff
 80013da:	d102      	bne.n	80013e2 <checkClutchValue+0x56>
		{
			clutch_value = 0;
 80013dc:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <checkClutchValue+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 80013e2:	2064      	movs	r0, #100	@ 0x64
 80013e4:	f000 fe74 	bl	80020d0 <HAL_Delay>
	}
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000088 	.word	0x20000088
 80013f0:	20000000 	.word	0x20000000

080013f4 <map_value>:
//    }
//}


static int32_t map_value(int32_t value, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	603b      	str	r3, [r7, #0]
    /* Ensure the input value is within the expected range */
    if (value < in_min)
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	da02      	bge.n	8001410 <map_value+0x1c>
    {
        value = in_min;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e005      	b.n	800141c <map_value+0x28>
    }
    else if (value > in_max)
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dd01      	ble.n	800141c <map_value+0x28>
    {
        value = in_max;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	60fb      	str	r3, [r7, #12]
    }

    /* Apply the linear transformation formula */
    int32_t mapped_value = (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	6a39      	ldr	r1, [r7, #32]
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	1a8a      	subs	r2, r1, r2
 8001428:	fb03 f202 	mul.w	r2, r3, r2
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1acb      	subs	r3, r1, r3
 8001432:	fb92 f3f3 	sdiv	r3, r2, r3
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
    return mapped_value;
 800143c:	697b      	ldr	r3, [r7, #20]
}
 800143e:	4618      	mov	r0, r3
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <setSteeringAngle>:

static void setSteeringAngle(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af02      	add	r7, sp, #8
	//Max steering left is the min because the left value of steering is 0
    int32_t steering_mapped_value = map_value((uart_rx_buffer[STEERING_IDX]), MIN_STEERING_VALUE, MAX_STEERING_VALUE, Max_Steering_Left + 80, Max_Steering_Right);
 8001452:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <setSteeringAngle+0xf8>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	4618      	mov	r0, r3
 8001458:	4b3b      	ldr	r3, [pc, #236]	@ (8001548 <setSteeringAngle+0xfc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8001460:	4b3a      	ldr	r3, [pc, #232]	@ (800154c <setSteeringAngle+0x100>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4613      	mov	r3, r2
 8001468:	22ff      	movs	r2, #255	@ 0xff
 800146a:	2100      	movs	r1, #0
 800146c:	f7ff ffc2 	bl	80013f4 <map_value>
 8001470:	6038      	str	r0, [r7, #0]
    int32_t currentEncoderValue = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001472:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <setSteeringAngle+0x104>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	b21b      	sxth	r3, r3
 8001478:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800147c:	607b      	str	r3, [r7, #4]


    if (currentEncoderValue < steering_mapped_value)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	da25      	bge.n	80014d2 <setSteeringAngle+0x86>
    {        /* Move left */
        while (currentEncoderValue < (steering_mapped_value - 5) && currentEncoderValue <= (Max_Steering_Left + 80))
 8001486:	e018      	b.n	80014ba <setSteeringAngle+0x6e>
        {
            HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_LEFT);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800148e:	4831      	ldr	r0, [pc, #196]	@ (8001554 <setSteeringAngle+0x108>)
 8001490:	f001 f8a8 	bl	80025e4 <HAL_GPIO_WritePin>
            sConfigOC[STEERING_MOTOR].Pulse = STEERING_MOTOR_SPEED;
 8001494:	4b30      	ldr	r3, [pc, #192]	@ (8001558 <setSteeringAngle+0x10c>)
 8001496:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800149a:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 800149c:	2208      	movs	r2, #8
 800149e:	492f      	ldr	r1, [pc, #188]	@ (800155c <setSteeringAngle+0x110>)
 80014a0:	482f      	ldr	r0, [pc, #188]	@ (8001560 <setSteeringAngle+0x114>)
 80014a2:	f002 f923 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014a6:	2108      	movs	r1, #8
 80014a8:	482d      	ldr	r0, [pc, #180]	@ (8001560 <setSteeringAngle+0x114>)
 80014aa:	f001 fe4b 	bl	8003144 <HAL_TIM_PWM_Start>
            currentEncoderValue = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 80014ae:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <setSteeringAngle+0x104>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014b8:	607b      	str	r3, [r7, #4]
        while (currentEncoderValue < (steering_mapped_value - 5) && currentEncoderValue <= (Max_Steering_Left + 80))
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	3b05      	subs	r3, #5
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	da2f      	bge.n	8001524 <setSteeringAngle+0xd8>
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <setSteeringAngle+0xfc>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3350      	adds	r3, #80	@ 0x50
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dddb      	ble.n	8001488 <setSteeringAngle+0x3c>
 80014d0:	e028      	b.n	8001524 <setSteeringAngle+0xd8>
        }
    }
    else if (currentEncoderValue > steering_mapped_value)
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dd24      	ble.n	8001524 <setSteeringAngle+0xd8>
    {
        /* Move right */
        while (currentEncoderValue > (steering_mapped_value + 5) && currentEncoderValue >= (Max_Steering_Right + 50))
 80014da:	e018      	b.n	800150e <setSteeringAngle+0xc2>
        {
            HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014e2:	481c      	ldr	r0, [pc, #112]	@ (8001554 <setSteeringAngle+0x108>)
 80014e4:	f001 f87e 	bl	80025e4 <HAL_GPIO_WritePin>
            sConfigOC[STEERING_MOTOR].Pulse = STEERING_MOTOR_SPEED;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <setSteeringAngle+0x10c>)
 80014ea:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80014ee:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 80014f0:	2208      	movs	r2, #8
 80014f2:	491a      	ldr	r1, [pc, #104]	@ (800155c <setSteeringAngle+0x110>)
 80014f4:	481a      	ldr	r0, [pc, #104]	@ (8001560 <setSteeringAngle+0x114>)
 80014f6:	f002 f8f9 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014fa:	2108      	movs	r1, #8
 80014fc:	4818      	ldr	r0, [pc, #96]	@ (8001560 <setSteeringAngle+0x114>)
 80014fe:	f001 fe21 	bl	8003144 <HAL_TIM_PWM_Start>
            currentEncoderValue = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <setSteeringAngle+0x104>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	b21b      	sxth	r3, r3
 8001508:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800150c:	607b      	str	r3, [r7, #4]
        while (currentEncoderValue > (steering_mapped_value + 5) && currentEncoderValue >= (Max_Steering_Right + 50))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3305      	adds	r3, #5
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dd05      	ble.n	8001524 <setSteeringAngle+0xd8>
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <setSteeringAngle+0x100>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3331      	adds	r3, #49	@ 0x31
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	dcdb      	bgt.n	80014dc <setSteeringAngle+0x90>
        }
    }

    // Stop the motor
    sConfigOC[STEERING_MOTOR].Pulse = 0;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <setSteeringAngle+0x10c>)
 8001526:	2200      	movs	r2, #0
 8001528:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 800152a:	2208      	movs	r2, #8
 800152c:	490b      	ldr	r1, [pc, #44]	@ (800155c <setSteeringAngle+0x110>)
 800152e:	480c      	ldr	r0, [pc, #48]	@ (8001560 <setSteeringAngle+0x114>)
 8001530:	f002 f8dc 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001534:	2108      	movs	r1, #8
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <setSteeringAngle+0x114>)
 8001538:	f001 fe04 	bl	8003144 <HAL_TIM_PWM_Start>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000088 	.word	0x20000088
 8001548:	200001dc 	.word	0x200001dc
 800154c:	200001d8 	.word	0x200001d8
 8001550:	40000400 	.word	0x40000400
 8001554:	40020400 	.word	0x40020400
 8001558:	20000094 	.word	0x20000094
 800155c:	200000cc 	.word	0x200000cc
 8001560:	200000ec 	.word	0x200000ec

08001564 <checkSteering>:

static void checkSteering(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	static uint8_t prev = 0;


	if(uart_rx_buffer[STEERING_IDX] >= STEERING_MAX_MID || uart_rx_buffer[STEERING_IDX] <= STEERING_MIN_MID)
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <checkSteering+0x4c>)
 800156a:	78db      	ldrb	r3, [r3, #3]
 800156c:	2b81      	cmp	r3, #129	@ 0x81
 800156e:	d803      	bhi.n	8001578 <checkSteering+0x14>
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <checkSteering+0x4c>)
 8001572:	78db      	ldrb	r3, [r3, #3]
 8001574:	2b7c      	cmp	r3, #124	@ 0x7c
 8001576:	d818      	bhi.n	80015aa <checkSteering+0x46>
	{
		if(uart_rx_buffer[STEERING_IDX] != prev)
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <checkSteering+0x4c>)
 800157a:	78da      	ldrb	r2, [r3, #3]
 800157c:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <checkSteering+0x50>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d006      	beq.n	8001592 <checkSteering+0x2e>
		{
			setSteeringAngle();
 8001584:	f7ff ff62 	bl	800144c <setSteeringAngle>
			prev = uart_rx_buffer[STEERING_IDX];
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <checkSteering+0x4c>)
 800158a:	78da      	ldrb	r2, [r3, #3]
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <checkSteering+0x50>)
 800158e:	701a      	strb	r2, [r3, #0]
		}


	}

}
 8001590:	e00b      	b.n	80015aa <checkSteering+0x46>
			sConfigOC[STEERING_MOTOR].Pulse = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <checkSteering+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC[STEERING_MOTOR], TIM_CHANNEL_3);
 8001598:	2208      	movs	r2, #8
 800159a:	4908      	ldr	r1, [pc, #32]	@ (80015bc <checkSteering+0x58>)
 800159c:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <checkSteering+0x5c>)
 800159e:	f002 f8a5 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80015a2:	2108      	movs	r1, #8
 80015a4:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <checkSteering+0x5c>)
 80015a6:	f001 fdcd 	bl	8003144 <HAL_TIM_PWM_Start>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000088 	.word	0x20000088
 80015b4:	200000ea 	.word	0x200000ea
 80015b8:	20000094 	.word	0x20000094
 80015bc:	200000cc 	.word	0x200000cc
 80015c0:	200000ec 	.word	0x200000ec

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c8:	f000 fd40 	bl	800204c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015cc:	f000 f852 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d0:	f000 f9d6 	bl	8001980 <MX_GPIO_Init>
  MX_TIM1_Init();
 80015d4:	f000 f8ae 	bl	8001734 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80015d8:	f000 f9a8 	bl	800192c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80015dc:	f000 f952 	bl	8001884 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  calibre_steering();
 80015e0:	f000 fa12 	bl	8001a08 <calibre_steering>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015e4:	f003 f8da 	bl	800479c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 1, &Semaphore1_attributes);
 80015e8:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <main+0x7c>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	2001      	movs	r0, #1
 80015ee:	f003 f9cc 	bl	800498a <osSemaphoreNew>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a13      	ldr	r2, [pc, #76]	@ (8001644 <main+0x80>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore2 */
  Semaphore2Handle = osSemaphoreNew(1, 0, &Semaphore2_attributes);
 80015f8:	4a13      	ldr	r2, [pc, #76]	@ (8001648 <main+0x84>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	2001      	movs	r0, #1
 80015fe:	f003 f9c4 	bl	800498a <osSemaphoreNew>
 8001602:	4603      	mov	r3, r0
 8001604:	4a11      	ldr	r2, [pc, #68]	@ (800164c <main+0x88>)
 8001606:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001608:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <main+0x8c>)
 800160a:	2100      	movs	r1, #0
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <main+0x90>)
 800160e:	f003 f90f 	bl	8004830 <osThreadNew>
 8001612:	4603      	mov	r3, r0
 8001614:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <main+0x94>)
 8001616:	6013      	str	r3, [r2, #0]

  /* creation of Communication_T */
  Communication_THandle = osThreadNew(Communication, NULL, &Communication_T_attributes);
 8001618:	4a10      	ldr	r2, [pc, #64]	@ (800165c <main+0x98>)
 800161a:	2100      	movs	r1, #0
 800161c:	4810      	ldr	r0, [pc, #64]	@ (8001660 <main+0x9c>)
 800161e:	f003 f907 	bl	8004830 <osThreadNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a0f      	ldr	r2, [pc, #60]	@ (8001664 <main+0xa0>)
 8001626:	6013      	str	r3, [r2, #0]

  /* creation of ControllingTask */
  ControllingTaskHandle = osThreadNew(Controlling, NULL, &ControllingTask_attributes);
 8001628:	4a0f      	ldr	r2, [pc, #60]	@ (8001668 <main+0xa4>)
 800162a:	2100      	movs	r1, #0
 800162c:	480f      	ldr	r0, [pc, #60]	@ (800166c <main+0xa8>)
 800162e:	f003 f8ff 	bl	8004830 <osThreadNew>
 8001632:	4603      	mov	r3, r0
 8001634:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <main+0xac>)
 8001636:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001638:	f003 f8d4 	bl	80047e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <main+0x78>
 8001640:	08007d3c 	.word	0x08007d3c
 8001644:	200001d0 	.word	0x200001d0
 8001648:	08007d4c 	.word	0x08007d4c
 800164c:	200001d4 	.word	0x200001d4
 8001650:	08007cd0 	.word	0x08007cd0
 8001654:	08001c25 	.word	0x08001c25
 8001658:	200001c4 	.word	0x200001c4
 800165c:	08007cf4 	.word	0x08007cf4
 8001660:	08000d69 	.word	0x08000d69
 8001664:	200001c8 	.word	0x200001c8
 8001668:	08007d18 	.word	0x08007d18
 800166c:	08001229 	.word	0x08001229
 8001670:	200001cc 	.word	0x200001cc

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b094      	sub	sp, #80	@ 0x50
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	2230      	movs	r2, #48	@ 0x30
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 f9f0 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b23      	ldr	r3, [pc, #140]	@ (800172c <SystemClock_Config+0xb8>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	4a22      	ldr	r2, [pc, #136]	@ (800172c <SystemClock_Config+0xb8>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <SystemClock_Config+0xb8>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <SystemClock_Config+0xbc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001730 <SystemClock_Config+0xbc>)
 80016c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <SystemClock_Config+0xbc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	2310      	movs	r3, #16
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 ff95 	bl	8002618 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80016f4:	f000 faad 	bl	8001c52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f001 f9f7 	bl	8002b08 <HAL_RCC_ClockConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001720:	f000 fa97 	bl	8001c52 <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	3750      	adds	r7, #80	@ 0x50
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b092      	sub	sp, #72	@ 0x48
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
 8001754:	615a      	str	r2, [r3, #20]
 8001756:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2220      	movs	r2, #32
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f006 f982 	bl	8007a68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001764:	4b45      	ldr	r3, [pc, #276]	@ (800187c <MX_TIM1_Init+0x148>)
 8001766:	4a46      	ldr	r2, [pc, #280]	@ (8001880 <MX_TIM1_Init+0x14c>)
 8001768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800176a:	4b44      	ldr	r3, [pc, #272]	@ (800187c <MX_TIM1_Init+0x148>)
 800176c:	2201      	movs	r2, #1
 800176e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b42      	ldr	r3, [pc, #264]	@ (800187c <MX_TIM1_Init+0x148>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001776:	4b41      	ldr	r3, [pc, #260]	@ (800187c <MX_TIM1_Init+0x148>)
 8001778:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800177c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <MX_TIM1_Init+0x148>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001784:	4b3d      	ldr	r3, [pc, #244]	@ (800187c <MX_TIM1_Init+0x148>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <MX_TIM1_Init+0x148>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001790:	483a      	ldr	r0, [pc, #232]	@ (800187c <MX_TIM1_Init+0x148>)
 8001792:	f001 fc87 	bl	80030a4 <HAL_TIM_PWM_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800179c:	f000 fa59 	bl	8001c52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017ac:	4619      	mov	r1, r3
 80017ae:	4833      	ldr	r0, [pc, #204]	@ (800187c <MX_TIM1_Init+0x148>)
 80017b0:	f002 fac4 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80017ba:	f000 fa4a 	bl	8001c52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017be:	2360      	movs	r3, #96	@ 0x60
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	4826      	ldr	r0, [pc, #152]	@ (800187c <MX_TIM1_Init+0x148>)
 80017e4:	f001 ff82 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80017ee:	f000 fa30 	bl	8001c52 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f6:	2204      	movs	r2, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4820      	ldr	r0, [pc, #128]	@ (800187c <MX_TIM1_Init+0x148>)
 80017fc:	f001 ff76 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001806:	f000 fa24 	bl	8001c52 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800180a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180e:	2208      	movs	r2, #8
 8001810:	4619      	mov	r1, r3
 8001812:	481a      	ldr	r0, [pc, #104]	@ (800187c <MX_TIM1_Init+0x148>)
 8001814:	f001 ff6a 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800181e:	f000 fa18 	bl	8001c52 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001826:	220c      	movs	r2, #12
 8001828:	4619      	mov	r1, r3
 800182a:	4814      	ldr	r0, [pc, #80]	@ (800187c <MX_TIM1_Init+0x148>)
 800182c:	f001 ff5e 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001836:	f000 fa0c 	bl	8001c52 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800184e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001852:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4807      	ldr	r0, [pc, #28]	@ (800187c <MX_TIM1_Init+0x148>)
 800185e:	f002 fadb 	bl	8003e18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001868:	f000 f9f3 	bl	8001c52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <MX_TIM1_Init+0x148>)
 800186e:	f000 fa8d 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001872:	bf00      	nop
 8001874:	3748      	adds	r7, #72	@ 0x48
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200000ec 	.word	0x200000ec
 8001880:	40010000 	.word	0x40010000

08001884 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	@ 0x30
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2224      	movs	r2, #36	@ 0x24
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f006 f8e8 	bl	8007a68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a0:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <MX_TIM3_Init+0xa0>)
 80018a2:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <MX_TIM3_Init+0xa4>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <MX_TIM3_Init+0xa0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <MX_TIM3_Init+0xa0>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <MX_TIM3_Init+0xa0>)
 80018b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_TIM3_Init+0xa0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <MX_TIM3_Init+0xa0>)
 80018c2:	2280      	movs	r2, #128	@ 0x80
 80018c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018c6:	2303      	movs	r3, #3
 80018c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ce:	2301      	movs	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018de:	2301      	movs	r3, #1
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80018e6:	230a      	movs	r3, #10
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <MX_TIM3_Init+0xa0>)
 80018f2:	f001 fcd7 	bl	80032a4 <HAL_TIM_Encoder_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f000 f9a9 	bl	8001c52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <MX_TIM3_Init+0xa0>)
 800190e:	f002 fa15 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001918:	f000 f99b 	bl	8001c52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3730      	adds	r7, #48	@ 0x30
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000134 	.word	0x20000134
 8001928:	40000400 	.word	0x40000400

0800192c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001932:	4a12      	ldr	r2, [pc, #72]	@ (800197c <MX_USART2_UART_Init+0x50>)
 8001934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001938:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800193c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	@ (8001978 <MX_USART2_UART_Init+0x4c>)
 8001964:	f002 fabe 	bl	8003ee4 <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800196e:	f000 f970 	bl	8001c52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000017c 	.word	0x2000017c
 800197c:	40004400 	.word	0x40004400

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <MX_GPIO_Init+0x80>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a18      	ldr	r2, [pc, #96]	@ (8001a00 <MX_GPIO_Init+0x80>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <MX_GPIO_Init+0x80>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <MX_GPIO_Init+0x80>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a11      	ldr	r2, [pc, #68]	@ (8001a00 <MX_GPIO_Init+0x80>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <MX_GPIO_Init+0x80>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80019d4:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <MX_GPIO_Init+0x84>)
 80019d6:	f000 fe05 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019da:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80019de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4619      	mov	r1, r3
 80019f2:	4804      	ldr	r0, [pc, #16]	@ (8001a04 <MX_GPIO_Init+0x84>)
 80019f4:	f000 fc72 	bl	80022dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020400 	.word	0x40020400

08001a08 <calibre_steering>:

/* USER CODE BEGIN 4 */
void calibre_steering(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	@ 0x30
 8001a0c:	af00      	add	r7, sp, #0
	int32_t current = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t prev = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t counter = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	TIM_OC_InitTypeDef sConfigOC;
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a1c:	213c      	movs	r1, #60	@ 0x3c
 8001a1e:	487b      	ldr	r0, [pc, #492]	@ (8001c0c <calibre_steering+0x204>)
 8001a20:	f001 fce6 	bl	80033f0 <HAL_TIM_Encoder_Start>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a24:	2360      	movs	r3, #96	@ 0x60
 8001a26:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2208      	movs	r2, #8
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4875      	ldr	r0, [pc, #468]	@ (8001c10 <calibre_steering+0x208>)
 8001a3c:	f001 fe56 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
	while(counter <= 3)
 8001a40:	e03a      	b.n	8001ab8 <calibre_steering+0xb0>
	{
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001a42:	4b74      	ldr	r3, [pc, #464]	@ (8001c14 <calibre_steering+0x20c>)
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prev = current;
 8001a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 8001a52:	2200      	movs	r2, #0
 8001a54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a58:	486f      	ldr	r0, [pc, #444]	@ (8001c18 <calibre_steering+0x210>)
 8001a5a:	f000 fdc3 	bl	80025e4 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 20000;
 8001a5e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001a62:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2208      	movs	r2, #8
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4869      	ldr	r0, [pc, #420]	@ (8001c10 <calibre_steering+0x208>)
 8001a6c:	f001 fe3e 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a70:	2108      	movs	r1, #8
 8001a72:	4867      	ldr	r0, [pc, #412]	@ (8001c10 <calibre_steering+0x208>)
 8001a74:	f001 fb66 	bl	8003144 <HAL_TIM_PWM_Start>
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001a78:	4b66      	ldr	r3, [pc, #408]	@ (8001c14 <calibre_steering+0x20c>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if( current == prev || current == prev+1 || current == prev-1)
 8001a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d009      	beq.n	8001aa0 <calibre_steering+0x98>
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	3301      	adds	r3, #1
 8001a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d004      	beq.n	8001aa0 <calibre_steering+0x98>
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d105      	bne.n	8001aac <calibre_steering+0xa4>
		{
			counter++;
 8001aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001aaa:	e002      	b.n	8001ab2 <calibre_steering+0xaa>
		}
		else
		{
			counter = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		HAL_Delay(200);
 8001ab2:	20c8      	movs	r0, #200	@ 0xc8
 8001ab4:	f000 fb0c 	bl	80020d0 <HAL_Delay>
	while(counter <= 3)
 8001ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d9c0      	bls.n	8001a42 <calibre_steering+0x3a>
	}
	sConfigOC.Pulse = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4851      	ldr	r0, [pc, #324]	@ (8001c10 <calibre_steering+0x208>)
 8001acc:	f001 fe0e 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	484f      	ldr	r0, [pc, #316]	@ (8001c10 <calibre_steering+0x208>)
 8001ad4:	f001 fb36 	bl	8003144 <HAL_TIM_PWM_Start>

	Max_Steering_Right = current;
 8001ad8:	4a50      	ldr	r2, [pc, #320]	@ (8001c1c <calibre_steering+0x214>)
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	6013      	str	r3, [r2, #0]

	HAL_Delay(500);
 8001ade:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ae2:	f000 faf5 	bl	80020d0 <HAL_Delay>

	counter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	while(counter <= 3)
 8001aec:	e03a      	b.n	8001b64 <calibre_steering+0x15c>
	{
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001aee:	4b49      	ldr	r3, [pc, #292]	@ (8001c14 <calibre_steering+0x20c>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prev = current;
 8001afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_LEFT);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b04:	4844      	ldr	r0, [pc, #272]	@ (8001c18 <calibre_steering+0x210>)
 8001b06:	f000 fd6d 	bl	80025e4 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 20000;
 8001b0a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001b0e:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2208      	movs	r2, #8
 8001b14:	4619      	mov	r1, r3
 8001b16:	483e      	ldr	r0, [pc, #248]	@ (8001c10 <calibre_steering+0x208>)
 8001b18:	f001 fde8 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	483c      	ldr	r0, [pc, #240]	@ (8001c10 <calibre_steering+0x208>)
 8001b20:	f001 fb10 	bl	8003144 <HAL_TIM_PWM_Start>
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001b24:	4b3b      	ldr	r3, [pc, #236]	@ (8001c14 <calibre_steering+0x20c>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if( current == prev || current == prev+1 || current == prev-1)
 8001b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d009      	beq.n	8001b4c <calibre_steering+0x144>
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d004      	beq.n	8001b4c <calibre_steering+0x144>
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	3b01      	subs	r3, #1
 8001b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d105      	bne.n	8001b58 <calibre_steering+0x150>
		{
			counter++;
 8001b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b50:	3301      	adds	r3, #1
 8001b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001b56:	e002      	b.n	8001b5e <calibre_steering+0x156>
		}
		else
		{
			counter = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		HAL_Delay(200);
 8001b5e:	20c8      	movs	r0, #200	@ 0xc8
 8001b60:	f000 fab6 	bl	80020d0 <HAL_Delay>
	while(counter <= 3)
 8001b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d9c0      	bls.n	8001aee <calibre_steering+0xe6>
	}
	sConfigOC.Pulse = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2208      	movs	r2, #8
 8001b74:	4619      	mov	r1, r3
 8001b76:	4826      	ldr	r0, [pc, #152]	@ (8001c10 <calibre_steering+0x208>)
 8001b78:	f001 fdb8 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	4824      	ldr	r0, [pc, #144]	@ (8001c10 <calibre_steering+0x208>)
 8001b80:	f001 fae0 	bl	8003144 <HAL_TIM_PWM_Start>

	Max_Steering_Left = current;
 8001b84:	4a26      	ldr	r2, [pc, #152]	@ (8001c20 <calibre_steering+0x218>)
 8001b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b88:	6013      	str	r3, [r2, #0]
	HAL_Delay(500);
 8001b8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b8e:	f000 fa9f 	bl	80020d0 <HAL_Delay>
//	HAL_Delay(500);
//	sConfigOC.Pulse = 0;
//	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

	int32_t middle = ((Max_Steering_Left + Max_Steering_Right) / 2);
 8001b92:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <calibre_steering+0x218>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <calibre_steering+0x214>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	0fda      	lsrs	r2, r3, #31
 8001b9e:	4413      	add	r3, r2
 8001ba0:	105b      	asrs	r3, r3, #1
 8001ba2:	623b      	str	r3, [r7, #32]
	while( current >= middle )
 8001ba4:	e01e      	b.n	8001be4 <calibre_steering+0x1dc>
	{
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <calibre_steering+0x20c>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_WritePin(GPIOB, STEERING_MOTOR_DIR_PIN, STEERING_RIGHT);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb8:	4817      	ldr	r0, [pc, #92]	@ (8001c18 <calibre_steering+0x210>)
 8001bba:	f000 fd13 	bl	80025e4 <HAL_GPIO_WritePin>
		sConfigOC.Pulse = 20000;
 8001bbe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001bc2:	60bb      	str	r3, [r7, #8]
		HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <calibre_steering+0x208>)
 8001bcc:	f001 fd8e 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bd0:	2108      	movs	r1, #8
 8001bd2:	480f      	ldr	r0, [pc, #60]	@ (8001c10 <calibre_steering+0x208>)
 8001bd4:	f001 fab6 	bl	8003144 <HAL_TIM_PWM_Start>
		current = ((int32_t)(int16_t)TIM3->CNT) + CORRECTIVE_VALUE;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <calibre_steering+0x20c>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while( current >= middle )
 8001be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dadc      	bge.n	8001ba6 <calibre_steering+0x19e>
	}
	sConfigOC.Pulse = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
	HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	@ (8001c10 <calibre_steering+0x208>)
 8001bf8:	f001 fd78 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <calibre_steering+0x208>)
 8001c00:	f001 faa0 	bl	8003144 <HAL_TIM_PWM_Start>
}
 8001c04:	bf00      	nop
 8001c06:	3730      	adds	r7, #48	@ 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000134 	.word	0x20000134
 8001c10:	200000ec 	.word	0x200000ec
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	200001d8 	.word	0x200001d8
 8001c20:	200001dc 	.word	0x200001dc

08001c24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f002 fe91 	bl	8004954 <osDelay>
 8001c32:	e7fb      	b.n	8001c2c <StartDefaultTask+0x8>

08001c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c44:	d101      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c46:	f000 fa23 	bl	8002090 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c56:	b672      	cpsid	i
}
 8001c58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <Error_Handler+0x8>
	...

08001c60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_MspInit+0x54>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	4a11      	ldr	r2, [pc, #68]	@ (8001cb4 <HAL_MspInit+0x54>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c76:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <HAL_MspInit+0x54>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_MspInit+0x54>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_MspInit+0x54>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_MspInit+0x54>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	f06f 0001 	mvn.w	r0, #1
 8001ca6:	f000 faef 	bl	8002288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_TIM_PWM_MspInit+0x40>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_TIM_PWM_MspInit+0x40>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <HAL_TIM_PWM_MspInit+0x40>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	@ 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <HAL_TIM_Encoder_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12b      	bne.n	8001d76 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d56:	23c0      	movs	r3, #192	@ 0xc0
 8001d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d66:	2302      	movs	r3, #2
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001d72:	f000 fab3 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3728      	adds	r7, #40	@ 0x28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <HAL_TIM_MspPostInit+0x68>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d11e      	bne.n	8001dec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_TIM_MspPostInit+0x6c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001dca:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001dce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_TIM_MspPostInit+0x70>)
 8001de8:	f000 fa78 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000

08001e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_UART_MspInit+0x84>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12b      	bne.n	8001e7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a10      	ldr	r2, [pc, #64]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e76:	f000 fa31 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	@ 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40004400 	.word	0x40004400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000

08001e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	@ 0x38
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	4b34      	ldr	r3, [pc, #208]	@ (8001f78 <HAL_InitTick+0xe8>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	4a33      	ldr	r2, [pc, #204]	@ (8001f78 <HAL_InitTick+0xe8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb0:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_InitTick+0xe8>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ebc:	f107 0210 	add.w	r2, r7, #16
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fffe 	bl	8002ec8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ed6:	f000 ffcf 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8001eda:	6378      	str	r0, [r7, #52]	@ 0x34
 8001edc:	e004      	b.n	8001ee8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ede:	f000 ffcb 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eea:	4a24      	ldr	r2, [pc, #144]	@ (8001f7c <HAL_InitTick+0xec>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	0c9b      	lsrs	r3, r3, #18
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001ef6:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001ef8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001efc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001f00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f04:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001f06:	4a1e      	ldr	r2, [pc, #120]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f1e:	4818      	ldr	r0, [pc, #96]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001f20:	f001 f804 	bl	8002f2c <HAL_TIM_Base_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d11b      	bne.n	8001f6a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001f32:	4813      	ldr	r0, [pc, #76]	@ (8001f80 <HAL_InitTick+0xf0>)
 8001f34:	f001 f854 	bl	8002fe0 <HAL_TIM_Base_Start_IT>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d111      	bne.n	8001f6a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f46:	201c      	movs	r0, #28
 8001f48:	f000 f9ba 	bl	80022c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	d808      	bhi.n	8001f64 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001f52:	2200      	movs	r2, #0
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	201c      	movs	r0, #28
 8001f58:	f000 f996 	bl	8002288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f5c:	4a09      	ldr	r2, [pc, #36]	@ (8001f84 <HAL_InitTick+0xf4>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e002      	b.n	8001f6a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3738      	adds	r7, #56	@ 0x38
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	200001e0 	.word	0x200001e0
 8001f84:	20000008 	.word	0x20000008

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <NMI_Handler+0x4>

08001f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <MemManage_Handler+0x4>

08001fa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <UsageFault_Handler+0x4>

08001fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <TIM2_IRQHandler+0x10>)
 8001fc6:	f001 faa1 	bl	800350c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200001e0 	.word	0x200001e0

08001fd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <SystemInit+0x20>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	4a05      	ldr	r2, [pc, #20]	@ (8001ff4 <SystemInit+0x20>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002030 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ffc:	f7ff ffea 	bl	8001fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002000:	480c      	ldr	r0, [pc, #48]	@ (8002034 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002002:	490d      	ldr	r1, [pc, #52]	@ (8002038 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002004:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002018:	4c0a      	ldr	r4, [pc, #40]	@ (8002044 <LoopFillZerobss+0x22>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f005 fd7d 	bl	8007b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7ff facb 	bl	80015c4 <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002030:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800203c:	08007d84 	.word	0x08007d84
  ldr r2, =_sbss
 8002040:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002044:	20004d54 	.word	0x20004d54

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>
	...

0800204c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002050:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <HAL_Init+0x40>)
 8002056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <HAL_Init+0x40>)
 8002062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002066:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_Init+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	@ (800208c <HAL_Init+0x40>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f000 f8fc 	bl	8002272 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	200f      	movs	r0, #15
 800207c:	f7ff ff08 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7ff fdee 	bl	8001c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023c00 	.word	0x40023c00

08002090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_IncTick+0x20>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x24>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <HAL_IncTick+0x24>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000000c 	.word	0x2000000c
 80020b4:	20000228 	.word	0x20000228

080020b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_GetTick+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000228 	.word	0x20000228

080020d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d005      	beq.n	80020f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <HAL_Delay+0x44>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020f6:	bf00      	nop
 80020f8:	f7ff ffde 	bl	80020b8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d8f7      	bhi.n	80020f8 <HAL_Delay+0x28>
  {
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000000c 	.word	0x2000000c

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	@ (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff4c 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229a:	f7ff ff61 	bl	8002160 <__NVIC_GetPriorityGrouping>
 800229e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f7ff ffb1 	bl	800220c <NVIC_EncodePriority>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff80 	bl	80021b8 <__NVIC_SetPriority>
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff54 	bl	800217c <__NVIC_EnableIRQ>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	@ 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e159      	b.n	80025ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f8:	2201      	movs	r2, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8148 	bne.w	80025a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d005      	beq.n	800232e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232a:	2b02      	cmp	r3, #2
 800232c:	d130      	bne.n	8002390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0201 	and.w	r2, r3, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b03      	cmp	r3, #3
 800239a:	d017      	beq.n	80023cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d123      	bne.n	8002420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a2 	beq.w	80025a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	4b57      	ldr	r3, [pc, #348]	@ (80025c4 <HAL_GPIO_Init+0x2e8>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	4a56      	ldr	r2, [pc, #344]	@ (80025c4 <HAL_GPIO_Init+0x2e8>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002470:	6453      	str	r3, [r2, #68]	@ 0x44
 8002472:	4b54      	ldr	r3, [pc, #336]	@ (80025c4 <HAL_GPIO_Init+0x2e8>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247e:	4a52      	ldr	r2, [pc, #328]	@ (80025c8 <HAL_GPIO_Init+0x2ec>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a49      	ldr	r2, [pc, #292]	@ (80025cc <HAL_GPIO_Init+0x2f0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <HAL_GPIO_Init+0x202>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a48      	ldr	r2, [pc, #288]	@ (80025d0 <HAL_GPIO_Init+0x2f4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_Init+0x1fe>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a47      	ldr	r2, [pc, #284]	@ (80025d4 <HAL_GPIO_Init+0x2f8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x1fa>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a46      	ldr	r2, [pc, #280]	@ (80025d8 <HAL_GPIO_Init+0x2fc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x1f6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a45      	ldr	r2, [pc, #276]	@ (80025dc <HAL_GPIO_Init+0x300>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x1f2>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024ce:	2307      	movs	r3, #7
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x204>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <HAL_GPIO_Init+0x2ec>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a2f      	ldr	r2, [pc, #188]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a24      	ldr	r2, [pc, #144]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b23      	ldr	r3, [pc, #140]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1a      	ldr	r2, [pc, #104]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a0f      	ldr	r2, [pc, #60]	@ (80025e0 <HAL_GPIO_Init+0x304>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f aea2 	bls.w	80022f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	@ 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40013c00 	.word	0x40013c00

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002600:	e003      	b.n	800260a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	619a      	str	r2, [r3, #24]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e267      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	4b88      	ldr	r3, [pc, #544]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4b85      	ldr	r3, [pc, #532]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b7e      	ldr	r3, [pc, #504]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e242      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x74>
 800267e:	4b76      	ldr	r3, [pc, #472]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a75      	ldr	r2, [pc, #468]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b70      	ldr	r3, [pc, #448]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6f      	ldr	r2, [pc, #444]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 80026b0:	4b69      	ldr	r3, [pc, #420]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a68      	ldr	r2, [pc, #416]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a65      	ldr	r2, [pc, #404]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff fcf2 	bl	80020b8 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff fcee 	bl	80020b8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	@ 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e207      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff fcde 	bl	80020b8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff fcda 	bl	80020b8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1f3      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b44      	ldr	r3, [pc, #272]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b41      	ldr	r3, [pc, #260]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c7      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4937      	ldr	r1, [pc, #220]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b34      	ldr	r3, [pc, #208]	@ (800285c <HAL_RCC_OscConfig+0x244>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7ff fc93 	bl	80020b8 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7ff fc8f 	bl	80020b8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a8      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b28      	ldr	r3, [pc, #160]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4925      	ldr	r1, [pc, #148]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_RCC_OscConfig+0x244>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7ff fc72 	bl	80020b8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7ff fc6e 	bl	80020b8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e187      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d036      	beq.n	8002870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x248>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7ff fc52 	bl	80020b8 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff fc4e 	bl	80020b8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e167      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_OscConfig+0x240>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
 8002836:	e01b      	b.n	8002870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <HAL_RCC_OscConfig+0x248>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7ff fc3b 	bl	80020b8 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e00e      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7ff fc37 	bl	80020b8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d907      	bls.n	8002864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e150      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ea      	bne.n	8002846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8097 	beq.w	80029ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b81      	ldr	r3, [pc, #516]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b7d      	ldr	r3, [pc, #500]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a7c      	ldr	r2, [pc, #496]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b7a      	ldr	r3, [pc, #488]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b77      	ldr	r3, [pc, #476]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b74      	ldr	r3, [pc, #464]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a73      	ldr	r2, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7ff fbf7 	bl	80020b8 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7ff fbf3 	bl	80020b8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e10c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <HAL_RCC_OscConfig+0x474>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x2ea>
 80028f4:	4b64      	ldr	r3, [pc, #400]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a63      	ldr	r2, [pc, #396]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x30c>
 800290a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290e:	4a5e      	ldr	r2, [pc, #376]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	@ 0x70
 8002916:	4b5c      	ldr	r3, [pc, #368]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x324>
 8002924:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	4a57      	ldr	r2, [pc, #348]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002930:	4b55      	ldr	r3, [pc, #340]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a54      	ldr	r2, [pc, #336]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002936:	f023 0304 	bic.w	r3, r3, #4
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002944:	f7ff fbb8 	bl	80020b8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294a:	e00a      	b.n	8002962 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294c:	f7ff fbb4 	bl	80020b8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0cb      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002962:	4b49      	ldr	r3, [pc, #292]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0ee      	beq.n	800294c <HAL_RCC_OscConfig+0x334>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002970:	f7ff fba2 	bl	80020b8 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7ff fb9e 	bl	80020b8 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0b5      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800298e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ee      	bne.n	8002978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	4a38      	ldr	r2, [pc, #224]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a1 	beq.w	8002af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029b6:	4b34      	ldr	r3, [pc, #208]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d05c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d141      	bne.n	8002a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7ff fb72 	bl	80020b8 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7ff fb6e 	bl	80020b8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e087      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ea:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	019b      	lsls	r3, r3, #6
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	491b      	ldr	r1, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7ff fb47 	bl	80020b8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7ff fb43 	bl	80020b8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e05c      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x416>
 8002a4c:	e054      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_RCC_OscConfig+0x478>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7ff fb30 	bl	80020b8 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7ff fb2c 	bl	80020b8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e045      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_RCC_OscConfig+0x470>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
 8002a7a:	e03d      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e038      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d121      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d111      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7ff fa5e 	bl	80020b8 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7ff fa5a 	bl	80020b8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f8ee 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08007d5c 	.word	0x08007d5c
 8002ccc:	20000004 	.word	0x20000004
 8002cd0:	20000008 	.word	0x20000008

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd8:	b090      	sub	sp, #64	@ 0x40
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b59      	ldr	r3, [pc, #356]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80a1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e09b      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b53      	ldr	r3, [pc, #332]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002d0c:	e09b      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b53      	ldr	r3, [pc, #332]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d12:	e098      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b4f      	ldr	r3, [pc, #316]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d028      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	2200      	movs	r2, #0
 8002d32:	623b      	str	r3, [r7, #32]
 8002d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4b47      	ldr	r3, [pc, #284]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d40:	fb03 f201 	mul.w	r2, r3, r1
 8002d44:	2300      	movs	r3, #0
 8002d46:	fb00 f303 	mul.w	r3, r0, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a43      	ldr	r2, [pc, #268]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d54:	460a      	mov	r2, r1
 8002d56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d60:	2200      	movs	r2, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	61fa      	str	r2, [r7, #28]
 8002d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d6e:	f7fd fe25 	bl	80009bc <__aeabi_uldivmod>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4613      	mov	r3, r2
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d7a:	e053      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b35      	ldr	r3, [pc, #212]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	617a      	str	r2, [r7, #20]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d8e:	f04f 0b00 	mov.w	fp, #0
 8002d92:	4652      	mov	r2, sl
 8002d94:	465b      	mov	r3, fp
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	ebb2 080a 	subs.w	r8, r2, sl
 8002dae:	eb63 090b 	sbc.w	r9, r3, fp
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dc6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dca:	eb63 0509 	sbc.w	r5, r3, r9
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	00eb      	lsls	r3, r5, #3
 8002dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ddc:	00e2      	lsls	r2, r4, #3
 8002dde:	4614      	mov	r4, r2
 8002de0:	461d      	mov	r5, r3
 8002de2:	eb14 030a 	adds.w	r3, r4, sl
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	eb45 030b 	adc.w	r3, r5, fp
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	028b      	lsls	r3, r1, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e04:	4621      	mov	r1, r4
 8002e06:	028a      	lsls	r2, r1, #10
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e18:	f7fd fdd0 	bl	80009bc <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3740      	adds	r7, #64	@ 0x40
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	017d7840 	.word	0x017d7840

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff0 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0a9b      	lsrs	r3, r3, #10
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08007d6c 	.word	0x08007d6c

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffdc 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0b5b      	lsrs	r3, r3, #13
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	@ (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08007d6c 	.word	0x08007d6c

08002ec8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ed8:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <HAL_RCC_GetClockConfig+0x60>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0207 	and.w	r2, r3, #7
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40023c00 	.word	0x40023c00

08002f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e041      	b.n	8002fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f839 	bl	8002fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f000 fca8 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d001      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e044      	b.n	8003082 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_TIM_Base_Start_IT+0xb0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d018      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003022:	d013      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1a      	ldr	r2, [pc, #104]	@ (8003094 <HAL_TIM_Base_Start_IT+0xb4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00e      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a19      	ldr	r2, [pc, #100]	@ (8003098 <HAL_TIM_Base_Start_IT+0xb8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a17      	ldr	r2, [pc, #92]	@ (800309c <HAL_TIM_Base_Start_IT+0xbc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_TIM_Base_Start_IT+0x6c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a16      	ldr	r2, [pc, #88]	@ (80030a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d111      	bne.n	8003070 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b06      	cmp	r3, #6
 800305c:	d010      	beq.n	8003080 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306e:	e007      	b.n	8003080 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40010000 	.word	0x40010000
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40000c00 	.word	0x40000c00
 80030a0:	40014000 	.word	0x40014000

080030a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e041      	b.n	800313a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe fdf4 	bl	8001cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f000 fbec 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_TIM_PWM_Start+0x24>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	bf14      	ite	ne
 8003160:	2301      	movne	r3, #1
 8003162:	2300      	moveq	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e022      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d109      	bne.n	8003182 <HAL_TIM_PWM_Start+0x3e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	e015      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x58>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e008      	b.n	80031ae <HAL_TIM_PWM_Start+0x6a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	bf14      	ite	ne
 80031a8:	2301      	movne	r3, #1
 80031aa:	2300      	moveq	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e068      	b.n	8003288 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0x82>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c4:	e013      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0x92>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031e4:	e003      	b.n	80031ee <HAL_TIM_PWM_Start+0xaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fd7a 	bl	8003cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d107      	bne.n	8003216 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003214:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <HAL_TIM_PWM_Start+0x14c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003228:	d013      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_TIM_PWM_Start+0x150>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00e      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_PWM_Start+0x154>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_TIM_PWM_Start+0x158>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_TIM_PWM_Start+0x10e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <HAL_TIM_PWM_Start+0x15c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b06      	cmp	r3, #6
 8003262:	d010      	beq.n	8003286 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e007      	b.n	8003286 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000

080032a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e097      	b.n	80033e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fe fd15 	bl	8001cfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032e8:	f023 0307 	bic.w	r3, r3, #7
 80032ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4610      	mov	r0, r2
 80032fa:	f000 fae1 	bl	80038c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	4313      	orrs	r3, r2
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003344:	f023 030c 	bic.w	r3, r3, #12
 8003348:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	4313      	orrs	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	011a      	lsls	r2, r3, #4
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	031b      	lsls	r3, r3, #12
 8003374:	4313      	orrs	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003382:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4313      	orrs	r3, r2
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003400:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003408:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003410:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003418:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d110      	bne.n	8003442 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003426:	7b7b      	ldrb	r3, [r7, #13]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d001      	beq.n	8003430 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e069      	b.n	8003504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003440:	e031      	b.n	80034a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d110      	bne.n	800346a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003448:	7bbb      	ldrb	r3, [r7, #14]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800344e:	7b3b      	ldrb	r3, [r7, #12]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d001      	beq.n	8003458 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e055      	b.n	8003504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003468:	e01d      	b.n	80034a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d108      	bne.n	8003482 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003476:	7b7b      	ldrb	r3, [r7, #13]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800347c:	7b3b      	ldrb	r3, [r7, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e03e      	b.n	8003504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_TIM_Encoder_Start+0xc4>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d008      	beq.n	80034c4 <HAL_TIM_Encoder_Start+0xd4>
 80034b2:	e00f      	b.n	80034d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2201      	movs	r2, #1
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fc17 	bl	8003cf0 <TIM_CCxChannelCmd>
      break;
 80034c2:	e016      	b.n	80034f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	2104      	movs	r1, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fc0f 	bl	8003cf0 <TIM_CCxChannelCmd>
      break;
 80034d2:	e00e      	b.n	80034f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fc07 	bl	8003cf0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2201      	movs	r2, #1
 80034e8:	2104      	movs	r1, #4
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fc00 	bl	8003cf0 <TIM_CCxChannelCmd>
      break;
 80034f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0202 	mvn.w	r2, #2
 8003540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f994 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f986 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f997 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0204 	mvn.w	r2, #4
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f96e 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f960 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f971 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0208 	mvn.w	r2, #8
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2204      	movs	r2, #4
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f948 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f93a 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f94b 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d020      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0210 	mvn.w	r2, #16
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2208      	movs	r2, #8
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f922 	bl	8003884 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f914 	bl	8003870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f925 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0201 	mvn.w	r2, #1
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe fade 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fc1a 	bl	8003ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8f6 	bl	80038ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0220 	mvn.w	r2, #32
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fbec 	bl	8003ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0ae      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	f200 809f 	bhi.w	8003858 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800371a:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003755 	.word	0x08003755
 8003724:	08003859 	.word	0x08003859
 8003728:	08003859 	.word	0x08003859
 800372c:	08003859 	.word	0x08003859
 8003730:	08003795 	.word	0x08003795
 8003734:	08003859 	.word	0x08003859
 8003738:	08003859 	.word	0x08003859
 800373c:	08003859 	.word	0x08003859
 8003740:	080037d7 	.word	0x080037d7
 8003744:	08003859 	.word	0x08003859
 8003748:	08003859 	.word	0x08003859
 800374c:	08003859 	.word	0x08003859
 8003750:	08003817 	.word	0x08003817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f93c 	bl	80039d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0208 	orr.w	r2, r2, #8
 800376e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	619a      	str	r2, [r3, #24]
      break;
 8003792:	e064      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f982 	bl	8003aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	021a      	lsls	r2, r3, #8
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	619a      	str	r2, [r3, #24]
      break;
 80037d4:	e043      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f9cd 	bl	8003b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0208 	orr.w	r2, r2, #8
 80037f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0204 	bic.w	r2, r2, #4
 8003800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	61da      	str	r2, [r3, #28]
      break;
 8003814:	e023      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fa17 	bl	8003c50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69d9      	ldr	r1, [r3, #28]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	021a      	lsls	r2, r3, #8
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	61da      	str	r2, [r3, #28]
      break;
 8003856:	e002      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
      break;
 800385c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3a      	ldr	r2, [pc, #232]	@ (80039bc <TIM_Base_SetConfig+0xfc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a37      	ldr	r2, [pc, #220]	@ (80039c0 <TIM_Base_SetConfig+0x100>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a36      	ldr	r2, [pc, #216]	@ (80039c4 <TIM_Base_SetConfig+0x104>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a35      	ldr	r2, [pc, #212]	@ (80039c8 <TIM_Base_SetConfig+0x108>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d108      	bne.n	800390a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2b      	ldr	r2, [pc, #172]	@ (80039bc <TIM_Base_SetConfig+0xfc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01b      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003918:	d017      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a28      	ldr	r2, [pc, #160]	@ (80039c0 <TIM_Base_SetConfig+0x100>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a27      	ldr	r2, [pc, #156]	@ (80039c4 <TIM_Base_SetConfig+0x104>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00f      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a26      	ldr	r2, [pc, #152]	@ (80039c8 <TIM_Base_SetConfig+0x108>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a25      	ldr	r2, [pc, #148]	@ (80039cc <TIM_Base_SetConfig+0x10c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a24      	ldr	r2, [pc, #144]	@ (80039d0 <TIM_Base_SetConfig+0x110>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a23      	ldr	r2, [pc, #140]	@ (80039d4 <TIM_Base_SetConfig+0x114>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0e      	ldr	r2, [pc, #56]	@ (80039bc <TIM_Base_SetConfig+0xfc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]
  }
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40010000 	.word	0x40010000
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000c00 	.word	0x40000c00
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800

080039d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f023 0201 	bic.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 0302 	bic.w	r3, r3, #2
 8003a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <TIM_OC1_SetConfig+0xc8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d10c      	bne.n	8003a4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0308 	bic.w	r3, r3, #8
 8003a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <TIM_OC1_SetConfig+0xc8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40010000 	.word	0x40010000

08003aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f023 0210 	bic.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <TIM_OC2_SetConfig+0xd4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10d      	bne.n	8003b20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <TIM_OC2_SetConfig+0xd4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d113      	bne.n	8003b50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000

08003b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c4c <TIM_OC3_SetConfig+0xd0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10d      	bne.n	8003bf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a14      	ldr	r2, [pc, #80]	@ (8003c4c <TIM_OC3_SetConfig+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d113      	bne.n	8003c26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40010000 	.word	0x40010000

08003c50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	031b      	lsls	r3, r3, #12
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a10      	ldr	r2, [pc, #64]	@ (8003cec <TIM_OC4_SetConfig+0x9c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d109      	bne.n	8003cc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	019b      	lsls	r3, r3, #6
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000

08003cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e050      	b.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1c      	ldr	r2, [pc, #112]	@ (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da0:	d013      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a18      	ldr	r2, [pc, #96]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a13      	ldr	r2, [pc, #76]	@ (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10c      	bne.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40014000 	.word	0x40014000

08003e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e03d      	b.n	8003eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e042      	b.n	8003f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd ff78 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	@ 0x24
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f97f 	bl	800422c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	@ 0x28
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	f040 8081 	bne.w	80040a8 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_UART_Receive+0x2e>
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e079      	b.n	80040aa <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2222      	movs	r2, #34	@ 0x22
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fca:	f7fe f875 	bl	80020b8 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe4:	d108      	bne.n	8003ff8 <HAL_UART_Receive+0x74>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	e003      	b.n	8004000 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004000:	e047      	b.n	8004092 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	2120      	movs	r1, #32
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f850 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e042      	b.n	80040aa <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10c      	bne.n	8004044 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	b29b      	uxth	r3, r3
 8004032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004036:	b29a      	uxth	r2, r3
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	3302      	adds	r3, #2
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e01f      	b.n	8004084 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404c:	d007      	beq.n	800405e <HAL_UART_Receive+0xda>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <HAL_UART_Receive+0xe8>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	e008      	b.n	800407e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004078:	b2da      	uxtb	r2, r3
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3301      	adds	r3, #1
 8004082:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1b2      	bne.n	8004002 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c2:	e03b      	b.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d037      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fd fff4 	bl	80020b8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e03a      	b.n	800415c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d023      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b80      	cmp	r3, #128	@ 0x80
 80040f8:	d020      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b40      	cmp	r3, #64	@ 0x40
 80040fe:	d01d      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b08      	cmp	r3, #8
 800410c:	d116      	bne.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f81d 	bl	8004164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2208      	movs	r2, #8
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e00f      	b.n	800415c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	429a      	cmp	r2, r3
 8004158:	d0b4      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b095      	sub	sp, #84	@ 0x54
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800418c:	643a      	str	r2, [r7, #64]	@ 0x40
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3314      	adds	r3, #20
 80041a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3314      	adds	r3, #20
 80041be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d119      	bne.n	8004210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fc:	61ba      	str	r2, [r7, #24]
 80041fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6979      	ldr	r1, [r7, #20]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	613b      	str	r3, [r7, #16]
   return(result);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e5      	bne.n	80041dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800421e:	bf00      	nop
 8004220:	3754      	adds	r7, #84	@ 0x54
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800422c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004230:	b0c0      	sub	sp, #256	@ 0x100
 8004232:	af00      	add	r7, sp, #0
 8004234:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	68d9      	ldr	r1, [r3, #12]
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	ea40 0301 	orr.w	r3, r0, r1
 8004254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	431a      	orrs	r2, r3
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	431a      	orrs	r2, r3
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004284:	f021 010c 	bic.w	r1, r1, #12
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004292:	430b      	orrs	r3, r1
 8004294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a6:	6999      	ldr	r1, [r3, #24]
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	ea40 0301 	orr.w	r3, r0, r1
 80042b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b8f      	ldr	r3, [pc, #572]	@ (80044f8 <UART_SetConfig+0x2cc>)
 80042bc:	429a      	cmp	r2, r3
 80042be:	d005      	beq.n	80042cc <UART_SetConfig+0xa0>
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b8d      	ldr	r3, [pc, #564]	@ (80044fc <UART_SetConfig+0x2d0>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d104      	bne.n	80042d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042cc:	f7fe fde8 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 80042d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042d4:	e003      	b.n	80042de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042d6:	f7fe fdcf 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 80042da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e8:	f040 810c 	bne.w	8004504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	1891      	adds	r1, r2, r2
 8004304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004306:	415b      	adcs	r3, r3
 8004308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800430a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800430e:	4621      	mov	r1, r4
 8004310:	eb12 0801 	adds.w	r8, r2, r1
 8004314:	4629      	mov	r1, r5
 8004316:	eb43 0901 	adc.w	r9, r3, r1
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800432a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800432e:	4690      	mov	r8, r2
 8004330:	4699      	mov	r9, r3
 8004332:	4623      	mov	r3, r4
 8004334:	eb18 0303 	adds.w	r3, r8, r3
 8004338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800433c:	462b      	mov	r3, r5
 800433e:	eb49 0303 	adc.w	r3, r9, r3
 8004342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800435a:	460b      	mov	r3, r1
 800435c:	18db      	adds	r3, r3, r3
 800435e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004360:	4613      	mov	r3, r2
 8004362:	eb42 0303 	adc.w	r3, r2, r3
 8004366:	657b      	str	r3, [r7, #84]	@ 0x54
 8004368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800436c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004370:	f7fc fb24 	bl	80009bc <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4b61      	ldr	r3, [pc, #388]	@ (8004500 <UART_SetConfig+0x2d4>)
 800437a:	fba3 2302 	umull	r2, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	011c      	lsls	r4, r3, #4
 8004382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004386:	2200      	movs	r2, #0
 8004388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800438c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	1891      	adds	r1, r2, r2
 800439a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800439c:	415b      	adcs	r3, r3
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043a4:	4641      	mov	r1, r8
 80043a6:	eb12 0a01 	adds.w	sl, r2, r1
 80043aa:	4649      	mov	r1, r9
 80043ac:	eb43 0b01 	adc.w	fp, r3, r1
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c4:	4692      	mov	sl, r2
 80043c6:	469b      	mov	fp, r3
 80043c8:	4643      	mov	r3, r8
 80043ca:	eb1a 0303 	adds.w	r3, sl, r3
 80043ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043d2:	464b      	mov	r3, r9
 80043d4:	eb4b 0303 	adc.w	r3, fp, r3
 80043d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043f0:	460b      	mov	r3, r1
 80043f2:	18db      	adds	r3, r3, r3
 80043f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f6:	4613      	mov	r3, r2
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004406:	f7fc fad9 	bl	80009bc <__aeabi_uldivmod>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4611      	mov	r1, r2
 8004410:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <UART_SetConfig+0x2d4>)
 8004412:	fba3 2301 	umull	r2, r3, r3, r1
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	2264      	movs	r2, #100	@ 0x64
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	1acb      	subs	r3, r1, r3
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004426:	4b36      	ldr	r3, [pc, #216]	@ (8004500 <UART_SetConfig+0x2d4>)
 8004428:	fba3 2302 	umull	r2, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004434:	441c      	add	r4, r3
 8004436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443a:	2200      	movs	r2, #0
 800443c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004448:	4642      	mov	r2, r8
 800444a:	464b      	mov	r3, r9
 800444c:	1891      	adds	r1, r2, r2
 800444e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004450:	415b      	adcs	r3, r3
 8004452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004458:	4641      	mov	r1, r8
 800445a:	1851      	adds	r1, r2, r1
 800445c:	6339      	str	r1, [r7, #48]	@ 0x30
 800445e:	4649      	mov	r1, r9
 8004460:	414b      	adcs	r3, r1
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004470:	4659      	mov	r1, fp
 8004472:	00cb      	lsls	r3, r1, #3
 8004474:	4651      	mov	r1, sl
 8004476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447a:	4651      	mov	r1, sl
 800447c:	00ca      	lsls	r2, r1, #3
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	4603      	mov	r3, r0
 8004484:	4642      	mov	r2, r8
 8004486:	189b      	adds	r3, r3, r2
 8004488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800448c:	464b      	mov	r3, r9
 800448e:	460a      	mov	r2, r1
 8004490:	eb42 0303 	adc.w	r3, r2, r3
 8004494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044ac:	460b      	mov	r3, r1
 80044ae:	18db      	adds	r3, r3, r3
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044b2:	4613      	mov	r3, r2
 80044b4:	eb42 0303 	adc.w	r3, r2, r3
 80044b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044c2:	f7fc fa7b 	bl	80009bc <__aeabi_uldivmod>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <UART_SetConfig+0x2d4>)
 80044cc:	fba3 1302 	umull	r1, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	2164      	movs	r1, #100	@ 0x64
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	3332      	adds	r3, #50	@ 0x32
 80044de:	4a08      	ldr	r2, [pc, #32]	@ (8004500 <UART_SetConfig+0x2d4>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	f003 0207 	and.w	r2, r3, #7
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4422      	add	r2, r4
 80044f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044f4:	e106      	b.n	8004704 <UART_SetConfig+0x4d8>
 80044f6:	bf00      	nop
 80044f8:	40011000 	.word	0x40011000
 80044fc:	40011400 	.word	0x40011400
 8004500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800450e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004516:	4642      	mov	r2, r8
 8004518:	464b      	mov	r3, r9
 800451a:	1891      	adds	r1, r2, r2
 800451c:	6239      	str	r1, [r7, #32]
 800451e:	415b      	adcs	r3, r3
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
 8004522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004526:	4641      	mov	r1, r8
 8004528:	1854      	adds	r4, r2, r1
 800452a:	4649      	mov	r1, r9
 800452c:	eb43 0501 	adc.w	r5, r3, r1
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	00eb      	lsls	r3, r5, #3
 800453a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800453e:	00e2      	lsls	r2, r4, #3
 8004540:	4614      	mov	r4, r2
 8004542:	461d      	mov	r5, r3
 8004544:	4643      	mov	r3, r8
 8004546:	18e3      	adds	r3, r4, r3
 8004548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800454c:	464b      	mov	r3, r9
 800454e:	eb45 0303 	adc.w	r3, r5, r3
 8004552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004572:	4629      	mov	r1, r5
 8004574:	008b      	lsls	r3, r1, #2
 8004576:	4621      	mov	r1, r4
 8004578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800457c:	4621      	mov	r1, r4
 800457e:	008a      	lsls	r2, r1, #2
 8004580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004584:	f7fc fa1a 	bl	80009bc <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4b60      	ldr	r3, [pc, #384]	@ (8004710 <UART_SetConfig+0x4e4>)
 800458e:	fba3 2302 	umull	r2, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	011c      	lsls	r4, r3, #4
 8004596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800459a:	2200      	movs	r2, #0
 800459c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045a8:	4642      	mov	r2, r8
 80045aa:	464b      	mov	r3, r9
 80045ac:	1891      	adds	r1, r2, r2
 80045ae:	61b9      	str	r1, [r7, #24]
 80045b0:	415b      	adcs	r3, r3
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b8:	4641      	mov	r1, r8
 80045ba:	1851      	adds	r1, r2, r1
 80045bc:	6139      	str	r1, [r7, #16]
 80045be:	4649      	mov	r1, r9
 80045c0:	414b      	adcs	r3, r1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d0:	4659      	mov	r1, fp
 80045d2:	00cb      	lsls	r3, r1, #3
 80045d4:	4651      	mov	r1, sl
 80045d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045da:	4651      	mov	r1, sl
 80045dc:	00ca      	lsls	r2, r1, #3
 80045de:	4610      	mov	r0, r2
 80045e0:	4619      	mov	r1, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	4642      	mov	r2, r8
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045ec:	464b      	mov	r3, r9
 80045ee:	460a      	mov	r2, r1
 80045f0:	eb42 0303 	adc.w	r3, r2, r3
 80045f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004610:	4649      	mov	r1, r9
 8004612:	008b      	lsls	r3, r1, #2
 8004614:	4641      	mov	r1, r8
 8004616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461a:	4641      	mov	r1, r8
 800461c:	008a      	lsls	r2, r1, #2
 800461e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004622:	f7fc f9cb 	bl	80009bc <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4611      	mov	r1, r2
 800462c:	4b38      	ldr	r3, [pc, #224]	@ (8004710 <UART_SetConfig+0x4e4>)
 800462e:	fba3 2301 	umull	r2, r3, r3, r1
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2264      	movs	r2, #100	@ 0x64
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	1acb      	subs	r3, r1, r3
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	3332      	adds	r3, #50	@ 0x32
 8004640:	4a33      	ldr	r2, [pc, #204]	@ (8004710 <UART_SetConfig+0x4e4>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800464c:	441c      	add	r4, r3
 800464e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004652:	2200      	movs	r2, #0
 8004654:	673b      	str	r3, [r7, #112]	@ 0x70
 8004656:	677a      	str	r2, [r7, #116]	@ 0x74
 8004658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800465c:	4642      	mov	r2, r8
 800465e:	464b      	mov	r3, r9
 8004660:	1891      	adds	r1, r2, r2
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	415b      	adcs	r3, r3
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800466c:	4641      	mov	r1, r8
 800466e:	1851      	adds	r1, r2, r1
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	4649      	mov	r1, r9
 8004674:	414b      	adcs	r3, r1
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004684:	4659      	mov	r1, fp
 8004686:	00cb      	lsls	r3, r1, #3
 8004688:	4651      	mov	r1, sl
 800468a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800468e:	4651      	mov	r1, sl
 8004690:	00ca      	lsls	r2, r1, #3
 8004692:	4610      	mov	r0, r2
 8004694:	4619      	mov	r1, r3
 8004696:	4603      	mov	r3, r0
 8004698:	4642      	mov	r2, r8
 800469a:	189b      	adds	r3, r3, r2
 800469c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800469e:	464b      	mov	r3, r9
 80046a0:	460a      	mov	r2, r1
 80046a2:	eb42 0303 	adc.w	r3, r2, r3
 80046a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80046b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046c0:	4649      	mov	r1, r9
 80046c2:	008b      	lsls	r3, r1, #2
 80046c4:	4641      	mov	r1, r8
 80046c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ca:	4641      	mov	r1, r8
 80046cc:	008a      	lsls	r2, r1, #2
 80046ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046d2:	f7fc f973 	bl	80009bc <__aeabi_uldivmod>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4b0d      	ldr	r3, [pc, #52]	@ (8004710 <UART_SetConfig+0x4e4>)
 80046dc:	fba3 1302 	umull	r1, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	2164      	movs	r1, #100	@ 0x64
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	3332      	adds	r3, #50	@ 0x32
 80046ee:	4a08      	ldr	r2, [pc, #32]	@ (8004710 <UART_SetConfig+0x4e4>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	f003 020f 	and.w	r2, r3, #15
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4422      	add	r2, r4
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800470a:	46bd      	mov	sp, r7
 800470c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004710:	51eb851f 	.word	0x51eb851f

08004714 <__NVIC_SetPriority>:
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	6039      	str	r1, [r7, #0]
 800471e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004724:	2b00      	cmp	r3, #0
 8004726:	db0a      	blt.n	800473e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	490c      	ldr	r1, [pc, #48]	@ (8004760 <__NVIC_SetPriority+0x4c>)
 800472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004732:	0112      	lsls	r2, r2, #4
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	440b      	add	r3, r1
 8004738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800473c:	e00a      	b.n	8004754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4908      	ldr	r1, [pc, #32]	@ (8004764 <__NVIC_SetPriority+0x50>)
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	3b04      	subs	r3, #4
 800474c:	0112      	lsls	r2, r2, #4
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	440b      	add	r3, r1
 8004752:	761a      	strb	r2, [r3, #24]
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000e100 	.word	0xe000e100
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <SysTick_Handler+0x1c>)
 800476e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004770:	f001 ffee 	bl	8006750 <xTaskGetSchedulerState>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800477a:	f002 fee5 	bl	8007548 <xPortSysTickHandler>
  }
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000e010 	.word	0xe000e010

08004788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800478c:	2100      	movs	r1, #0
 800478e:	f06f 0004 	mvn.w	r0, #4
 8004792:	f7ff ffbf 	bl	8004714 <__NVIC_SetPriority>
#endif
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a2:	f3ef 8305 	mrs	r3, IPSR
 80047a6:	603b      	str	r3, [r7, #0]
  return(result);
 80047a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80047ae:	f06f 0305 	mvn.w	r3, #5
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	e00c      	b.n	80047d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047b6:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <osKernelInitialize+0x44>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d105      	bne.n	80047ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047be:	4b08      	ldr	r3, [pc, #32]	@ (80047e0 <osKernelInitialize+0x44>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	e002      	b.n	80047d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80047d0:	687b      	ldr	r3, [r7, #4]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	2000022c 	.word	0x2000022c

080047e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ea:	f3ef 8305 	mrs	r3, IPSR
 80047ee:	603b      	str	r3, [r7, #0]
  return(result);
 80047f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80047f6:	f06f 0305 	mvn.w	r3, #5
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	e010      	b.n	8004820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80047fe:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <osKernelStart+0x48>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d109      	bne.n	800481a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004806:	f7ff ffbf 	bl	8004788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800480a:	4b08      	ldr	r3, [pc, #32]	@ (800482c <osKernelStart+0x48>)
 800480c:	2202      	movs	r2, #2
 800480e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004810:	f001 fb3a 	bl	8005e88 <vTaskStartScheduler>
      stat = osOK;
 8004814:	2300      	movs	r3, #0
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	e002      	b.n	8004820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004820:	687b      	ldr	r3, [r7, #4]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	2000022c 	.word	0x2000022c

08004830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	@ 0x38
 8004834:	af04      	add	r7, sp, #16
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004840:	f3ef 8305 	mrs	r3, IPSR
 8004844:	617b      	str	r3, [r7, #20]
  return(result);
 8004846:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004848:	2b00      	cmp	r3, #0
 800484a:	d17e      	bne.n	800494a <osThreadNew+0x11a>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d07b      	beq.n	800494a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004852:	2380      	movs	r3, #128	@ 0x80
 8004854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004856:	2318      	movs	r3, #24
 8004858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800485e:	f04f 33ff 	mov.w	r3, #4294967295
 8004862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d045      	beq.n	80048f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <osThreadNew+0x48>
        name = attr->name;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <osThreadNew+0x6e>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b38      	cmp	r3, #56	@ 0x38
 8004890:	d805      	bhi.n	800489e <osThreadNew+0x6e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <osThreadNew+0x72>
        return (NULL);
 800489e:	2300      	movs	r3, #0
 80048a0:	e054      	b.n	800494c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00e      	beq.n	80048d8 <osThreadNew+0xa8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	2ba7      	cmp	r3, #167	@ 0xa7
 80048c0:	d90a      	bls.n	80048d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d006      	beq.n	80048d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <osThreadNew+0xa8>
        mem = 1;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	e010      	b.n	80048fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10c      	bne.n	80048fa <osThreadNew+0xca>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d108      	bne.n	80048fa <osThreadNew+0xca>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <osThreadNew+0xca>
          mem = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e001      	b.n	80048fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d110      	bne.n	8004922 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004908:	9202      	str	r2, [sp, #8]
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6a3a      	ldr	r2, [r7, #32]
 8004914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f001 f8c2 	bl	8005aa0 <xTaskCreateStatic>
 800491c:	4603      	mov	r3, r0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	e013      	b.n	800494a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d110      	bne.n	800494a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	b29a      	uxth	r2, r3
 800492c:	f107 0310 	add.w	r3, r7, #16
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f001 f910 	bl	8005b60 <xTaskCreate>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d001      	beq.n	800494a <osThreadNew+0x11a>
            hTask = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800494a:	693b      	ldr	r3, [r7, #16]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3728      	adds	r7, #40	@ 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800495c:	f3ef 8305 	mrs	r3, IPSR
 8004960:	60bb      	str	r3, [r7, #8]
  return(result);
 8004962:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <osDelay+0x1c>
    stat = osErrorISR;
 8004968:	f06f 0305 	mvn.w	r3, #5
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	e007      	b.n	8004980 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <osDelay+0x2c>
      vTaskDelay(ticks);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f001 fa4e 	bl	8005e1c <vTaskDelay>
    }
  }

  return (stat);
 8004980:	68fb      	ldr	r3, [r7, #12]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800498a:	b580      	push	{r7, lr}
 800498c:	b08a      	sub	sp, #40	@ 0x28
 800498e:	af02      	add	r7, sp, #8
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800499a:	f3ef 8305 	mrs	r3, IPSR
 800499e:	613b      	str	r3, [r7, #16]
  return(result);
 80049a0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d175      	bne.n	8004a92 <osSemaphoreNew+0x108>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d072      	beq.n	8004a92 <osSemaphoreNew+0x108>
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d86e      	bhi.n	8004a92 <osSemaphoreNew+0x108>
    mem = -1;
 80049b4:	f04f 33ff 	mov.w	r3, #4294967295
 80049b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d015      	beq.n	80049ec <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d006      	beq.n	80049d6 <osSemaphoreNew+0x4c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80049ce:	d902      	bls.n	80049d6 <osSemaphoreNew+0x4c>
        mem = 1;
 80049d0:	2301      	movs	r3, #1
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	e00c      	b.n	80049f0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <osSemaphoreNew+0x66>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <osSemaphoreNew+0x66>
          mem = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e001      	b.n	80049f0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d04c      	beq.n	8004a92 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d128      	bne.n	8004a50 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10a      	bne.n	8004a1a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	9200      	str	r2, [sp, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2001      	movs	r0, #1
 8004a12:	f000 f995 	bl	8004d40 <xQueueGenericCreateStatic>
 8004a16:	61f8      	str	r0, [r7, #28]
 8004a18:	e005      	b.n	8004a26 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2001      	movs	r0, #1
 8004a20:	f000 fa0b 	bl	8004e3a <xQueueGenericCreate>
 8004a24:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d022      	beq.n	8004a72 <osSemaphoreNew+0xe8>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01f      	beq.n	8004a72 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a32:	2300      	movs	r3, #0
 8004a34:	2200      	movs	r2, #0
 8004a36:	2100      	movs	r1, #0
 8004a38:	69f8      	ldr	r0, [r7, #28]
 8004a3a:	f000 facb 	bl	8004fd4 <xQueueGenericSend>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d016      	beq.n	8004a72 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004a44:	69f8      	ldr	r0, [r7, #28]
 8004a46:	f000 fe57 	bl	80056f8 <vQueueDelete>
            hSemaphore = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	e010      	b.n	8004a72 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d108      	bne.n	8004a68 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fa49 	bl	8004ef6 <xQueueCreateCountingSemaphoreStatic>
 8004a64:	61f8      	str	r0, [r7, #28]
 8004a66:	e004      	b.n	8004a72 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 fa7c 	bl	8004f68 <xQueueCreateCountingSemaphore>
 8004a70:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00c      	beq.n	8004a92 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e001      	b.n	8004a8a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a8a:	6979      	ldr	r1, [r7, #20]
 8004a8c:	69f8      	ldr	r0, [r7, #28]
 8004a8e:	f000 ff7f 	bl	8005990 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a92:	69fb      	ldr	r3, [r7, #28]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a07      	ldr	r2, [pc, #28]	@ (8004ac8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004aac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4a06      	ldr	r2, [pc, #24]	@ (8004acc <vApplicationGetIdleTaskMemory+0x30>)
 8004ab2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2280      	movs	r2, #128	@ 0x80
 8004ab8:	601a      	str	r2, [r3, #0]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000230 	.word	0x20000230
 8004acc:	200002d8 	.word	0x200002d8

08004ad0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a07      	ldr	r2, [pc, #28]	@ (8004afc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ae0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a06      	ldr	r2, [pc, #24]	@ (8004b00 <vApplicationGetTimerTaskMemory+0x30>)
 8004ae6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004aee:	601a      	str	r2, [r3, #0]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	200004d8 	.word	0x200004d8
 8004b00:	20000580 	.word	0x20000580

08004b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f103 0208 	add.w	r2, r3, #8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295
 8004b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f103 0208 	add.w	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f103 0208 	add.w	r2, r3, #8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	601a      	str	r2, [r3, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d103      	bne.n	8004bc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e00c      	b.n	8004be0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e002      	b.n	8004bd4 <vListInsert+0x2e>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d2f6      	bcs.n	8004bce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	601a      	str	r2, [r3, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6892      	ldr	r2, [r2, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6852      	ldr	r2, [r2, #4]
 8004c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d103      	bne.n	8004c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	1e5a      	subs	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c98:	f002 fbc6 	bl	8007428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca4:	68f9      	ldr	r1, [r7, #12]
 8004ca6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	441a      	add	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	441a      	add	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	22ff      	movs	r2, #255	@ 0xff
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	22ff      	movs	r2, #255	@ 0xff
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d114      	bne.n	8004d18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01a      	beq.n	8004d2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fb62 	bl	80063c4 <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <xQueueGenericReset+0xd0>)
 8004d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	e009      	b.n	8004d2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3310      	adds	r3, #16
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fef1 	bl	8004b04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3324      	adds	r3, #36	@ 0x24
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff feec 	bl	8004b04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d2c:	f002 fbae 	bl	800748c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d30:	2301      	movs	r3, #1
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	@ 0x38
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10b      	bne.n	8004d8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <xQueueGenericCreateStatic+0x56>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <xQueueGenericCreateStatic+0x5a>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <xQueueGenericCreateStatic+0x5c>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10b      	bne.n	8004db8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	623b      	str	r3, [r7, #32]
}
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <xQueueGenericCreateStatic+0x84>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <xQueueGenericCreateStatic+0x88>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <xQueueGenericCreateStatic+0x8a>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	61fb      	str	r3, [r7, #28]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004de6:	2350      	movs	r3, #80	@ 0x50
 8004de8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b50      	cmp	r3, #80	@ 0x50
 8004dee:	d00b      	beq.n	8004e08 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	61bb      	str	r3, [r7, #24]
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e1c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f840 	bl	8004eb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3730      	adds	r7, #48	@ 0x30
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b08a      	sub	sp, #40	@ 0x28
 8004e3e:	af02      	add	r7, sp, #8
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	613b      	str	r3, [r7, #16]
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	e7fd      	b.n	8004e62 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	3350      	adds	r3, #80	@ 0x50
 8004e74:	4618      	mov	r0, r3
 8004e76:	f002 fbf9 	bl	800766c <pvPortMalloc>
 8004e7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d011      	beq.n	8004ea6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	3350      	adds	r3, #80	@ 0x50
 8004e8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e94:	79fa      	ldrb	r2, [r7, #7]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f000 f805 	bl	8004eb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e002      	b.n	8004ed2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ede:	2101      	movs	r1, #1
 8004ee0:	69b8      	ldr	r0, [r7, #24]
 8004ee2:	f7ff fec3 	bl	8004c6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	78fa      	ldrb	r2, [r7, #3]
 8004eea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b08a      	sub	sp, #40	@ 0x28
 8004efa:	af02      	add	r7, sp, #8
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	61bb      	str	r3, [r7, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d90b      	bls.n	8004f40 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	617b      	str	r3, [r7, #20]
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f40:	2302      	movs	r3, #2
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff fef8 	bl	8004d40 <xQueueGenericCreateStatic>
 8004f50:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
	}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	613b      	str	r3, [r7, #16]
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d90b      	bls.n	8004fb0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff40 	bl	8004e3a <xQueueGenericCreate>
 8004fba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fc8:	697b      	ldr	r3, [r7, #20]
	}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08e      	sub	sp, #56	@ 0x38
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <xQueueGenericSend+0x34>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <xQueueGenericSend+0x42>
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <xQueueGenericSend+0x46>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <xQueueGenericSend+0x48>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <xQueueGenericSend+0x64>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d103      	bne.n	8005046 <xQueueGenericSend+0x72>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <xQueueGenericSend+0x76>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueGenericSend+0x78>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xQueueGenericSend+0x94>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	623b      	str	r3, [r7, #32]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005068:	f001 fb72 	bl	8006750 <xTaskGetSchedulerState>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d102      	bne.n	8005078 <xQueueGenericSend+0xa4>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <xQueueGenericSend+0xa8>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <xQueueGenericSend+0xaa>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <xQueueGenericSend+0xc6>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	61fb      	str	r3, [r7, #28]
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800509a:	f002 f9c5 	bl	8007428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d302      	bcc.n	80050b0 <xQueueGenericSend+0xdc>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d129      	bne.n	8005104 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050b6:	f000 fb5b 	bl	8005770 <prvCopyDataToQueue>
 80050ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d010      	beq.n	80050e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	3324      	adds	r3, #36	@ 0x24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 f97b 	bl	80063c4 <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050d4:	4b3f      	ldr	r3, [pc, #252]	@ (80051d4 <xQueueGenericSend+0x200>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	e00a      	b.n	80050fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050ec:	4b39      	ldr	r3, [pc, #228]	@ (80051d4 <xQueueGenericSend+0x200>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050fc:	f002 f9c6 	bl	800748c <vPortExitCritical>
				return pdPASS;
 8005100:	2301      	movs	r3, #1
 8005102:	e063      	b.n	80051cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800510a:	f002 f9bf 	bl	800748c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800510e:	2300      	movs	r3, #0
 8005110:	e05c      	b.n	80051cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	4618      	mov	r0, r3
 800511e:	f001 f9b5 	bl	800648c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005122:	2301      	movs	r3, #1
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005126:	f002 f9b1 	bl	800748c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800512a:	f000 ff1d 	bl	8005f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800512e:	f002 f97b 	bl	8007428 <vPortEnterCritical>
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005138:	b25b      	sxtb	r3, r3
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d103      	bne.n	8005148 <xQueueGenericSend+0x174>
 8005140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800514e:	b25b      	sxtb	r3, r3
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d103      	bne.n	800515e <xQueueGenericSend+0x18a>
 8005156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800515e:	f002 f995 	bl	800748c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005162:	1d3a      	adds	r2, r7, #4
 8005164:	f107 0314 	add.w	r3, r7, #20
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f9a4 	bl	80064b8 <xTaskCheckForTimeOut>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d124      	bne.n	80051c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005176:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005178:	f000 fbf2 	bl	8005960 <prvIsQueueFull>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d018      	beq.n	80051b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005184:	3310      	adds	r3, #16
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f8c8 	bl	8006320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005192:	f000 fb7d 	bl	8005890 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005196:	f000 fef5 	bl	8005f84 <xTaskResumeAll>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f af7c 	bne.w	800509a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80051a2:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <xQueueGenericSend+0x200>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	e772      	b.n	800509a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b6:	f000 fb6b 	bl	8005890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ba:	f000 fee3 	bl	8005f84 <xTaskResumeAll>
 80051be:	e76c      	b.n	800509a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051c2:	f000 fb65 	bl	8005890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051c6:	f000 fedd 	bl	8005f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3738      	adds	r7, #56	@ 0x38
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b090      	sub	sp, #64	@ 0x40
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <xQueueGenericSendFromISR+0x3e>
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <xQueueGenericSendFromISR+0x42>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericSendFromISR+0x44>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d103      	bne.n	8005246 <xQueueGenericSendFromISR+0x6e>
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <xQueueGenericSendFromISR+0x72>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueGenericSendFromISR+0x74>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	623b      	str	r3, [r7, #32]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005268:	f002 f9be 	bl	80075e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800526c:	f3ef 8211 	mrs	r2, BASEPRI
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61fa      	str	r2, [r7, #28]
 8005282:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005284:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005286:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800528c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <xQueueGenericSendFromISR+0xc2>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d12f      	bne.n	80052fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052b0:	f000 fa5e 	bl	8005770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d112      	bne.n	80052e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c8:	3324      	adds	r3, #36	@ 0x24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 f87a 	bl	80063c4 <xTaskRemoveFromEventList>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00e      	beq.n	80052f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00b      	beq.n	80052f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e007      	b.n	80052f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052e8:	3301      	adds	r3, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	b25a      	sxtb	r2, r3
 80052ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052f4:	2301      	movs	r3, #1
 80052f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052f8:	e001      	b.n	80052fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005300:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005308:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800530a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800530c:	4618      	mov	r0, r3
 800530e:	3740      	adds	r7, #64	@ 0x40
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	@ 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <xQueueReceive+0x32>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	623b      	str	r3, [r7, #32]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d103      	bne.n	8005354 <xQueueReceive+0x40>
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <xQueueReceive+0x44>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <xQueueReceive+0x46>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <xQueueReceive+0x62>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	61fb      	str	r3, [r7, #28]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005376:	f001 f9eb 	bl	8006750 <xTaskGetSchedulerState>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <xQueueReceive+0x72>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <xQueueReceive+0x76>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <xQueueReceive+0x78>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <xQueueReceive+0x94>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	61bb      	str	r3, [r7, #24]
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053a8:	f002 f83e 	bl	8007428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01f      	beq.n	80053f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053bc:	f000 fa42 	bl	8005844 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	1e5a      	subs	r2, r3, #1
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00f      	beq.n	80053f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	3310      	adds	r3, #16
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fff5 	bl	80063c4 <xTaskRemoveFromEventList>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053e0:	4b3c      	ldr	r3, [pc, #240]	@ (80054d4 <xQueueReceive+0x1c0>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053f0:	f002 f84c 	bl	800748c <vPortExitCritical>
				return pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e069      	b.n	80054cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053fe:	f002 f845 	bl	800748c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005402:	2300      	movs	r3, #0
 8005404:	e062      	b.n	80054cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800540c:	f107 0310 	add.w	r3, r7, #16
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f83b 	bl	800648c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005416:	2301      	movs	r3, #1
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800541a:	f002 f837 	bl	800748c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800541e:	f000 fda3 	bl	8005f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005422:	f002 f801 	bl	8007428 <vPortEnterCritical>
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800542c:	b25b      	sxtb	r3, r3
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d103      	bne.n	800543c <xQueueReceive+0x128>
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005442:	b25b      	sxtb	r3, r3
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d103      	bne.n	8005452 <xQueueReceive+0x13e>
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005452:	f002 f81b 	bl	800748c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005456:	1d3a      	adds	r2, r7, #4
 8005458:	f107 0310 	add.w	r3, r7, #16
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f001 f82a 	bl	80064b8 <xTaskCheckForTimeOut>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d123      	bne.n	80054b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800546a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800546c:	f000 fa62 	bl	8005934 <prvIsQueueEmpty>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d017      	beq.n	80054a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	3324      	adds	r3, #36	@ 0x24
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4611      	mov	r1, r2
 800547e:	4618      	mov	r0, r3
 8005480:	f000 ff4e 	bl	8006320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005486:	f000 fa03 	bl	8005890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800548a:	f000 fd7b 	bl	8005f84 <xTaskResumeAll>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d189      	bne.n	80053a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005494:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <xQueueReceive+0x1c0>)
 8005496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	e780      	b.n	80053a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054a8:	f000 f9f2 	bl	8005890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054ac:	f000 fd6a 	bl	8005f84 <xTaskResumeAll>
 80054b0:	e77a      	b.n	80053a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054b4:	f000 f9ec 	bl	8005890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054b8:	f000 fd64 	bl	8005f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054be:	f000 fa39 	bl	8005934 <prvIsQueueEmpty>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f43f af6f 	beq.w	80053a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3730      	adds	r7, #48	@ 0x30
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08e      	sub	sp, #56	@ 0x38
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <xQueueSemaphoreTake+0x34>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	623b      	str	r3, [r7, #32]
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	61fb      	str	r3, [r7, #28]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800552c:	f001 f910 	bl	8006750 <xTaskGetSchedulerState>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <xQueueSemaphoreTake+0x64>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <xQueueSemaphoreTake+0x68>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <xQueueSemaphoreTake+0x6a>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	61bb      	str	r3, [r7, #24]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800555e:	f001 ff63 	bl	8007428 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d024      	beq.n	80055b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	1e5a      	subs	r2, r3, #1
 8005572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005574:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800557e:	f001 fa61 	bl	8006a44 <pvTaskIncrementMutexHeldCount>
 8005582:	4602      	mov	r2, r0
 8005584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005586:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00f      	beq.n	80055b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005592:	3310      	adds	r3, #16
 8005594:	4618      	mov	r0, r3
 8005596:	f000 ff15 	bl	80063c4 <xTaskRemoveFromEventList>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055a0:	4b54      	ldr	r3, [pc, #336]	@ (80056f4 <xQueueSemaphoreTake+0x21c>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055b0:	f001 ff6c 	bl	800748c <vPortExitCritical>
				return pdPASS;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e098      	b.n	80056ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d112      	bne.n	80055e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	617b      	str	r3, [r7, #20]
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80055dc:	f001 ff56 	bl	800748c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e082      	b.n	80056ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055ea:	f107 030c 	add.w	r3, r7, #12
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 ff4c 	bl	800648c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f4:	2301      	movs	r3, #1
 80055f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f8:	f001 ff48 	bl	800748c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055fc:	f000 fcb4 	bl	8005f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005600:	f001 ff12 	bl	8007428 <vPortEnterCritical>
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005606:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800560a:	b25b      	sxtb	r3, r3
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d103      	bne.n	800561a <xQueueSemaphoreTake+0x142>
 8005612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800561a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005620:	b25b      	sxtb	r3, r3
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d103      	bne.n	8005630 <xQueueSemaphoreTake+0x158>
 8005628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005630:	f001 ff2c 	bl	800748c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005634:	463a      	mov	r2, r7
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f000 ff3b 	bl	80064b8 <xTaskCheckForTimeOut>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d132      	bne.n	80056ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005648:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800564a:	f000 f973 	bl	8005934 <prvIsQueueEmpty>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d026      	beq.n	80056a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800565c:	f001 fee4 	bl	8007428 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f891 	bl	800678c <xTaskPriorityInherit>
 800566a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800566c:	f001 ff0e 	bl	800748c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	3324      	adds	r3, #36	@ 0x24
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fe51 	bl	8006320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800567e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005680:	f000 f906 	bl	8005890 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005684:	f000 fc7e 	bl	8005f84 <xTaskResumeAll>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	f47f af67 	bne.w	800555e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005690:	4b18      	ldr	r3, [pc, #96]	@ (80056f4 <xQueueSemaphoreTake+0x21c>)
 8005692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	e75d      	b.n	800555e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80056a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056a4:	f000 f8f4 	bl	8005890 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056a8:	f000 fc6c 	bl	8005f84 <xTaskResumeAll>
 80056ac:	e757      	b.n	800555e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80056ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056b0:	f000 f8ee 	bl	8005890 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056b4:	f000 fc66 	bl	8005f84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056ba:	f000 f93b 	bl	8005934 <prvIsQueueEmpty>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f43f af4c 	beq.w	800555e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00d      	beq.n	80056e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80056cc:	f001 feac 	bl	8007428 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80056d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056d2:	f000 f835 	bl	8005740 <prvGetDisinheritPriorityAfterTimeout>
 80056d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80056d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 f92c 	bl	800693c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80056e4:	f001 fed2 	bl	800748c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3738      	adds	r7, #56	@ 0x38
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	e000ed04 	.word	0xe000ed04

080056f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <vQueueDelete+0x2a>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60bb      	str	r3, [r7, #8]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f95e 	bl	80059e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800572e:	2b00      	cmp	r3, #0
 8005730:	d102      	bne.n	8005738 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f002 f868 	bl	8007808 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	d006      	beq.n	800575e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	e001      	b.n	8005762 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005762:	68fb      	ldr	r3, [r7, #12]
	}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10d      	bne.n	80057aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d14d      	bne.n	8005832 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f001 f85e 	bl	800685c <xTaskPriorityDisinherit>
 80057a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	e043      	b.n	8005832 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d119      	bne.n	80057e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6858      	ldr	r0, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b8:	461a      	mov	r2, r3
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	f002 f9d8 	bl	8007b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	441a      	add	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d32b      	bcc.n	8005832 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	e026      	b.n	8005832 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68d8      	ldr	r0, [r3, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	461a      	mov	r2, r3
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	f002 f9be 	bl	8007b70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fc:	425b      	negs	r3, r3
 80057fe:	441a      	add	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d207      	bcs.n	8005820 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	425b      	negs	r3, r3
 800581a:	441a      	add	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d105      	bne.n	8005832 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3b01      	subs	r3, #1
 8005830:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800583a:	697b      	ldr	r3, [r7, #20]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	441a      	add	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	429a      	cmp	r2, r3
 800586e:	d303      	bcc.n	8005878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68d9      	ldr	r1, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005880:	461a      	mov	r2, r3
 8005882:	6838      	ldr	r0, [r7, #0]
 8005884:	f002 f974 	bl	8007b70 <memcpy>
	}
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005898:	f001 fdc6 	bl	8007428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a4:	e011      	b.n	80058ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d012      	beq.n	80058d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3324      	adds	r3, #36	@ 0x24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fd86 	bl	80063c4 <xTaskRemoveFromEventList>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058be:	f000 fe5f 	bl	8006580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	dce9      	bgt.n	80058a6 <prvUnlockQueue+0x16>
 80058d2:	e000      	b.n	80058d6 <prvUnlockQueue+0x46>
					break;
 80058d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	22ff      	movs	r2, #255	@ 0xff
 80058da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80058de:	f001 fdd5 	bl	800748c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058e2:	f001 fda1 	bl	8007428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ee:	e011      	b.n	8005914 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d012      	beq.n	800591e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3310      	adds	r3, #16
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fd61 	bl	80063c4 <xTaskRemoveFromEventList>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005908:	f000 fe3a 	bl	8006580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800590c:	7bbb      	ldrb	r3, [r7, #14]
 800590e:	3b01      	subs	r3, #1
 8005910:	b2db      	uxtb	r3, r3
 8005912:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005918:	2b00      	cmp	r3, #0
 800591a:	dce9      	bgt.n	80058f0 <prvUnlockQueue+0x60>
 800591c:	e000      	b.n	8005920 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800591e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	22ff      	movs	r2, #255	@ 0xff
 8005924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005928:	f001 fdb0 	bl	800748c <vPortExitCritical>
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800593c:	f001 fd74 	bl	8007428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005948:	2301      	movs	r3, #1
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e001      	b.n	8005952 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005952:	f001 fd9b 	bl	800748c <vPortExitCritical>

	return xReturn;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005968:	f001 fd5e 	bl	8007428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	429a      	cmp	r2, r3
 8005976:	d102      	bne.n	800597e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	e001      	b.n	8005982 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005982:	f001 fd83 	bl	800748c <vPortExitCritical>

	return xReturn;
 8005986:	68fb      	ldr	r3, [r7, #12]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e014      	b.n	80059ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059a0:	4a0f      	ldr	r2, [pc, #60]	@ (80059e0 <vQueueAddToRegistry+0x50>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059ac:	490c      	ldr	r1, [pc, #48]	@ (80059e0 <vQueueAddToRegistry+0x50>)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059b6:	4a0a      	ldr	r2, [pc, #40]	@ (80059e0 <vQueueAddToRegistry+0x50>)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059c2:	e006      	b.n	80059d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b07      	cmp	r3, #7
 80059ce:	d9e7      	bls.n	80059a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000980 	.word	0x20000980

080059e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e016      	b.n	8005a20 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80059f2:	4a10      	ldr	r2, [pc, #64]	@ (8005a34 <vQueueUnregisterQueue+0x50>)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d10b      	bne.n	8005a1a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005a02:	4a0c      	ldr	r2, [pc, #48]	@ (8005a34 <vQueueUnregisterQueue+0x50>)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2100      	movs	r1, #0
 8005a08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005a0c:	4a09      	ldr	r2, [pc, #36]	@ (8005a34 <vQueueUnregisterQueue+0x50>)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	4413      	add	r3, r2
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
				break;
 8005a18:	e006      	b.n	8005a28 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b07      	cmp	r3, #7
 8005a24:	d9e5      	bls.n	80059f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000980 	.word	0x20000980

08005a38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a48:	f001 fcee 	bl	8007428 <vPortEnterCritical>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d103      	bne.n	8005a62 <vQueueWaitForMessageRestricted+0x2a>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d103      	bne.n	8005a78 <vQueueWaitForMessageRestricted+0x40>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a78:	f001 fd08 	bl	800748c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d106      	bne.n	8005a92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	3324      	adds	r3, #36	@ 0x24
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fc6d 	bl	800636c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a92:	6978      	ldr	r0, [r7, #20]
 8005a94:	f7ff fefc 	bl	8005890 <prvUnlockQueue>
	}
 8005a98:	bf00      	nop
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	@ 0x38
 8005aa4:	af04      	add	r7, sp, #16
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	623b      	str	r3, [r7, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <xTaskCreateStatic+0x4a>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	61fb      	str	r3, [r7, #28]
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	e7fd      	b.n	8005ae6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aea:	23a8      	movs	r3, #168	@ 0xa8
 8005aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2ba8      	cmp	r3, #168	@ 0xa8
 8005af2:	d00b      	beq.n	8005b0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	61bb      	str	r3, [r7, #24]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01e      	beq.n	8005b52 <xTaskCreateStatic+0xb2>
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d01b      	beq.n	8005b52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	9302      	str	r3, [sp, #8]
 8005b34:	f107 0314 	add.w	r3, r7, #20
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f851 	bl	8005bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b4c:	f000 f8f6 	bl	8005d3c <prvAddNewTaskToReadyList>
 8005b50:	e001      	b.n	8005b56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b56:	697b      	ldr	r3, [r7, #20]
	}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3728      	adds	r7, #40	@ 0x28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	@ 0x30
 8005b64:	af04      	add	r7, sp, #16
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 fd79 	bl	800766c <pvPortMalloc>
 8005b7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00e      	beq.n	8005ba0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b82:	20a8      	movs	r0, #168	@ 0xa8
 8005b84:	f001 fd72 	bl	800766c <pvPortMalloc>
 8005b88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b96:	e005      	b.n	8005ba4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b98:	6978      	ldr	r0, [r7, #20]
 8005b9a:	f001 fe35 	bl	8007808 <vPortFree>
 8005b9e:	e001      	b.n	8005ba4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d017      	beq.n	8005bda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bb2:	88fa      	ldrh	r2, [r7, #6]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9303      	str	r3, [sp, #12]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	9302      	str	r3, [sp, #8]
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f80f 	bl	8005bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bce:	69f8      	ldr	r0, [r7, #28]
 8005bd0:	f000 f8b4 	bl	8005d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	e002      	b.n	8005be0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bda:	f04f 33ff 	mov.w	r3, #4294967295
 8005bde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005be0:	69bb      	ldr	r3, [r7, #24]
	}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	461a      	mov	r2, r3
 8005c04:	21a5      	movs	r1, #165	@ 0xa5
 8005c06:	f001 ff2f 	bl	8007a68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c14:	3b01      	subs	r3, #1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f023 0307 	bic.w	r3, r3, #7
 8005c22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	617b      	str	r3, [r7, #20]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01f      	beq.n	8005c8c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	e012      	b.n	8005c78 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	7819      	ldrb	r1, [r3, #0]
 8005c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	3334      	adds	r3, #52	@ 0x34
 8005c62:	460a      	mov	r2, r1
 8005c64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d006      	beq.n	8005c80 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3301      	adds	r3, #1
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d9e9      	bls.n	8005c52 <prvInitialiseNewTask+0x66>
 8005c7e:	e000      	b.n	8005c82 <prvInitialiseNewTask+0x96>
			{
				break;
 8005c80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c8a:	e003      	b.n	8005c94 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	2b37      	cmp	r3, #55	@ 0x37
 8005c98:	d901      	bls.n	8005c9e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c9a:	2337      	movs	r3, #55	@ 0x37
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	2200      	movs	r2, #0
 8005cae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe ff45 	bl	8004b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe ff40 	bl	8004b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	3354      	adds	r3, #84	@ 0x54
 8005cee:	224c      	movs	r2, #76	@ 0x4c
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 feb8 	bl	8007a68 <memset>
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8005d30 <prvInitialiseNewTask+0x144>)
 8005cfc:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	4a0c      	ldr	r2, [pc, #48]	@ (8005d34 <prvInitialiseNewTask+0x148>)
 8005d02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	4a0c      	ldr	r2, [pc, #48]	@ (8005d38 <prvInitialiseNewTask+0x14c>)
 8005d08:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	68f9      	ldr	r1, [r7, #12]
 8005d0e:	69b8      	ldr	r0, [r7, #24]
 8005d10:	f001 fa5a 	bl	80071c8 <pxPortInitialiseStack>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d26:	bf00      	nop
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20004c14 	.word	0x20004c14
 8005d34:	20004c7c 	.word	0x20004c7c
 8005d38:	20004ce4 	.word	0x20004ce4

08005d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d44:	f001 fb70 	bl	8007428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d48:	4b2d      	ldr	r3, [pc, #180]	@ (8005e00 <prvAddNewTaskToReadyList+0xc4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005e00 <prvAddNewTaskToReadyList+0xc4>)
 8005d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d52:	4b2c      	ldr	r3, [pc, #176]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d60:	4b27      	ldr	r3, [pc, #156]	@ (8005e00 <prvAddNewTaskToReadyList+0xc4>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d110      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d68:	f000 fc2e 	bl	80065c8 <prvInitialiseTaskLists>
 8005d6c:	e00d      	b.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d6e:	4b26      	ldr	r3, [pc, #152]	@ (8005e08 <prvAddNewTaskToReadyList+0xcc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d76:	4b23      	ldr	r3, [pc, #140]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d802      	bhi.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d84:	4a1f      	ldr	r2, [pc, #124]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d8a:	4b20      	ldr	r3, [pc, #128]	@ (8005e0c <prvAddNewTaskToReadyList+0xd0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a1e      	ldr	r2, [pc, #120]	@ (8005e0c <prvAddNewTaskToReadyList+0xd0>)
 8005d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d94:	4b1d      	ldr	r3, [pc, #116]	@ (8005e0c <prvAddNewTaskToReadyList+0xd0>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e10 <prvAddNewTaskToReadyList+0xd4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d903      	bls.n	8005db0 <prvAddNewTaskToReadyList+0x74>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <prvAddNewTaskToReadyList+0xd4>)
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <prvAddNewTaskToReadyList+0xd8>)
 8005dbe:	441a      	add	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7fe fec9 	bl	8004b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dcc:	f001 fb5e 	bl	800748c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <prvAddNewTaskToReadyList+0xcc>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d207      	bcs.n	8005df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005de6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <prvAddNewTaskToReadyList+0xdc>)
 8005de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000e94 	.word	0x20000e94
 8005e04:	200009c0 	.word	0x200009c0
 8005e08:	20000ea0 	.word	0x20000ea0
 8005e0c:	20000eb0 	.word	0x20000eb0
 8005e10:	20000e9c 	.word	0x20000e9c
 8005e14:	200009c4 	.word	0x200009c4
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e2e:	4b14      	ldr	r3, [pc, #80]	@ (8005e80 <vTaskDelay+0x64>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <vTaskDelay+0x32>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e4e:	f000 f88b 	bl	8005f68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e52:	2100      	movs	r1, #0
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fe09 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e5a:	f000 f893 	bl	8005f84 <xTaskResumeAll>
 8005e5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d107      	bne.n	8005e76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e66:	4b07      	ldr	r3, [pc, #28]	@ (8005e84 <vTaskDelay+0x68>)
 8005e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000ebc 	.word	0x20000ebc
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	@ 0x28
 8005e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e96:	463a      	mov	r2, r7
 8005e98:	1d39      	adds	r1, r7, #4
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fdfc 	bl	8004a9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	9202      	str	r2, [sp, #8]
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	460a      	mov	r2, r1
 8005eb6:	4924      	ldr	r1, [pc, #144]	@ (8005f48 <vTaskStartScheduler+0xc0>)
 8005eb8:	4824      	ldr	r0, [pc, #144]	@ (8005f4c <vTaskStartScheduler+0xc4>)
 8005eba:	f7ff fdf1 	bl	8005aa0 <xTaskCreateStatic>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4a23      	ldr	r2, [pc, #140]	@ (8005f50 <vTaskStartScheduler+0xc8>)
 8005ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ec4:	4b22      	ldr	r3, [pc, #136]	@ (8005f50 <vTaskStartScheduler+0xc8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e001      	b.n	8005ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d102      	bne.n	8005ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005edc:	f000 fe1a 	bl	8006b14 <xTimerCreateTimerTask>
 8005ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d11b      	bne.n	8005f20 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	613b      	str	r3, [r7, #16]
}
 8005efa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005efc:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <vTaskStartScheduler+0xcc>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3354      	adds	r3, #84	@ 0x54
 8005f02:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <vTaskStartScheduler+0xd0>)
 8005f04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f06:	4b15      	ldr	r3, [pc, #84]	@ (8005f5c <vTaskStartScheduler+0xd4>)
 8005f08:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f0e:	4b14      	ldr	r3, [pc, #80]	@ (8005f60 <vTaskStartScheduler+0xd8>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f14:	4b13      	ldr	r3, [pc, #76]	@ (8005f64 <vTaskStartScheduler+0xdc>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f1a:	f001 f9e1 	bl	80072e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f1e:	e00f      	b.n	8005f40 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d10b      	bne.n	8005f40 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	bf00      	nop
 8005f3e:	e7fd      	b.n	8005f3c <vTaskStartScheduler+0xb4>
}
 8005f40:	bf00      	nop
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	08007cb8 	.word	0x08007cb8
 8005f4c:	08006599 	.word	0x08006599
 8005f50:	20000eb8 	.word	0x20000eb8
 8005f54:	200009c0 	.word	0x200009c0
 8005f58:	20000014 	.word	0x20000014
 8005f5c:	20000eb4 	.word	0x20000eb4
 8005f60:	20000ea0 	.word	0x20000ea0
 8005f64:	20000e98 	.word	0x20000e98

08005f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f6c:	4b04      	ldr	r3, [pc, #16]	@ (8005f80 <vTaskSuspendAll+0x18>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	4a03      	ldr	r2, [pc, #12]	@ (8005f80 <vTaskSuspendAll+0x18>)
 8005f74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f76:	bf00      	nop
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	20000ebc 	.word	0x20000ebc

08005f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f92:	4b42      	ldr	r3, [pc, #264]	@ (800609c <xTaskResumeAll+0x118>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	603b      	str	r3, [r7, #0]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fb2:	f001 fa39 	bl	8007428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fb6:	4b39      	ldr	r3, [pc, #228]	@ (800609c <xTaskResumeAll+0x118>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a37      	ldr	r2, [pc, #220]	@ (800609c <xTaskResumeAll+0x118>)
 8005fbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc0:	4b36      	ldr	r3, [pc, #216]	@ (800609c <xTaskResumeAll+0x118>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d162      	bne.n	800608e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fc8:	4b35      	ldr	r3, [pc, #212]	@ (80060a0 <xTaskResumeAll+0x11c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d05e      	beq.n	800608e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fd0:	e02f      	b.n	8006032 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd2:	4b34      	ldr	r3, [pc, #208]	@ (80060a4 <xTaskResumeAll+0x120>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3318      	adds	r3, #24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fe1a 	bl	8004c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fe15 	bl	8004c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80060a8 <xTaskResumeAll+0x124>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d903      	bls.n	8006002 <xTaskResumeAll+0x7e>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80060a8 <xTaskResumeAll+0x124>)
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4a27      	ldr	r2, [pc, #156]	@ (80060ac <xTaskResumeAll+0x128>)
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fe fda0 	bl	8004b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006022:	4b23      	ldr	r3, [pc, #140]	@ (80060b0 <xTaskResumeAll+0x12c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	429a      	cmp	r2, r3
 800602a:	d302      	bcc.n	8006032 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800602c:	4b21      	ldr	r3, [pc, #132]	@ (80060b4 <xTaskResumeAll+0x130>)
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006032:	4b1c      	ldr	r3, [pc, #112]	@ (80060a4 <xTaskResumeAll+0x120>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1cb      	bne.n	8005fd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006040:	f000 fb66 	bl	8006710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006044:	4b1c      	ldr	r3, [pc, #112]	@ (80060b8 <xTaskResumeAll+0x134>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d010      	beq.n	8006072 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006050:	f000 f846 	bl	80060e0 <xTaskIncrementTick>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800605a:	4b16      	ldr	r3, [pc, #88]	@ (80060b4 <xTaskResumeAll+0x130>)
 800605c:	2201      	movs	r2, #1
 800605e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3b01      	subs	r3, #1
 8006064:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f1      	bne.n	8006050 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800606c:	4b12      	ldr	r3, [pc, #72]	@ (80060b8 <xTaskResumeAll+0x134>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006072:	4b10      	ldr	r3, [pc, #64]	@ (80060b4 <xTaskResumeAll+0x130>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800607e:	4b0f      	ldr	r3, [pc, #60]	@ (80060bc <xTaskResumeAll+0x138>)
 8006080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800608e:	f001 f9fd 	bl	800748c <vPortExitCritical>

	return xAlreadyYielded;
 8006092:	68bb      	ldr	r3, [r7, #8]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000ebc 	.word	0x20000ebc
 80060a0:	20000e94 	.word	0x20000e94
 80060a4:	20000e54 	.word	0x20000e54
 80060a8:	20000e9c 	.word	0x20000e9c
 80060ac:	200009c4 	.word	0x200009c4
 80060b0:	200009c0 	.word	0x200009c0
 80060b4:	20000ea8 	.word	0x20000ea8
 80060b8:	20000ea4 	.word	0x20000ea4
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060c6:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <xTaskGetTickCount+0x1c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060cc:	687b      	ldr	r3, [r7, #4]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000e98 	.word	0x20000e98

080060e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006228 <xTaskIncrementTick+0x148>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 8090 	bne.w	8006214 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060f4:	4b4d      	ldr	r3, [pc, #308]	@ (800622c <xTaskIncrementTick+0x14c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060fc:	4a4b      	ldr	r2, [pc, #300]	@ (800622c <xTaskIncrementTick+0x14c>)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d121      	bne.n	800614c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006108:	4b49      	ldr	r3, [pc, #292]	@ (8006230 <xTaskIncrementTick+0x150>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00b      	beq.n	800612a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	603b      	str	r3, [r7, #0]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <xTaskIncrementTick+0x46>
 800612a:	4b41      	ldr	r3, [pc, #260]	@ (8006230 <xTaskIncrementTick+0x150>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	4b40      	ldr	r3, [pc, #256]	@ (8006234 <xTaskIncrementTick+0x154>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a3e      	ldr	r2, [pc, #248]	@ (8006230 <xTaskIncrementTick+0x150>)
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	4a3e      	ldr	r2, [pc, #248]	@ (8006234 <xTaskIncrementTick+0x154>)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4b3e      	ldr	r3, [pc, #248]	@ (8006238 <xTaskIncrementTick+0x158>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	4a3c      	ldr	r2, [pc, #240]	@ (8006238 <xTaskIncrementTick+0x158>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	f000 fae2 	bl	8006710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800614c:	4b3b      	ldr	r3, [pc, #236]	@ (800623c <xTaskIncrementTick+0x15c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	429a      	cmp	r2, r3
 8006154:	d349      	bcc.n	80061ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006156:	4b36      	ldr	r3, [pc, #216]	@ (8006230 <xTaskIncrementTick+0x150>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d104      	bne.n	800616a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006160:	4b36      	ldr	r3, [pc, #216]	@ (800623c <xTaskIncrementTick+0x15c>)
 8006162:	f04f 32ff 	mov.w	r2, #4294967295
 8006166:	601a      	str	r2, [r3, #0]
					break;
 8006168:	e03f      	b.n	80061ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616a:	4b31      	ldr	r3, [pc, #196]	@ (8006230 <xTaskIncrementTick+0x150>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d203      	bcs.n	800618a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006182:	4a2e      	ldr	r2, [pc, #184]	@ (800623c <xTaskIncrementTick+0x15c>)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006188:	e02f      	b.n	80061ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	3304      	adds	r3, #4
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe fd42 	bl	8004c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	3318      	adds	r3, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe fd39 	bl	8004c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061aa:	4b25      	ldr	r3, [pc, #148]	@ (8006240 <xTaskIncrementTick+0x160>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d903      	bls.n	80061ba <xTaskIncrementTick+0xda>
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	4a22      	ldr	r2, [pc, #136]	@ (8006240 <xTaskIncrementTick+0x160>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006244 <xTaskIncrementTick+0x164>)
 80061c8:	441a      	add	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f7fe fcc4 	bl	8004b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061da:	4b1b      	ldr	r3, [pc, #108]	@ (8006248 <xTaskIncrementTick+0x168>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3b8      	bcc.n	8006156 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061e8:	e7b5      	b.n	8006156 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061ea:	4b17      	ldr	r3, [pc, #92]	@ (8006248 <xTaskIncrementTick+0x168>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f0:	4914      	ldr	r1, [pc, #80]	@ (8006244 <xTaskIncrementTick+0x164>)
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d901      	bls.n	8006206 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006206:	4b11      	ldr	r3, [pc, #68]	@ (800624c <xTaskIncrementTick+0x16c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800620e:	2301      	movs	r3, #1
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	e004      	b.n	800621e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006214:	4b0e      	ldr	r3, [pc, #56]	@ (8006250 <xTaskIncrementTick+0x170>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	4a0d      	ldr	r2, [pc, #52]	@ (8006250 <xTaskIncrementTick+0x170>)
 800621c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800621e:	697b      	ldr	r3, [r7, #20]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000ebc 	.word	0x20000ebc
 800622c:	20000e98 	.word	0x20000e98
 8006230:	20000e4c 	.word	0x20000e4c
 8006234:	20000e50 	.word	0x20000e50
 8006238:	20000eac 	.word	0x20000eac
 800623c:	20000eb4 	.word	0x20000eb4
 8006240:	20000e9c 	.word	0x20000e9c
 8006244:	200009c4 	.word	0x200009c4
 8006248:	200009c0 	.word	0x200009c0
 800624c:	20000ea8 	.word	0x20000ea8
 8006250:	20000ea4 	.word	0x20000ea4

08006254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800625a:	4b2b      	ldr	r3, [pc, #172]	@ (8006308 <vTaskSwitchContext+0xb4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006262:	4b2a      	ldr	r3, [pc, #168]	@ (800630c <vTaskSwitchContext+0xb8>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006268:	e047      	b.n	80062fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800626a:	4b28      	ldr	r3, [pc, #160]	@ (800630c <vTaskSwitchContext+0xb8>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006270:	4b27      	ldr	r3, [pc, #156]	@ (8006310 <vTaskSwitchContext+0xbc>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e011      	b.n	800629c <vTaskSwitchContext+0x48>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10b      	bne.n	8006296 <vTaskSwitchContext+0x42>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	607b      	str	r3, [r7, #4]
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	e7fd      	b.n	8006292 <vTaskSwitchContext+0x3e>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b01      	subs	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	491d      	ldr	r1, [pc, #116]	@ (8006314 <vTaskSwitchContext+0xc0>)
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0e3      	beq.n	8006278 <vTaskSwitchContext+0x24>
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4a16      	ldr	r2, [pc, #88]	@ (8006314 <vTaskSwitchContext+0xc0>)
 80062bc:	4413      	add	r3, r2
 80062be:	60bb      	str	r3, [r7, #8]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	605a      	str	r2, [r3, #4]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	3308      	adds	r3, #8
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d104      	bne.n	80062e0 <vTaskSwitchContext+0x8c>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006318 <vTaskSwitchContext+0xc4>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	4a09      	ldr	r2, [pc, #36]	@ (8006310 <vTaskSwitchContext+0xbc>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062f0:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <vTaskSwitchContext+0xc4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3354      	adds	r3, #84	@ 0x54
 80062f6:	4a09      	ldr	r2, [pc, #36]	@ (800631c <vTaskSwitchContext+0xc8>)
 80062f8:	6013      	str	r3, [r2, #0]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20000ebc 	.word	0x20000ebc
 800630c:	20000ea8 	.word	0x20000ea8
 8006310:	20000e9c 	.word	0x20000e9c
 8006314:	200009c4 	.word	0x200009c4
 8006318:	200009c0 	.word	0x200009c0
 800631c:	20000014 	.word	0x20000014

08006320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	bf00      	nop
 8006346:	e7fd      	b.n	8006344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006348:	4b07      	ldr	r3, [pc, #28]	@ (8006368 <vTaskPlaceOnEventList+0x48>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3318      	adds	r3, #24
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fe fc28 	bl	8004ba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006356:	2101      	movs	r1, #1
 8006358:	6838      	ldr	r0, [r7, #0]
 800635a:	f000 fb87 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
}
 800635e:	bf00      	nop
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	200009c0 	.word	0x200009c0

0800636c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	617b      	str	r3, [r7, #20]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006396:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3318      	adds	r3, #24
 800639c:	4619      	mov	r1, r3
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7fe fbdd 	bl	8004b5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	68b8      	ldr	r0, [r7, #8]
 80063b4:	f000 fb5a 	bl	8006a6c <prvAddCurrentTaskToDelayedList>
	}
 80063b8:	bf00      	nop
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	200009c0 	.word	0x200009c0

080063c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	60fb      	str	r3, [r7, #12]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3318      	adds	r3, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fc0e 	bl	8004c18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fc:	4b1d      	ldr	r3, [pc, #116]	@ (8006474 <xTaskRemoveFromEventList+0xb0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d11d      	bne.n	8006440 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fe fc05 	bl	8004c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006412:	4b19      	ldr	r3, [pc, #100]	@ (8006478 <xTaskRemoveFromEventList+0xb4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d903      	bls.n	8006422 <xTaskRemoveFromEventList+0x5e>
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	4a16      	ldr	r2, [pc, #88]	@ (8006478 <xTaskRemoveFromEventList+0xb4>)
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4a13      	ldr	r2, [pc, #76]	@ (800647c <xTaskRemoveFromEventList+0xb8>)
 8006430:	441a      	add	r2, r3
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3304      	adds	r3, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f7fe fb90 	bl	8004b5e <vListInsertEnd>
 800643e:	e005      	b.n	800644c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	3318      	adds	r3, #24
 8006444:	4619      	mov	r1, r3
 8006446:	480e      	ldr	r0, [pc, #56]	@ (8006480 <xTaskRemoveFromEventList+0xbc>)
 8006448:	f7fe fb89 	bl	8004b5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006450:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <xTaskRemoveFromEventList+0xc0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006456:	429a      	cmp	r2, r3
 8006458:	d905      	bls.n	8006466 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800645a:	2301      	movs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800645e:	4b0a      	ldr	r3, [pc, #40]	@ (8006488 <xTaskRemoveFromEventList+0xc4>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	e001      	b.n	800646a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800646a:	697b      	ldr	r3, [r7, #20]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000ebc 	.word	0x20000ebc
 8006478:	20000e9c 	.word	0x20000e9c
 800647c:	200009c4 	.word	0x200009c4
 8006480:	20000e54 	.word	0x20000e54
 8006484:	200009c0 	.word	0x200009c0
 8006488:	20000ea8 	.word	0x20000ea8

0800648c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006494:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <vTaskInternalSetTimeOutState+0x24>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800649c:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <vTaskInternalSetTimeOutState+0x28>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	20000eac 	.word	0x20000eac
 80064b4:	20000e98 	.word	0x20000e98

080064b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	613b      	str	r3, [r7, #16]
}
 80064da:	bf00      	nop
 80064dc:	bf00      	nop
 80064de:	e7fd      	b.n	80064dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	60fb      	str	r3, [r7, #12]
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	e7fd      	b.n	80064fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80064fe:	f000 ff93 	bl	8007428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006502:	4b1d      	ldr	r3, [pc, #116]	@ (8006578 <xTaskCheckForTimeOut+0xc0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d102      	bne.n	8006522 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800651c:	2300      	movs	r3, #0
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	e023      	b.n	800656a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b15      	ldr	r3, [pc, #84]	@ (800657c <xTaskCheckForTimeOut+0xc4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d007      	beq.n	800653e <xTaskCheckForTimeOut+0x86>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	e015      	b.n	800656a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	429a      	cmp	r2, r3
 8006546:	d20b      	bcs.n	8006560 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	1ad2      	subs	r2, r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff99 	bl	800648c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	e004      	b.n	800656a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006566:	2301      	movs	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800656a:	f000 ff8f 	bl	800748c <vPortExitCritical>

	return xReturn;
 800656e:	69fb      	ldr	r3, [r7, #28]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000e98 	.word	0x20000e98
 800657c:	20000eac 	.word	0x20000eac

08006580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006584:	4b03      	ldr	r3, [pc, #12]	@ (8006594 <vTaskMissedYield+0x14>)
 8006586:	2201      	movs	r2, #1
 8006588:	601a      	str	r2, [r3, #0]
}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20000ea8 	.word	0x20000ea8

08006598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065a0:	f000 f852 	bl	8006648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065a4:	4b06      	ldr	r3, [pc, #24]	@ (80065c0 <prvIdleTask+0x28>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d9f9      	bls.n	80065a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065ac:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <prvIdleTask+0x2c>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065bc:	e7f0      	b.n	80065a0 <prvIdleTask+0x8>
 80065be:	bf00      	nop
 80065c0:	200009c4 	.word	0x200009c4
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	e00c      	b.n	80065ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4a12      	ldr	r2, [pc, #72]	@ (8006628 <prvInitialiseTaskLists+0x60>)
 80065e0:	4413      	add	r3, r2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fa8e 	bl	8004b04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3301      	adds	r3, #1
 80065ec:	607b      	str	r3, [r7, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b37      	cmp	r3, #55	@ 0x37
 80065f2:	d9ef      	bls.n	80065d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065f4:	480d      	ldr	r0, [pc, #52]	@ (800662c <prvInitialiseTaskLists+0x64>)
 80065f6:	f7fe fa85 	bl	8004b04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065fa:	480d      	ldr	r0, [pc, #52]	@ (8006630 <prvInitialiseTaskLists+0x68>)
 80065fc:	f7fe fa82 	bl	8004b04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006600:	480c      	ldr	r0, [pc, #48]	@ (8006634 <prvInitialiseTaskLists+0x6c>)
 8006602:	f7fe fa7f 	bl	8004b04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006606:	480c      	ldr	r0, [pc, #48]	@ (8006638 <prvInitialiseTaskLists+0x70>)
 8006608:	f7fe fa7c 	bl	8004b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800660c:	480b      	ldr	r0, [pc, #44]	@ (800663c <prvInitialiseTaskLists+0x74>)
 800660e:	f7fe fa79 	bl	8004b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006612:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <prvInitialiseTaskLists+0x78>)
 8006614:	4a05      	ldr	r2, [pc, #20]	@ (800662c <prvInitialiseTaskLists+0x64>)
 8006616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006618:	4b0a      	ldr	r3, [pc, #40]	@ (8006644 <prvInitialiseTaskLists+0x7c>)
 800661a:	4a05      	ldr	r2, [pc, #20]	@ (8006630 <prvInitialiseTaskLists+0x68>)
 800661c:	601a      	str	r2, [r3, #0]
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200009c4 	.word	0x200009c4
 800662c:	20000e24 	.word	0x20000e24
 8006630:	20000e38 	.word	0x20000e38
 8006634:	20000e54 	.word	0x20000e54
 8006638:	20000e68 	.word	0x20000e68
 800663c:	20000e80 	.word	0x20000e80
 8006640:	20000e4c 	.word	0x20000e4c
 8006644:	20000e50 	.word	0x20000e50

08006648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800664e:	e019      	b.n	8006684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006650:	f000 feea 	bl	8007428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006654:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <prvCheckTasksWaitingTermination+0x50>)
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fad9 	bl	8004c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006666:	4b0d      	ldr	r3, [pc, #52]	@ (800669c <prvCheckTasksWaitingTermination+0x54>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3b01      	subs	r3, #1
 800666c:	4a0b      	ldr	r2, [pc, #44]	@ (800669c <prvCheckTasksWaitingTermination+0x54>)
 800666e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006670:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <prvCheckTasksWaitingTermination+0x58>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3b01      	subs	r3, #1
 8006676:	4a0a      	ldr	r2, [pc, #40]	@ (80066a0 <prvCheckTasksWaitingTermination+0x58>)
 8006678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800667a:	f000 ff07 	bl	800748c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f810 	bl	80066a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <prvCheckTasksWaitingTermination+0x58>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e1      	bne.n	8006650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000e68 	.word	0x20000e68
 800669c:	20000e94 	.word	0x20000e94
 80066a0:	20000e7c 	.word	0x20000e7c

080066a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3354      	adds	r3, #84	@ 0x54
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 f9e1 	bl	8007a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d108      	bne.n	80066d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 f89f 	bl	8007808 <vPortFree>
				vPortFree( pxTCB );
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 f89c 	bl	8007808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066d0:	e019      	b.n	8006706 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d103      	bne.n	80066e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f893 	bl	8007808 <vPortFree>
	}
 80066e2:	e010      	b.n	8006706 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d00b      	beq.n	8006706 <prvDeleteTCB+0x62>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60fb      	str	r3, [r7, #12]
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	e7fd      	b.n	8006702 <prvDeleteTCB+0x5e>
	}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006716:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <prvResetNextTaskUnblockTime+0x38>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006720:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <prvResetNextTaskUnblockTime+0x3c>)
 8006722:	f04f 32ff 	mov.w	r2, #4294967295
 8006726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006728:	e008      	b.n	800673c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672a:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <prvResetNextTaskUnblockTime+0x38>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a04      	ldr	r2, [pc, #16]	@ (800674c <prvResetNextTaskUnblockTime+0x3c>)
 800673a:	6013      	str	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000e4c 	.word	0x20000e4c
 800674c:	20000eb4 	.word	0x20000eb4

08006750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006756:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <xTaskGetSchedulerState+0x34>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800675e:	2301      	movs	r3, #1
 8006760:	607b      	str	r3, [r7, #4]
 8006762:	e008      	b.n	8006776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006764:	4b08      	ldr	r3, [pc, #32]	@ (8006788 <xTaskGetSchedulerState+0x38>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800676c:	2302      	movs	r3, #2
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	e001      	b.n	8006776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006776:	687b      	ldr	r3, [r7, #4]
	}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	20000ea0 	.word	0x20000ea0
 8006788:	20000ebc 	.word	0x20000ebc

0800678c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d051      	beq.n	8006846 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a6:	4b2a      	ldr	r3, [pc, #168]	@ (8006850 <xTaskPriorityInherit+0xc4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d241      	bcs.n	8006834 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db06      	blt.n	80067c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b8:	4b25      	ldr	r3, [pc, #148]	@ (8006850 <xTaskPriorityInherit+0xc4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6959      	ldr	r1, [r3, #20]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006854 <xTaskPriorityInherit+0xc8>)
 80067d8:	4413      	add	r3, r2
 80067da:	4299      	cmp	r1, r3
 80067dc:	d122      	bne.n	8006824 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fa18 	bl	8004c18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067e8:	4b19      	ldr	r3, [pc, #100]	@ (8006850 <xTaskPriorityInherit+0xc4>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f6:	4b18      	ldr	r3, [pc, #96]	@ (8006858 <xTaskPriorityInherit+0xcc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d903      	bls.n	8006806 <xTaskPriorityInherit+0x7a>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	4a15      	ldr	r2, [pc, #84]	@ (8006858 <xTaskPriorityInherit+0xcc>)
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4a10      	ldr	r2, [pc, #64]	@ (8006854 <xTaskPriorityInherit+0xc8>)
 8006814:	441a      	add	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7fe f99e 	bl	8004b5e <vListInsertEnd>
 8006822:	e004      	b.n	800682e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006824:	4b0a      	ldr	r3, [pc, #40]	@ (8006850 <xTaskPriorityInherit+0xc4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800682e:	2301      	movs	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e008      	b.n	8006846 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006838:	4b05      	ldr	r3, [pc, #20]	@ (8006850 <xTaskPriorityInherit+0xc4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	429a      	cmp	r2, r3
 8006840:	d201      	bcs.n	8006846 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006842:	2301      	movs	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006846:	68fb      	ldr	r3, [r7, #12]
	}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	200009c0 	.word	0x200009c0
 8006854:	200009c4 	.word	0x200009c4
 8006858:	20000e9c 	.word	0x20000e9c

0800685c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d058      	beq.n	8006924 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006872:	4b2f      	ldr	r3, [pc, #188]	@ (8006930 <xTaskPriorityDisinherit+0xd4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d00b      	beq.n	8006894 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60fb      	str	r3, [r7, #12]
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	e7fd      	b.n	8006890 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60bb      	str	r3, [r7, #8]
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d02c      	beq.n	8006924 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d128      	bne.n	8006924 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fe f99e 	bl	8004c18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <xTaskPriorityDisinherit+0xd8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d903      	bls.n	8006904 <xTaskPriorityDisinherit+0xa8>
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	4a0c      	ldr	r2, [pc, #48]	@ (8006934 <xTaskPriorityDisinherit+0xd8>)
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4a09      	ldr	r2, [pc, #36]	@ (8006938 <xTaskPriorityDisinherit+0xdc>)
 8006912:	441a      	add	r2, r3
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	3304      	adds	r3, #4
 8006918:	4619      	mov	r1, r3
 800691a:	4610      	mov	r0, r2
 800691c:	f7fe f91f 	bl	8004b5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006924:	697b      	ldr	r3, [r7, #20]
	}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	200009c0 	.word	0x200009c0
 8006934:	20000e9c 	.word	0x20000e9c
 8006938:	200009c4 	.word	0x200009c4

0800693c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800694a:	2301      	movs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d06c      	beq.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	60fb      	str	r3, [r7, #12]
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	e7fd      	b.n	8006970 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d902      	bls.n	8006984 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	e002      	b.n	800698a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006988:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	429a      	cmp	r2, r3
 8006992:	d04c      	beq.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	429a      	cmp	r2, r3
 800699c:	d147      	bne.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800699e:	4b26      	ldr	r3, [pc, #152]	@ (8006a38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d10b      	bne.n	80069c0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60bb      	str	r3, [r7, #8]
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	e7fd      	b.n	80069bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	db04      	blt.n	80069de <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	6959      	ldr	r1, [r3, #20]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4a13      	ldr	r2, [pc, #76]	@ (8006a3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069ee:	4413      	add	r3, r2
 80069f0:	4299      	cmp	r1, r3
 80069f2:	d11c      	bne.n	8006a2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe f90d 	bl	8004c18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a02:	4b0f      	ldr	r3, [pc, #60]	@ (8006a40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4a07      	ldr	r2, [pc, #28]	@ (8006a3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006a20:	441a      	add	r2, r3
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7fe f898 	bl	8004b5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a2e:	bf00      	nop
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200009c0 	.word	0x200009c0
 8006a3c:	200009c4 	.word	0x200009c4
 8006a40:	20000e9c 	.word	0x20000e9c

08006a44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a48:	4b07      	ldr	r3, [pc, #28]	@ (8006a68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a50:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a56:	3201      	adds	r2, #1
 8006a58:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006a5a:	4b03      	ldr	r3, [pc, #12]	@ (8006a68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
	}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	200009c0 	.word	0x200009c0

08006a6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a76:	4b21      	ldr	r3, [pc, #132]	@ (8006afc <prvAddCurrentTaskToDelayedList+0x90>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a7c:	4b20      	ldr	r3, [pc, #128]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe f8c8 	bl	8004c18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d10a      	bne.n	8006aa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d007      	beq.n	8006aa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a96:	4b1a      	ldr	r3, [pc, #104]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4819      	ldr	r0, [pc, #100]	@ (8006b04 <prvAddCurrentTaskToDelayedList+0x98>)
 8006aa0:	f7fe f85d 	bl	8004b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006aa4:	e026      	b.n	8006af4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006aae:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d209      	bcs.n	8006ad2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006abe:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f7fe f86b 	bl	8004ba6 <vListInsert>
}
 8006ad0:	e010      	b.n	8006af4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fe f861 	bl	8004ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d202      	bcs.n	8006af4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006aee:	4a08      	ldr	r2, [pc, #32]	@ (8006b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6013      	str	r3, [r2, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000e98 	.word	0x20000e98
 8006b00:	200009c0 	.word	0x200009c0
 8006b04:	20000e80 	.word	0x20000e80
 8006b08:	20000e50 	.word	0x20000e50
 8006b0c:	20000e4c 	.word	0x20000e4c
 8006b10:	20000eb4 	.word	0x20000eb4

08006b14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	@ 0x28
 8006b18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b1e:	f000 fb13 	bl	8007148 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b22:	4b1d      	ldr	r3, [pc, #116]	@ (8006b98 <xTimerCreateTimerTask+0x84>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d021      	beq.n	8006b6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b32:	1d3a      	adds	r2, r7, #4
 8006b34:	f107 0108 	add.w	r1, r7, #8
 8006b38:	f107 030c 	add.w	r3, r7, #12
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fd ffc7 	bl	8004ad0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	9202      	str	r2, [sp, #8]
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	2300      	movs	r3, #0
 8006b52:	460a      	mov	r2, r1
 8006b54:	4911      	ldr	r1, [pc, #68]	@ (8006b9c <xTimerCreateTimerTask+0x88>)
 8006b56:	4812      	ldr	r0, [pc, #72]	@ (8006ba0 <xTimerCreateTimerTask+0x8c>)
 8006b58:	f7fe ffa2 	bl	8005aa0 <xTaskCreateStatic>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	4a11      	ldr	r2, [pc, #68]	@ (8006ba4 <xTimerCreateTimerTask+0x90>)
 8006b60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b62:	4b10      	ldr	r3, [pc, #64]	@ (8006ba4 <xTimerCreateTimerTask+0x90>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	613b      	str	r3, [r7, #16]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b8c:	697b      	ldr	r3, [r7, #20]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000ef0 	.word	0x20000ef0
 8006b9c:	08007cc0 	.word	0x08007cc0
 8006ba0:	08006ce1 	.word	0x08006ce1
 8006ba4:	20000ef4 	.word	0x20000ef4

08006ba8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	623b      	str	r3, [r7, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bd8:	4b19      	ldr	r3, [pc, #100]	@ (8006c40 <xTimerGenericCommand+0x98>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d02a      	beq.n	8006c36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	dc18      	bgt.n	8006c24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bf2:	f7ff fdad 	bl	8006750 <xTaskGetSchedulerState>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d109      	bne.n	8006c10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bfc:	4b10      	ldr	r3, [pc, #64]	@ (8006c40 <xTimerGenericCommand+0x98>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	f107 0110 	add.w	r1, r7, #16
 8006c04:	2300      	movs	r3, #0
 8006c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c08:	f7fe f9e4 	bl	8004fd4 <xQueueGenericSend>
 8006c0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c0e:	e012      	b.n	8006c36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <xTimerGenericCommand+0x98>)
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	f107 0110 	add.w	r1, r7, #16
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f7fe f9da 	bl	8004fd4 <xQueueGenericSend>
 8006c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c22:	e008      	b.n	8006c36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c24:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <xTimerGenericCommand+0x98>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	f107 0110 	add.w	r1, r7, #16
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	f7fe fad2 	bl	80051d8 <xQueueGenericSendFromISR>
 8006c34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3728      	adds	r7, #40	@ 0x28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000ef0 	.word	0x20000ef0

08006c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4e:	4b23      	ldr	r3, [pc, #140]	@ (8006cdc <prvProcessExpiredTimer+0x98>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fd ffdb 	bl	8004c18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d023      	beq.n	8006cb8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	18d1      	adds	r1, r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	6978      	ldr	r0, [r7, #20]
 8006c7e:	f000 f8d5 	bl	8006e2c <prvInsertTimerInActiveList>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d020      	beq.n	8006cca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	2100      	movs	r1, #0
 8006c92:	6978      	ldr	r0, [r7, #20]
 8006c94:	f7ff ff88 	bl	8006ba8 <xTimerGenericCommand>
 8006c98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d114      	bne.n	8006cca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	e7fd      	b.n	8006cb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	6978      	ldr	r0, [r7, #20]
 8006cd0:	4798      	blx	r3
}
 8006cd2:	bf00      	nop
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000ee8 	.word	0x20000ee8

08006ce0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ce8:	f107 0308 	add.w	r3, r7, #8
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 f859 	bl	8006da4 <prvGetNextExpireTime>
 8006cf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f805 	bl	8006d08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cfe:	f000 f8d7 	bl	8006eb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d02:	bf00      	nop
 8006d04:	e7f0      	b.n	8006ce8 <prvTimerTask+0x8>
	...

08006d08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d12:	f7ff f929 	bl	8005f68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d16:	f107 0308 	add.w	r3, r7, #8
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f866 	bl	8006dec <prvSampleTimeNow>
 8006d20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d130      	bne.n	8006d8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <prvProcessTimerOrBlockTask+0x3c>
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d806      	bhi.n	8006d44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d36:	f7ff f925 	bl	8005f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d3a:	68f9      	ldr	r1, [r7, #12]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ff81 	bl	8006c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d42:	e024      	b.n	8006d8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d4a:	4b13      	ldr	r3, [pc, #76]	@ (8006d98 <prvProcessTimerOrBlockTask+0x90>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <prvProcessTimerOrBlockTask+0x50>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e000      	b.n	8006d5a <prvProcessTimerOrBlockTask+0x52>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d9c <prvProcessTimerOrBlockTask+0x94>)
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7fe fe65 	bl	8005a38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d6e:	f7ff f909 	bl	8005f84 <xTaskResumeAll>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d78:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <prvProcessTimerOrBlockTask+0x98>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
}
 8006d88:	e001      	b.n	8006d8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d8a:	f7ff f8fb 	bl	8005f84 <xTaskResumeAll>
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000eec 	.word	0x20000eec
 8006d9c:	20000ef0 	.word	0x20000ef0
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dac:	4b0e      	ldr	r3, [pc, #56]	@ (8006de8 <prvGetNextExpireTime+0x44>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <prvGetNextExpireTime+0x16>
 8006db6:	2201      	movs	r2, #1
 8006db8:	e000      	b.n	8006dbc <prvGetNextExpireTime+0x18>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dc8:	4b07      	ldr	r3, [pc, #28]	@ (8006de8 <prvGetNextExpireTime+0x44>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	e001      	b.n	8006dd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000ee8 	.word	0x20000ee8

08006dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006df4:	f7ff f964 	bl	80060c0 <xTaskGetTickCount>
 8006df8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <prvSampleTimeNow+0x3c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d205      	bcs.n	8006e10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e04:	f000 f93a 	bl	800707c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e002      	b.n	8006e16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e16:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <prvSampleTimeNow+0x3c>)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000ef8 	.word	0x20000ef8

08006e2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d812      	bhi.n	8006e78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	1ad2      	subs	r2, r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e01b      	b.n	8006e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e66:	4b10      	ldr	r3, [pc, #64]	@ (8006ea8 <prvInsertTimerInActiveList+0x7c>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f7fd fe98 	bl	8004ba6 <vListInsert>
 8006e76:	e012      	b.n	8006e9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d206      	bcs.n	8006e8e <prvInsertTimerInActiveList+0x62>
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d302      	bcc.n	8006e8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e007      	b.n	8006e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e8e:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <prvInsertTimerInActiveList+0x80>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7fd fe84 	bl	8004ba6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e9e:	697b      	ldr	r3, [r7, #20]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20000eec 	.word	0x20000eec
 8006eac:	20000ee8 	.word	0x20000ee8

08006eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	@ 0x38
 8006eb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eb6:	e0ce      	b.n	8007056 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da19      	bge.n	8006ef2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	61fb      	str	r3, [r7, #28]
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ee8:	6850      	ldr	r0, [r2, #4]
 8006eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eec:	6892      	ldr	r2, [r2, #8]
 8006eee:	4611      	mov	r1, r2
 8006ef0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f2c0 80ae 	blt.w	8007056 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fd fe84 	bl	8004c18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f10:	463b      	mov	r3, r7
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff ff6a 	bl	8006dec <prvSampleTimeNow>
 8006f18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b09      	cmp	r3, #9
 8006f1e:	f200 8097 	bhi.w	8007050 <prvProcessReceivedCommands+0x1a0>
 8006f22:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <prvProcessReceivedCommands+0x78>)
 8006f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f51 	.word	0x08006f51
 8006f34:	08006fc7 	.word	0x08006fc7
 8006f38:	08006fdb 	.word	0x08006fdb
 8006f3c:	08007027 	.word	0x08007027
 8006f40:	08006f51 	.word	0x08006f51
 8006f44:	08006f51 	.word	0x08006f51
 8006f48:	08006fc7 	.word	0x08006fc7
 8006f4c:	08006fdb 	.word	0x08006fdb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f56:	f043 0301 	orr.w	r3, r3, #1
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	18d1      	adds	r1, r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f70:	f7ff ff5c 	bl	8006e2c <prvInsertTimerInActiveList>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d06c      	beq.n	8007054 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d061      	beq.n	8007054 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	441a      	add	r2, r3
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa2:	f7ff fe01 	bl	8006ba8 <xTimerGenericCommand>
 8006fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d152      	bne.n	8007054 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	61bb      	str	r3, [r7, #24]
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	e7fd      	b.n	8006fc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fd8:	e03d      	b.n	8007056 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	617b      	str	r3, [r7, #20]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	18d1      	adds	r1, r2, r3
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800701e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007020:	f7ff ff04 	bl	8006e2c <prvInsertTimerInActiveList>
					break;
 8007024:	e017      	b.n	8007056 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d103      	bne.n	800703c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007036:	f000 fbe7 	bl	8007808 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800703a:	e00c      	b.n	8007056 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800704e:	e002      	b.n	8007056 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007050:	bf00      	nop
 8007052:	e000      	b.n	8007056 <prvProcessReceivedCommands+0x1a6>
					break;
 8007054:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007056:	4b08      	ldr	r3, [pc, #32]	@ (8007078 <prvProcessReceivedCommands+0x1c8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	1d39      	adds	r1, r7, #4
 800705c:	2200      	movs	r2, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe f958 	bl	8005314 <xQueueReceive>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	f47f af26 	bne.w	8006eb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	3730      	adds	r7, #48	@ 0x30
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000ef0 	.word	0x20000ef0

0800707c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007082:	e049      	b.n	8007118 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007084:	4b2e      	ldr	r3, [pc, #184]	@ (8007140 <prvSwitchTimerLists+0xc4>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708e:	4b2c      	ldr	r3, [pc, #176]	@ (8007140 <prvSwitchTimerLists+0xc4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3304      	adds	r3, #4
 800709c:	4618      	mov	r0, r3
 800709e:	f7fd fdbb 	bl	8004c18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d02f      	beq.n	8007118 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d90e      	bls.n	80070e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007140 <prvSwitchTimerLists+0xc4>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3304      	adds	r3, #4
 80070de:	4619      	mov	r1, r3
 80070e0:	4610      	mov	r0, r2
 80070e2:	f7fd fd60 	bl	8004ba6 <vListInsert>
 80070e6:	e017      	b.n	8007118 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070e8:	2300      	movs	r3, #0
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	2100      	movs	r1, #0
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7ff fd58 	bl	8006ba8 <xTimerGenericCommand>
 80070f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	603b      	str	r3, [r7, #0]
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007118:	4b09      	ldr	r3, [pc, #36]	@ (8007140 <prvSwitchTimerLists+0xc4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1b0      	bne.n	8007084 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007122:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <prvSwitchTimerLists+0xc4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <prvSwitchTimerLists+0xc8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a04      	ldr	r2, [pc, #16]	@ (8007140 <prvSwitchTimerLists+0xc4>)
 800712e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007130:	4a04      	ldr	r2, [pc, #16]	@ (8007144 <prvSwitchTimerLists+0xc8>)
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	6013      	str	r3, [r2, #0]
}
 8007136:	bf00      	nop
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000ee8 	.word	0x20000ee8
 8007144:	20000eec 	.word	0x20000eec

08007148 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800714e:	f000 f96b 	bl	8007428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007152:	4b15      	ldr	r3, [pc, #84]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d120      	bne.n	800719c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800715a:	4814      	ldr	r0, [pc, #80]	@ (80071ac <prvCheckForValidListAndQueue+0x64>)
 800715c:	f7fd fcd2 	bl	8004b04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007160:	4813      	ldr	r0, [pc, #76]	@ (80071b0 <prvCheckForValidListAndQueue+0x68>)
 8007162:	f7fd fccf 	bl	8004b04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007166:	4b13      	ldr	r3, [pc, #76]	@ (80071b4 <prvCheckForValidListAndQueue+0x6c>)
 8007168:	4a10      	ldr	r2, [pc, #64]	@ (80071ac <prvCheckForValidListAndQueue+0x64>)
 800716a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800716c:	4b12      	ldr	r3, [pc, #72]	@ (80071b8 <prvCheckForValidListAndQueue+0x70>)
 800716e:	4a10      	ldr	r2, [pc, #64]	@ (80071b0 <prvCheckForValidListAndQueue+0x68>)
 8007170:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007172:	2300      	movs	r3, #0
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4b11      	ldr	r3, [pc, #68]	@ (80071bc <prvCheckForValidListAndQueue+0x74>)
 8007178:	4a11      	ldr	r2, [pc, #68]	@ (80071c0 <prvCheckForValidListAndQueue+0x78>)
 800717a:	2110      	movs	r1, #16
 800717c:	200a      	movs	r0, #10
 800717e:	f7fd fddf 	bl	8004d40 <xQueueGenericCreateStatic>
 8007182:	4603      	mov	r3, r0
 8007184:	4a08      	ldr	r2, [pc, #32]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007188:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007190:	4b05      	ldr	r3, [pc, #20]	@ (80071a8 <prvCheckForValidListAndQueue+0x60>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	490b      	ldr	r1, [pc, #44]	@ (80071c4 <prvCheckForValidListAndQueue+0x7c>)
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fbfa 	bl	8005990 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800719c:	f000 f976 	bl	800748c <vPortExitCritical>
}
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000ef0 	.word	0x20000ef0
 80071ac:	20000ec0 	.word	0x20000ec0
 80071b0:	20000ed4 	.word	0x20000ed4
 80071b4:	20000ee8 	.word	0x20000ee8
 80071b8:	20000eec 	.word	0x20000eec
 80071bc:	20000f9c 	.word	0x20000f9c
 80071c0:	20000efc 	.word	0x20000efc
 80071c4:	08007cc8 	.word	0x08007cc8

080071c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3b04      	subs	r3, #4
 80071d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0201 	bic.w	r2, r3, #1
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3b04      	subs	r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071f8:	4a0c      	ldr	r2, [pc, #48]	@ (800722c <pxPortInitialiseStack+0x64>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3b14      	subs	r3, #20
 8007202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3b04      	subs	r3, #4
 800720e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f06f 0202 	mvn.w	r2, #2
 8007216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3b20      	subs	r3, #32
 800721c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800721e:	68fb      	ldr	r3, [r7, #12]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3714      	adds	r7, #20
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	08007231 	.word	0x08007231

08007230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800723a:	4b13      	ldr	r3, [pc, #76]	@ (8007288 <prvTaskExitError+0x58>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d00b      	beq.n	800725c <prvTaskExitError+0x2c>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	bf00      	nop
 800725a:	e7fd      	b.n	8007258 <prvTaskExitError+0x28>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	60bb      	str	r3, [r7, #8]
}
 800726e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007270:	bf00      	nop
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0fc      	beq.n	8007272 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20000010 	.word	0x20000010
 800728c:	00000000 	.word	0x00000000

08007290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007290:	4b07      	ldr	r3, [pc, #28]	@ (80072b0 <pxCurrentTCBConst2>)
 8007292:	6819      	ldr	r1, [r3, #0]
 8007294:	6808      	ldr	r0, [r1, #0]
 8007296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729a:	f380 8809 	msr	PSP, r0
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f04f 0000 	mov.w	r0, #0
 80072a6:	f380 8811 	msr	BASEPRI, r0
 80072aa:	4770      	bx	lr
 80072ac:	f3af 8000 	nop.w

080072b0 <pxCurrentTCBConst2>:
 80072b0:	200009c0 	.word	0x200009c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop

080072b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072b8:	4808      	ldr	r0, [pc, #32]	@ (80072dc <prvPortStartFirstTask+0x24>)
 80072ba:	6800      	ldr	r0, [r0, #0]
 80072bc:	6800      	ldr	r0, [r0, #0]
 80072be:	f380 8808 	msr	MSP, r0
 80072c2:	f04f 0000 	mov.w	r0, #0
 80072c6:	f380 8814 	msr	CONTROL, r0
 80072ca:	b662      	cpsie	i
 80072cc:	b661      	cpsie	f
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	df00      	svc	0
 80072d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072da:	bf00      	nop
 80072dc:	e000ed08 	.word	0xe000ed08

080072e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072e6:	4b47      	ldr	r3, [pc, #284]	@ (8007404 <xPortStartScheduler+0x124>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a47      	ldr	r2, [pc, #284]	@ (8007408 <xPortStartScheduler+0x128>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10b      	bne.n	8007308 <xPortStartScheduler+0x28>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	613b      	str	r3, [r7, #16]
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	e7fd      	b.n	8007304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007308:	4b3e      	ldr	r3, [pc, #248]	@ (8007404 <xPortStartScheduler+0x124>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a3f      	ldr	r2, [pc, #252]	@ (800740c <xPortStartScheduler+0x12c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d10b      	bne.n	800732a <xPortStartScheduler+0x4a>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60fb      	str	r3, [r7, #12]
}
 8007324:	bf00      	nop
 8007326:	bf00      	nop
 8007328:	e7fd      	b.n	8007326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800732a:	4b39      	ldr	r3, [pc, #228]	@ (8007410 <xPortStartScheduler+0x130>)
 800732c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	22ff      	movs	r2, #255	@ 0xff
 800733a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800734c:	b2da      	uxtb	r2, r3
 800734e:	4b31      	ldr	r3, [pc, #196]	@ (8007414 <xPortStartScheduler+0x134>)
 8007350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007352:	4b31      	ldr	r3, [pc, #196]	@ (8007418 <xPortStartScheduler+0x138>)
 8007354:	2207      	movs	r2, #7
 8007356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007358:	e009      	b.n	800736e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800735a:	4b2f      	ldr	r3, [pc, #188]	@ (8007418 <xPortStartScheduler+0x138>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3b01      	subs	r3, #1
 8007360:	4a2d      	ldr	r2, [pc, #180]	@ (8007418 <xPortStartScheduler+0x138>)
 8007362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007376:	2b80      	cmp	r3, #128	@ 0x80
 8007378:	d0ef      	beq.n	800735a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800737a:	4b27      	ldr	r3, [pc, #156]	@ (8007418 <xPortStartScheduler+0x138>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1c3 0307 	rsb	r3, r3, #7
 8007382:	2b04      	cmp	r3, #4
 8007384:	d00b      	beq.n	800739e <xPortStartScheduler+0xbe>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	60bb      	str	r3, [r7, #8]
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800739e:	4b1e      	ldr	r3, [pc, #120]	@ (8007418 <xPortStartScheduler+0x138>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007418 <xPortStartScheduler+0x138>)
 80073a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007418 <xPortStartScheduler+0x138>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073b0:	4a19      	ldr	r2, [pc, #100]	@ (8007418 <xPortStartScheduler+0x138>)
 80073b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073bc:	4b17      	ldr	r3, [pc, #92]	@ (800741c <xPortStartScheduler+0x13c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a16      	ldr	r2, [pc, #88]	@ (800741c <xPortStartScheduler+0x13c>)
 80073c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073c8:	4b14      	ldr	r3, [pc, #80]	@ (800741c <xPortStartScheduler+0x13c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a13      	ldr	r2, [pc, #76]	@ (800741c <xPortStartScheduler+0x13c>)
 80073ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073d4:	f000 f8da 	bl	800758c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073d8:	4b11      	ldr	r3, [pc, #68]	@ (8007420 <xPortStartScheduler+0x140>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073de:	f000 f8f9 	bl	80075d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073e2:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <xPortStartScheduler+0x144>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007424 <xPortStartScheduler+0x144>)
 80073e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073ee:	f7ff ff63 	bl	80072b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073f2:	f7fe ff2f 	bl	8006254 <vTaskSwitchContext>
	prvTaskExitError();
 80073f6:	f7ff ff1b 	bl	8007230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	e000ed00 	.word	0xe000ed00
 8007408:	410fc271 	.word	0x410fc271
 800740c:	410fc270 	.word	0x410fc270
 8007410:	e000e400 	.word	0xe000e400
 8007414:	20000fec 	.word	0x20000fec
 8007418:	20000ff0 	.word	0x20000ff0
 800741c:	e000ed20 	.word	0xe000ed20
 8007420:	20000010 	.word	0x20000010
 8007424:	e000ef34 	.word	0xe000ef34

08007428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	607b      	str	r3, [r7, #4]
}
 8007440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007442:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <vPortEnterCritical+0x5c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3301      	adds	r3, #1
 8007448:	4a0e      	ldr	r2, [pc, #56]	@ (8007484 <vPortEnterCritical+0x5c>)
 800744a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800744c:	4b0d      	ldr	r3, [pc, #52]	@ (8007484 <vPortEnterCritical+0x5c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d110      	bne.n	8007476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007454:	4b0c      	ldr	r3, [pc, #48]	@ (8007488 <vPortEnterCritical+0x60>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <vPortEnterCritical+0x4e>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	603b      	str	r3, [r7, #0]
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	e7fd      	b.n	8007472 <vPortEnterCritical+0x4a>
	}
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000010 	.word	0x20000010
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007492:	4b12      	ldr	r3, [pc, #72]	@ (80074dc <vPortExitCritical+0x50>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <vPortExitCritical+0x26>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	607b      	str	r3, [r7, #4]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074b2:	4b0a      	ldr	r3, [pc, #40]	@ (80074dc <vPortExitCritical+0x50>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	4a08      	ldr	r2, [pc, #32]	@ (80074dc <vPortExitCritical+0x50>)
 80074ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074bc:	4b07      	ldr	r3, [pc, #28]	@ (80074dc <vPortExitCritical+0x50>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d105      	bne.n	80074d0 <vPortExitCritical+0x44>
 80074c4:	2300      	movs	r3, #0
 80074c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	f383 8811 	msr	BASEPRI, r3
}
 80074ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000010 	.word	0x20000010

080074e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074e0:	f3ef 8009 	mrs	r0, PSP
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	4b15      	ldr	r3, [pc, #84]	@ (8007540 <pxCurrentTCBConst>)
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	f01e 0f10 	tst.w	lr, #16
 80074f0:	bf08      	it	eq
 80074f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fa:	6010      	str	r0, [r2, #0]
 80074fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007504:	f380 8811 	msr	BASEPRI, r0
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f7fe fea0 	bl	8006254 <vTaskSwitchContext>
 8007514:	f04f 0000 	mov.w	r0, #0
 8007518:	f380 8811 	msr	BASEPRI, r0
 800751c:	bc09      	pop	{r0, r3}
 800751e:	6819      	ldr	r1, [r3, #0]
 8007520:	6808      	ldr	r0, [r1, #0]
 8007522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007526:	f01e 0f10 	tst.w	lr, #16
 800752a:	bf08      	it	eq
 800752c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007530:	f380 8809 	msr	PSP, r0
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w

08007540 <pxCurrentTCBConst>:
 8007540:	200009c0 	.word	0x200009c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop

08007548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	607b      	str	r3, [r7, #4]
}
 8007560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007562:	f7fe fdbd 	bl	80060e0 <xTaskIncrementTick>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800756c:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <xPortSysTickHandler+0x40>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	f383 8811 	msr	BASEPRI, r3
}
 800757e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007590:	4b0b      	ldr	r3, [pc, #44]	@ (80075c0 <vPortSetupTimerInterrupt+0x34>)
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <vPortSetupTimerInterrupt+0x38>)
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <vPortSetupTimerInterrupt+0x3c>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a0a      	ldr	r2, [pc, #40]	@ (80075cc <vPortSetupTimerInterrupt+0x40>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	099b      	lsrs	r3, r3, #6
 80075a8:	4a09      	ldr	r2, [pc, #36]	@ (80075d0 <vPortSetupTimerInterrupt+0x44>)
 80075aa:	3b01      	subs	r3, #1
 80075ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075ae:	4b04      	ldr	r3, [pc, #16]	@ (80075c0 <vPortSetupTimerInterrupt+0x34>)
 80075b0:	2207      	movs	r2, #7
 80075b2:	601a      	str	r2, [r3, #0]
}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	e000e010 	.word	0xe000e010
 80075c4:	e000e018 	.word	0xe000e018
 80075c8:	20000004 	.word	0x20000004
 80075cc:	10624dd3 	.word	0x10624dd3
 80075d0:	e000e014 	.word	0xe000e014

080075d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075e4 <vPortEnableVFP+0x10>
 80075d8:	6801      	ldr	r1, [r0, #0]
 80075da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075de:	6001      	str	r1, [r0, #0]
 80075e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075e2:	bf00      	nop
 80075e4:	e000ed88 	.word	0xe000ed88

080075e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ee:	f3ef 8305 	mrs	r3, IPSR
 80075f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b0f      	cmp	r3, #15
 80075f8:	d915      	bls.n	8007626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075fa:	4a18      	ldr	r2, [pc, #96]	@ (800765c <vPortValidateInterruptPriority+0x74>)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007604:	4b16      	ldr	r3, [pc, #88]	@ (8007660 <vPortValidateInterruptPriority+0x78>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	7afa      	ldrb	r2, [r7, #11]
 800760a:	429a      	cmp	r2, r3
 800760c:	d20b      	bcs.n	8007626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	e7fd      	b.n	8007622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007626:	4b0f      	ldr	r3, [pc, #60]	@ (8007664 <vPortValidateInterruptPriority+0x7c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800762e:	4b0e      	ldr	r3, [pc, #56]	@ (8007668 <vPortValidateInterruptPriority+0x80>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d90b      	bls.n	800764e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	603b      	str	r3, [r7, #0]
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	e7fd      	b.n	800764a <vPortValidateInterruptPriority+0x62>
	}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	e000e3f0 	.word	0xe000e3f0
 8007660:	20000fec 	.word	0x20000fec
 8007664:	e000ed0c 	.word	0xe000ed0c
 8007668:	20000ff0 	.word	0x20000ff0

0800766c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	@ 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007678:	f7fe fc76 	bl	8005f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800767c:	4b5c      	ldr	r3, [pc, #368]	@ (80077f0 <pvPortMalloc+0x184>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007684:	f000 f924 	bl	80078d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007688:	4b5a      	ldr	r3, [pc, #360]	@ (80077f4 <pvPortMalloc+0x188>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4013      	ands	r3, r2
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 8095 	bne.w	80077c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01e      	beq.n	80076da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800769c:	2208      	movs	r2, #8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d015      	beq.n	80076da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f023 0307 	bic.w	r3, r3, #7
 80076b4:	3308      	adds	r3, #8
 80076b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <pvPortMalloc+0x6e>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	617b      	str	r3, [r7, #20]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d06f      	beq.n	80077c0 <pvPortMalloc+0x154>
 80076e0:	4b45      	ldr	r3, [pc, #276]	@ (80077f8 <pvPortMalloc+0x18c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d86a      	bhi.n	80077c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ea:	4b44      	ldr	r3, [pc, #272]	@ (80077fc <pvPortMalloc+0x190>)
 80076ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076ee:	4b43      	ldr	r3, [pc, #268]	@ (80077fc <pvPortMalloc+0x190>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076f4:	e004      	b.n	8007700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	429a      	cmp	r2, r3
 8007708:	d903      	bls.n	8007712 <pvPortMalloc+0xa6>
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f1      	bne.n	80076f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007712:	4b37      	ldr	r3, [pc, #220]	@ (80077f0 <pvPortMalloc+0x184>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007718:	429a      	cmp	r2, r3
 800771a:	d051      	beq.n	80077c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2208      	movs	r2, #8
 8007722:	4413      	add	r3, r2
 8007724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	1ad2      	subs	r2, r2, r3
 8007736:	2308      	movs	r3, #8
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	429a      	cmp	r2, r3
 800773c:	d920      	bls.n	8007780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800773e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <pvPortMalloc+0xfc>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	613b      	str	r3, [r7, #16]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	1ad2      	subs	r2, r2, r3
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800777a:	69b8      	ldr	r0, [r7, #24]
 800777c:	f000 f90a 	bl	8007994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007780:	4b1d      	ldr	r3, [pc, #116]	@ (80077f8 <pvPortMalloc+0x18c>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	4a1b      	ldr	r2, [pc, #108]	@ (80077f8 <pvPortMalloc+0x18c>)
 800778c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800778e:	4b1a      	ldr	r3, [pc, #104]	@ (80077f8 <pvPortMalloc+0x18c>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <pvPortMalloc+0x194>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	429a      	cmp	r2, r3
 8007798:	d203      	bcs.n	80077a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800779a:	4b17      	ldr	r3, [pc, #92]	@ (80077f8 <pvPortMalloc+0x18c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a18      	ldr	r2, [pc, #96]	@ (8007800 <pvPortMalloc+0x194>)
 80077a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	4b13      	ldr	r3, [pc, #76]	@ (80077f4 <pvPortMalloc+0x188>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077b6:	4b13      	ldr	r3, [pc, #76]	@ (8007804 <pvPortMalloc+0x198>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3301      	adds	r3, #1
 80077bc:	4a11      	ldr	r2, [pc, #68]	@ (8007804 <pvPortMalloc+0x198>)
 80077be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077c0:	f7fe fbe0 	bl	8005f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <pvPortMalloc+0x17a>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <pvPortMalloc+0x176>
	return pvReturn;
 80077e6:	69fb      	ldr	r3, [r7, #28]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3728      	adds	r7, #40	@ 0x28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20004bfc 	.word	0x20004bfc
 80077f4:	20004c10 	.word	0x20004c10
 80077f8:	20004c00 	.word	0x20004c00
 80077fc:	20004bf4 	.word	0x20004bf4
 8007800:	20004c04 	.word	0x20004c04
 8007804:	20004c08 	.word	0x20004c08

08007808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d04f      	beq.n	80078ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800781a:	2308      	movs	r3, #8
 800781c:	425b      	negs	r3, r3
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4413      	add	r3, r2
 8007822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	4b25      	ldr	r3, [pc, #148]	@ (80078c4 <vPortFree+0xbc>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4013      	ands	r3, r2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10b      	bne.n	800784e <vPortFree+0x46>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	60fb      	str	r3, [r7, #12]
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <vPortFree+0x66>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	60bb      	str	r3, [r7, #8]
}
 8007868:	bf00      	nop
 800786a:	bf00      	nop
 800786c:	e7fd      	b.n	800786a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	4b14      	ldr	r3, [pc, #80]	@ (80078c4 <vPortFree+0xbc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4013      	ands	r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01e      	beq.n	80078ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11a      	bne.n	80078ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	4b0e      	ldr	r3, [pc, #56]	@ (80078c4 <vPortFree+0xbc>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007894:	f7fe fb68 	bl	8005f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <vPortFree+0xc0>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4413      	add	r3, r2
 80078a2:	4a09      	ldr	r2, [pc, #36]	@ (80078c8 <vPortFree+0xc0>)
 80078a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078a6:	6938      	ldr	r0, [r7, #16]
 80078a8:	f000 f874 	bl	8007994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078ac:	4b07      	ldr	r3, [pc, #28]	@ (80078cc <vPortFree+0xc4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	4a06      	ldr	r2, [pc, #24]	@ (80078cc <vPortFree+0xc4>)
 80078b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078b6:	f7fe fb65 	bl	8005f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ba:	bf00      	nop
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20004c10 	.word	0x20004c10
 80078c8:	20004c00 	.word	0x20004c00
 80078cc:	20004c0c 	.word	0x20004c0c

080078d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80078da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078dc:	4b27      	ldr	r3, [pc, #156]	@ (800797c <prvHeapInit+0xac>)
 80078de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00c      	beq.n	8007904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3307      	adds	r3, #7
 80078ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0307 	bic.w	r3, r3, #7
 80078f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	4a1f      	ldr	r2, [pc, #124]	@ (800797c <prvHeapInit+0xac>)
 8007900:	4413      	add	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007908:	4a1d      	ldr	r2, [pc, #116]	@ (8007980 <prvHeapInit+0xb0>)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800790e:	4b1c      	ldr	r3, [pc, #112]	@ (8007980 <prvHeapInit+0xb0>)
 8007910:	2200      	movs	r2, #0
 8007912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	4413      	add	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800791c:	2208      	movs	r2, #8
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0307 	bic.w	r3, r3, #7
 800792a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4a15      	ldr	r2, [pc, #84]	@ (8007984 <prvHeapInit+0xb4>)
 8007930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007932:	4b14      	ldr	r3, [pc, #80]	@ (8007984 <prvHeapInit+0xb4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2200      	movs	r2, #0
 8007938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800793a:	4b12      	ldr	r3, [pc, #72]	@ (8007984 <prvHeapInit+0xb4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007950:	4b0c      	ldr	r3, [pc, #48]	@ (8007984 <prvHeapInit+0xb4>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	4a0a      	ldr	r2, [pc, #40]	@ (8007988 <prvHeapInit+0xb8>)
 800795e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	4a09      	ldr	r2, [pc, #36]	@ (800798c <prvHeapInit+0xbc>)
 8007966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007968:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <prvHeapInit+0xc0>)
 800796a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800796e:	601a      	str	r2, [r3, #0]
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	20000ff4 	.word	0x20000ff4
 8007980:	20004bf4 	.word	0x20004bf4
 8007984:	20004bfc 	.word	0x20004bfc
 8007988:	20004c04 	.word	0x20004c04
 800798c:	20004c00 	.word	0x20004c00
 8007990:	20004c10 	.word	0x20004c10

08007994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800799c:	4b28      	ldr	r3, [pc, #160]	@ (8007a40 <prvInsertBlockIntoFreeList+0xac>)
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	e002      	b.n	80079a8 <prvInsertBlockIntoFreeList+0x14>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d8f7      	bhi.n	80079a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4413      	add	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d108      	bne.n	80079d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	441a      	add	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d118      	bne.n	8007a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b15      	ldr	r3, [pc, #84]	@ (8007a44 <prvInsertBlockIntoFreeList+0xb0>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d00d      	beq.n	8007a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	441a      	add	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e008      	b.n	8007a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a12:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <prvInsertBlockIntoFreeList+0xb0>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e003      	b.n	8007a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d002      	beq.n	8007a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20004bf4 	.word	0x20004bf4
 8007a44:	20004bfc 	.word	0x20004bfc

08007a48 <memcmp>:
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	3901      	subs	r1, #1
 8007a4c:	4402      	add	r2, r0
 8007a4e:	4290      	cmp	r0, r2
 8007a50:	d101      	bne.n	8007a56 <memcmp+0xe>
 8007a52:	2000      	movs	r0, #0
 8007a54:	e005      	b.n	8007a62 <memcmp+0x1a>
 8007a56:	7803      	ldrb	r3, [r0, #0]
 8007a58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d001      	beq.n	8007a64 <memcmp+0x1c>
 8007a60:	1b18      	subs	r0, r3, r4
 8007a62:	bd10      	pop	{r4, pc}
 8007a64:	3001      	adds	r0, #1
 8007a66:	e7f2      	b.n	8007a4e <memcmp+0x6>

08007a68 <memset>:
 8007a68:	4402      	add	r2, r0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	f803 1b01 	strb.w	r1, [r3], #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <_reclaim_reent>:
 8007a78:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <_reclaim_reent+0xa8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4283      	cmp	r3, r0
 8007a7e:	b570      	push	{r4, r5, r6, lr}
 8007a80:	4604      	mov	r4, r0
 8007a82:	d04b      	beq.n	8007b1c <_reclaim_reent+0xa4>
 8007a84:	69c3      	ldr	r3, [r0, #28]
 8007a86:	b1ab      	cbz	r3, 8007ab4 <_reclaim_reent+0x3c>
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	b16b      	cbz	r3, 8007aa8 <_reclaim_reent+0x30>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	69e3      	ldr	r3, [r4, #28]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	5959      	ldr	r1, [r3, r5]
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d13b      	bne.n	8007b10 <_reclaim_reent+0x98>
 8007a98:	3504      	adds	r5, #4
 8007a9a:	2d80      	cmp	r5, #128	@ 0x80
 8007a9c:	d1f7      	bne.n	8007a8e <_reclaim_reent+0x16>
 8007a9e:	69e3      	ldr	r3, [r4, #28]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	68d9      	ldr	r1, [r3, #12]
 8007aa4:	f000 f872 	bl	8007b8c <_free_r>
 8007aa8:	69e3      	ldr	r3, [r4, #28]
 8007aaa:	6819      	ldr	r1, [r3, #0]
 8007aac:	b111      	cbz	r1, 8007ab4 <_reclaim_reent+0x3c>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f86c 	bl	8007b8c <_free_r>
 8007ab4:	6961      	ldr	r1, [r4, #20]
 8007ab6:	b111      	cbz	r1, 8007abe <_reclaim_reent+0x46>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f867 	bl	8007b8c <_free_r>
 8007abe:	69e1      	ldr	r1, [r4, #28]
 8007ac0:	b111      	cbz	r1, 8007ac8 <_reclaim_reent+0x50>
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f862 	bl	8007b8c <_free_r>
 8007ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007aca:	b111      	cbz	r1, 8007ad2 <_reclaim_reent+0x5a>
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 f85d 	bl	8007b8c <_free_r>
 8007ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad4:	b111      	cbz	r1, 8007adc <_reclaim_reent+0x64>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 f858 	bl	8007b8c <_free_r>
 8007adc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007ade:	b111      	cbz	r1, 8007ae6 <_reclaim_reent+0x6e>
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 f853 	bl	8007b8c <_free_r>
 8007ae6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007ae8:	b111      	cbz	r1, 8007af0 <_reclaim_reent+0x78>
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 f84e 	bl	8007b8c <_free_r>
 8007af0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007af2:	b111      	cbz	r1, 8007afa <_reclaim_reent+0x82>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f849 	bl	8007b8c <_free_r>
 8007afa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007afc:	b111      	cbz	r1, 8007b04 <_reclaim_reent+0x8c>
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 f844 	bl	8007b8c <_free_r>
 8007b04:	6a23      	ldr	r3, [r4, #32]
 8007b06:	b14b      	cbz	r3, 8007b1c <_reclaim_reent+0xa4>
 8007b08:	4620      	mov	r0, r4
 8007b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b0e:	4718      	bx	r3
 8007b10:	680e      	ldr	r6, [r1, #0]
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 f83a 	bl	8007b8c <_free_r>
 8007b18:	4631      	mov	r1, r6
 8007b1a:	e7bb      	b.n	8007a94 <_reclaim_reent+0x1c>
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000014 	.word	0x20000014

08007b24 <__libc_init_array>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4d0d      	ldr	r5, [pc, #52]	@ (8007b5c <__libc_init_array+0x38>)
 8007b28:	4c0d      	ldr	r4, [pc, #52]	@ (8007b60 <__libc_init_array+0x3c>)
 8007b2a:	1b64      	subs	r4, r4, r5
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	2600      	movs	r6, #0
 8007b30:	42a6      	cmp	r6, r4
 8007b32:	d109      	bne.n	8007b48 <__libc_init_array+0x24>
 8007b34:	4d0b      	ldr	r5, [pc, #44]	@ (8007b64 <__libc_init_array+0x40>)
 8007b36:	4c0c      	ldr	r4, [pc, #48]	@ (8007b68 <__libc_init_array+0x44>)
 8007b38:	f000 f87e 	bl	8007c38 <_init>
 8007b3c:	1b64      	subs	r4, r4, r5
 8007b3e:	10a4      	asrs	r4, r4, #2
 8007b40:	2600      	movs	r6, #0
 8007b42:	42a6      	cmp	r6, r4
 8007b44:	d105      	bne.n	8007b52 <__libc_init_array+0x2e>
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4c:	4798      	blx	r3
 8007b4e:	3601      	adds	r6, #1
 8007b50:	e7ee      	b.n	8007b30 <__libc_init_array+0xc>
 8007b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b56:	4798      	blx	r3
 8007b58:	3601      	adds	r6, #1
 8007b5a:	e7f2      	b.n	8007b42 <__libc_init_array+0x1e>
 8007b5c:	08007d7c 	.word	0x08007d7c
 8007b60:	08007d7c 	.word	0x08007d7c
 8007b64:	08007d7c 	.word	0x08007d7c
 8007b68:	08007d80 	.word	0x08007d80

08007b6c <__retarget_lock_acquire_recursive>:
 8007b6c:	4770      	bx	lr

08007b6e <__retarget_lock_release_recursive>:
 8007b6e:	4770      	bx	lr

08007b70 <memcpy>:
 8007b70:	440a      	add	r2, r1
 8007b72:	4291      	cmp	r1, r2
 8007b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b78:	d100      	bne.n	8007b7c <memcpy+0xc>
 8007b7a:	4770      	bx	lr
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b86:	4291      	cmp	r1, r2
 8007b88:	d1f9      	bne.n	8007b7e <memcpy+0xe>
 8007b8a:	bd10      	pop	{r4, pc}

08007b8c <_free_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4605      	mov	r5, r0
 8007b90:	2900      	cmp	r1, #0
 8007b92:	d041      	beq.n	8007c18 <_free_r+0x8c>
 8007b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b98:	1f0c      	subs	r4, r1, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bfb8      	it	lt
 8007b9e:	18e4      	addlt	r4, r4, r3
 8007ba0:	f000 f83e 	bl	8007c20 <__malloc_lock>
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c1c <_free_r+0x90>)
 8007ba6:	6813      	ldr	r3, [r2, #0]
 8007ba8:	b933      	cbnz	r3, 8007bb8 <_free_r+0x2c>
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	6014      	str	r4, [r2, #0]
 8007bae:	4628      	mov	r0, r5
 8007bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb4:	f000 b83a 	b.w	8007c2c <__malloc_unlock>
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d908      	bls.n	8007bce <_free_r+0x42>
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	1821      	adds	r1, r4, r0
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	bf01      	itttt	eq
 8007bc4:	6819      	ldreq	r1, [r3, #0]
 8007bc6:	685b      	ldreq	r3, [r3, #4]
 8007bc8:	1809      	addeq	r1, r1, r0
 8007bca:	6021      	streq	r1, [r4, #0]
 8007bcc:	e7ed      	b.n	8007baa <_free_r+0x1e>
 8007bce:	461a      	mov	r2, r3
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	b10b      	cbz	r3, 8007bd8 <_free_r+0x4c>
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	d9fa      	bls.n	8007bce <_free_r+0x42>
 8007bd8:	6811      	ldr	r1, [r2, #0]
 8007bda:	1850      	adds	r0, r2, r1
 8007bdc:	42a0      	cmp	r0, r4
 8007bde:	d10b      	bne.n	8007bf8 <_free_r+0x6c>
 8007be0:	6820      	ldr	r0, [r4, #0]
 8007be2:	4401      	add	r1, r0
 8007be4:	1850      	adds	r0, r2, r1
 8007be6:	4283      	cmp	r3, r0
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	d1e0      	bne.n	8007bae <_free_r+0x22>
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	6053      	str	r3, [r2, #4]
 8007bf2:	4408      	add	r0, r1
 8007bf4:	6010      	str	r0, [r2, #0]
 8007bf6:	e7da      	b.n	8007bae <_free_r+0x22>
 8007bf8:	d902      	bls.n	8007c00 <_free_r+0x74>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	602b      	str	r3, [r5, #0]
 8007bfe:	e7d6      	b.n	8007bae <_free_r+0x22>
 8007c00:	6820      	ldr	r0, [r4, #0]
 8007c02:	1821      	adds	r1, r4, r0
 8007c04:	428b      	cmp	r3, r1
 8007c06:	bf04      	itt	eq
 8007c08:	6819      	ldreq	r1, [r3, #0]
 8007c0a:	685b      	ldreq	r3, [r3, #4]
 8007c0c:	6063      	str	r3, [r4, #4]
 8007c0e:	bf04      	itt	eq
 8007c10:	1809      	addeq	r1, r1, r0
 8007c12:	6021      	streq	r1, [r4, #0]
 8007c14:	6054      	str	r4, [r2, #4]
 8007c16:	e7ca      	b.n	8007bae <_free_r+0x22>
 8007c18:	bd38      	pop	{r3, r4, r5, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20004d50 	.word	0x20004d50

08007c20 <__malloc_lock>:
 8007c20:	4801      	ldr	r0, [pc, #4]	@ (8007c28 <__malloc_lock+0x8>)
 8007c22:	f7ff bfa3 	b.w	8007b6c <__retarget_lock_acquire_recursive>
 8007c26:	bf00      	nop
 8007c28:	20004d4c 	.word	0x20004d4c

08007c2c <__malloc_unlock>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	@ (8007c34 <__malloc_unlock+0x8>)
 8007c2e:	f7ff bf9e 	b.w	8007b6e <__retarget_lock_release_recursive>
 8007c32:	bf00      	nop
 8007c34:	20004d4c 	.word	0x20004d4c

08007c38 <_init>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	bf00      	nop
 8007c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3e:	bc08      	pop	{r3}
 8007c40:	469e      	mov	lr, r3
 8007c42:	4770      	bx	lr

08007c44 <_fini>:
 8007c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c46:	bf00      	nop
 8007c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4a:	bc08      	pop	{r3}
 8007c4c:	469e      	mov	lr, r3
 8007c4e:	4770      	bx	lr
